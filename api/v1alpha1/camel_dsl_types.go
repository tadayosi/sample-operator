// Code generated by schema-generate. DO NOT EDIT.

package v1alpha1

import (
	"bytes"
	"encoding/json"
	"errors"
)

// OrgApacheCamelDslYamlDeserializersErrorHandlerBuilderDeserializer
type OrgApacheCamelDslYamlDeserializersErrorHandlerBuilderDeserializer struct {
	DeadLetterChannel *OrgApacheCamelModelErrorhandlerDeadLetterChannelDefinition   `json:"deadLetterChannel,omitempty"`
	Log               *OrgApacheCamelModelErrorhandlerDefaultErrorHandlerDefinition `json:"log,omitempty"`
	None              *OrgApacheCamelModelErrorhandlerNoErrorHandlerDefinition      `json:"none,omitempty"`
	Ref               string                                                        `json:"ref,omitempty"`
}

// OrgApacheCamelDslYamlDeserializersNamedBeanDefinition
type OrgApacheCamelDslYamlDeserializersNamedBeanDefinition struct {
	Name       string      `json:"name"`
	Properties *Properties `json:"properties,omitempty"`
	Type       string      `json:"type"`
}

// OrgApacheCamelDslYamlDeserializersOutputAwareFromDefinition
type OrgApacheCamelDslYamlDeserializersOutputAwareFromDefinition struct {
	Parameters *Parameters                               `json:"parameters,omitempty"`
	Steps      []*OrgApacheCamelModelProcessorDefinition `json:"steps"`
	Uri        string                                    `json:"uri"`
}

// OrgApacheCamelDslYamlDeserializersRouteFromDefinitionDeserializer
type OrgApacheCamelDslYamlDeserializersRouteFromDefinitionDeserializer struct {
	Parameters *Parameters                               `json:"parameters,omitempty"`
	Steps      []*OrgApacheCamelModelProcessorDefinition `json:"steps"`
	Uri        string                                    `json:"uri"`
}

// OrgApacheCamelModelAggregateDefinition
type OrgApacheCamelModelAggregateDefinition struct {
	AggregateController                string                                                  `json:"aggregateController,omitempty"`
	AggregationRepository              string                                                  `json:"aggregationRepository,omitempty"`
	AggregationStrategy                string                                                  `json:"aggregationStrategy"`
	AggregationStrategyMethodAllowNull bool                                                    `json:"aggregationStrategyMethodAllowNull,omitempty"`
	AggregationStrategyMethodName      string                                                  `json:"aggregationStrategyMethodName,omitempty"`
	CloseCorrelationKeyOnCompletion    float64                                                 `json:"closeCorrelationKeyOnCompletion,omitempty"`
	CompleteAllOnStop                  bool                                                    `json:"completeAllOnStop,omitempty"`
	CompletionFromBatchConsumer        bool                                                    `json:"completionFromBatchConsumer,omitempty"`
	CompletionInterval                 string                                                  `json:"completionInterval,omitempty"`
	CompletionOnNewCorrelationGroup    bool                                                    `json:"completionOnNewCorrelationGroup,omitempty"`
	CompletionPredicate                *OrgApacheCamelModelExpressionSubElementDefinition      `json:"completionPredicate,omitempty"`
	CompletionSize                     float64                                                 `json:"completionSize,omitempty"`
	CompletionSizeExpression           *OrgApacheCamelModelExpressionSubElementDefinition      `json:"completionSizeExpression,omitempty"`
	CompletionTimeout                  string                                                  `json:"completionTimeout,omitempty"`
	CompletionTimeoutCheckerInterval   string                                                  `json:"completionTimeoutCheckerInterval,omitempty"`
	CompletionTimeoutExpression        *OrgApacheCamelModelExpressionSubElementDefinition      `json:"completionTimeoutExpression,omitempty"`
	CorrelationExpression              *OrgApacheCamelModelExpressionSubElementDefinition      `json:"correlationExpression,omitempty"`
	Description                        string                                                  `json:"description,omitempty"`
	DiscardOnAggregationFailure        bool                                                    `json:"discardOnAggregationFailure,omitempty"`
	DiscardOnCompletionTimeout         bool                                                    `json:"discardOnCompletionTimeout,omitempty"`
	EagerCheckCompletion               bool                                                    `json:"eagerCheckCompletion,omitempty"`
	ExecutorService                    string                                                  `json:"executorService,omitempty"`
	ForceCompletionOnStop              bool                                                    `json:"forceCompletionOnStop,omitempty"`
	Id                                 string                                                  `json:"id,omitempty"`
	IgnoreInvalidCorrelationKeys       bool                                                    `json:"ignoreInvalidCorrelationKeys,omitempty"`
	InheritErrorHandler                bool                                                    `json:"inheritErrorHandler,omitempty"`
	OptimisticLockRetryPolicy          *OrgApacheCamelModelOptimisticLockRetryPolicyDefinition `json:"optimisticLockRetryPolicy,omitempty"`
	OptimisticLocking                  bool                                                    `json:"optimisticLocking,omitempty"`
	ParallelProcessing                 bool                                                    `json:"parallelProcessing,omitempty"`
	Steps                              []*RawStep                                              `json:"steps,omitempty"`
	TimeoutCheckerExecutorService      string                                                  `json:"timeoutCheckerExecutorService,omitempty"`
}

// OrgApacheCamelModelBeanDefinition
type OrgApacheCamelModelBeanDefinition struct {
	BeanType            string `json:"beanType,omitempty"`
	Description         string `json:"description,omitempty"`
	Id                  string `json:"id,omitempty"`
	InheritErrorHandler bool   `json:"inheritErrorHandler,omitempty"`
	Method              string `json:"method,omitempty"`
	Ref                 string `json:"ref,omitempty"`
	Scope               string `json:"scope,omitempty"`
}

// OrgApacheCamelModelCatchDefinition
type OrgApacheCamelModelCatchDefinition struct {
	Description         string                             `json:"description,omitempty"`
	Exception           []string                           `json:"exception,omitempty"`
	Id                  string                             `json:"id,omitempty"`
	InheritErrorHandler bool                               `json:"inheritErrorHandler,omitempty"`
	OnWhen              *OrgApacheCamelModelWhenDefinition `json:"onWhen,omitempty"`
	Steps               []*RawStep                         `json:"steps,omitempty"`
}

// OrgApacheCamelModelChoiceDefinition
type OrgApacheCamelModelChoiceDefinition struct {
	Description         string                                  `json:"description,omitempty"`
	Id                  string                                  `json:"id,omitempty"`
	InheritErrorHandler bool                                    `json:"inheritErrorHandler,omitempty"`
	Otherwise           *OrgApacheCamelModelOtherwiseDefinition `json:"otherwise,omitempty"`
	Precondition        bool                                    `json:"precondition,omitempty"`
	Steps               []*RawStep                              `json:"steps,omitempty"`
	When                []*OrgApacheCamelModelWhenDefinition    `json:"when,omitempty"`
}

// OrgApacheCamelModelCircuitBreakerDefinition
type OrgApacheCamelModelCircuitBreakerDefinition struct {
	Configuration               string                                                    `json:"configuration,omitempty"`
	Description                 string                                                    `json:"description,omitempty"`
	FaultToleranceConfiguration *OrgApacheCamelModelFaultToleranceConfigurationDefinition `json:"faultToleranceConfiguration,omitempty"`
	Id                          string                                                    `json:"id,omitempty"`
	InheritErrorHandler         bool                                                      `json:"inheritErrorHandler,omitempty"`
	OnFallback                  *OrgApacheCamelModelOnFallbackDefinition                  `json:"onFallback,omitempty"`
	Resilience4jConfiguration   *OrgApacheCamelModelResilience4jConfigurationDefinition   `json:"resilience4jConfiguration,omitempty"`
	Steps                       []*RawStep                                                `json:"steps,omitempty"`
}

// OrgApacheCamelModelClaimCheckDefinition
type OrgApacheCamelModelClaimCheckDefinition struct {
	AggregationStrategy           string `json:"aggregationStrategy,omitempty"`
	AggregationStrategyMethodName string `json:"aggregationStrategyMethodName,omitempty"`
	Description                   string `json:"description,omitempty"`
	Filter                        string `json:"filter,omitempty"`
	Id                            string `json:"id,omitempty"`
	InheritErrorHandler           bool   `json:"inheritErrorHandler,omitempty"`
	Key                           string `json:"key,omitempty"`
	Operation                     string `json:"operation"`
}

// OrgApacheCamelModelCloudBlacklistServiceCallServiceFilterConfiguration
type OrgApacheCamelModelCloudBlacklistServiceCallServiceFilterConfiguration struct {
	Id         string                                   `json:"id,omitempty"`
	Properties []*OrgApacheCamelModelPropertyDefinition `json:"properties,omitempty"`
	Servers    []string                                 `json:"servers,omitempty"`
}

// OrgApacheCamelModelCloudCachingServiceCallServiceDiscoveryConfiguration
type OrgApacheCamelModelCloudCachingServiceCallServiceDiscoveryConfiguration struct {
	CombinedServiceDiscovery   *RawStep                                                                    `json:"combinedServiceDiscovery,omitempty"`
	ConsulServiceDiscovery     *OrgApacheCamelModelCloudConsulServiceCallServiceDiscoveryConfiguration     `json:"consulServiceDiscovery,omitempty"`
	DnsServiceDiscovery        *OrgApacheCamelModelCloudDnsServiceCallServiceDiscoveryConfiguration        `json:"dnsServiceDiscovery,omitempty"`
	Id                         string                                                                      `json:"id,omitempty"`
	KubernetesServiceDiscovery *OrgApacheCamelModelCloudKubernetesServiceCallServiceDiscoveryConfiguration `json:"kubernetesServiceDiscovery,omitempty"`
	Properties                 []*OrgApacheCamelModelPropertyDefinition                                    `json:"properties,omitempty"`
	StaticServiceDiscovery     *OrgApacheCamelModelCloudStaticServiceCallServiceDiscoveryConfiguration     `json:"staticServiceDiscovery,omitempty"`
	Timeout                    float64                                                                     `json:"timeout,omitempty"`
	Units                      string                                                                      `json:"units,omitempty"`
}

// OrgApacheCamelModelCloudCombinedServiceCallServiceDiscoveryConfiguration
type OrgApacheCamelModelCloudCombinedServiceCallServiceDiscoveryConfiguration struct {
	CachingServiceDiscovery    *OrgApacheCamelModelCloudCachingServiceCallServiceDiscoveryConfiguration    `json:"cachingServiceDiscovery,omitempty"`
	ConsulServiceDiscovery     *OrgApacheCamelModelCloudConsulServiceCallServiceDiscoveryConfiguration     `json:"consulServiceDiscovery,omitempty"`
	DnsServiceDiscovery        *OrgApacheCamelModelCloudDnsServiceCallServiceDiscoveryConfiguration        `json:"dnsServiceDiscovery,omitempty"`
	Id                         string                                                                      `json:"id,omitempty"`
	KubernetesServiceDiscovery *OrgApacheCamelModelCloudKubernetesServiceCallServiceDiscoveryConfiguration `json:"kubernetesServiceDiscovery,omitempty"`
	Properties                 []*OrgApacheCamelModelPropertyDefinition                                    `json:"properties,omitempty"`
	StaticServiceDiscovery     *OrgApacheCamelModelCloudStaticServiceCallServiceDiscoveryConfiguration     `json:"staticServiceDiscovery,omitempty"`
}

// OrgApacheCamelModelCloudCombinedServiceCallServiceFilterConfiguration
type OrgApacheCamelModelCloudCombinedServiceCallServiceFilterConfiguration struct {
	BlacklistServiceFilter   *OrgApacheCamelModelCloudBlacklistServiceCallServiceFilterConfiguration   `json:"blacklistServiceFilter,omitempty"`
	CustomServiceFilter      *OrgApacheCamelModelCloudCustomServiceCallServiceFilterConfiguration      `json:"customServiceFilter,omitempty"`
	HealthyServiceFilter     *OrgApacheCamelModelCloudHealthyServiceCallServiceFilterConfiguration     `json:"healthyServiceFilter,omitempty"`
	Id                       string                                                                    `json:"id,omitempty"`
	PassThroughServiceFilter *OrgApacheCamelModelCloudPassThroughServiceCallServiceFilterConfiguration `json:"passThroughServiceFilter,omitempty"`
	Properties               []*OrgApacheCamelModelPropertyDefinition                                  `json:"properties,omitempty"`
}

// OrgApacheCamelModelCloudConsulServiceCallServiceDiscoveryConfiguration
type OrgApacheCamelModelCloudConsulServiceCallServiceDiscoveryConfiguration struct {
	AclToken             string                                   `json:"aclToken,omitempty"`
	BlockSeconds         float64                                  `json:"blockSeconds,omitempty"`
	ConnectTimeoutMillis float64                                  `json:"connectTimeoutMillis,omitempty"`
	Datacenter           string                                   `json:"datacenter,omitempty"`
	Id                   string                                   `json:"id,omitempty"`
	Password             string                                   `json:"password,omitempty"`
	Properties           []*OrgApacheCamelModelPropertyDefinition `json:"properties,omitempty"`
	ReadTimeoutMillis    float64                                  `json:"readTimeoutMillis,omitempty"`
	Url                  string                                   `json:"url,omitempty"`
	UserName             string                                   `json:"userName,omitempty"`
	WriteTimeoutMillis   float64                                  `json:"writeTimeoutMillis,omitempty"`
}

// OrgApacheCamelModelCloudCustomServiceCallServiceFilterConfiguration
type OrgApacheCamelModelCloudCustomServiceCallServiceFilterConfiguration struct {
	Id         string                                   `json:"id,omitempty"`
	Properties []*OrgApacheCamelModelPropertyDefinition `json:"properties,omitempty"`
	Ref        string                                   `json:"ref,omitempty"`
}

// OrgApacheCamelModelCloudDefaultServiceCallServiceLoadBalancerConfiguration
type OrgApacheCamelModelCloudDefaultServiceCallServiceLoadBalancerConfiguration struct {
	Id         string                                   `json:"id,omitempty"`
	Properties []*OrgApacheCamelModelPropertyDefinition `json:"properties,omitempty"`
}

// OrgApacheCamelModelCloudDnsServiceCallServiceDiscoveryConfiguration
type OrgApacheCamelModelCloudDnsServiceCallServiceDiscoveryConfiguration struct {
	Domain     string                                   `json:"domain,omitempty"`
	Id         string                                   `json:"id,omitempty"`
	Properties []*OrgApacheCamelModelPropertyDefinition `json:"properties,omitempty"`
	Proto      string                                   `json:"proto,omitempty"`
}

// OrgApacheCamelModelCloudHealthyServiceCallServiceFilterConfiguration
type OrgApacheCamelModelCloudHealthyServiceCallServiceFilterConfiguration struct {
	Id         string                                   `json:"id,omitempty"`
	Properties []*OrgApacheCamelModelPropertyDefinition `json:"properties,omitempty"`
}

// OrgApacheCamelModelCloudKubernetesServiceCallServiceDiscoveryConfiguration
type OrgApacheCamelModelCloudKubernetesServiceCallServiceDiscoveryConfiguration struct {
	ApiVersion          string                                   `json:"apiVersion,omitempty"`
	CaCertData          string                                   `json:"caCertData,omitempty"`
	CaCertFile          string                                   `json:"caCertFile,omitempty"`
	ClientCertData      string                                   `json:"clientCertData,omitempty"`
	ClientCertFile      string                                   `json:"clientCertFile,omitempty"`
	ClientKeyAlgo       string                                   `json:"clientKeyAlgo,omitempty"`
	ClientKeyData       string                                   `json:"clientKeyData,omitempty"`
	ClientKeyFile       string                                   `json:"clientKeyFile,omitempty"`
	ClientKeyPassphrase string                                   `json:"clientKeyPassphrase,omitempty"`
	DnsDomain           string                                   `json:"dnsDomain,omitempty"`
	Id                  string                                   `json:"id,omitempty"`
	Lookup              string                                   `json:"lookup,omitempty"`
	MasterUrl           string                                   `json:"masterUrl,omitempty"`
	Namespace           string                                   `json:"namespace,omitempty"`
	OauthToken          string                                   `json:"oauthToken,omitempty"`
	Password            string                                   `json:"password,omitempty"`
	PortName            string                                   `json:"portName,omitempty"`
	PortProtocol        string                                   `json:"portProtocol,omitempty"`
	Properties          []*OrgApacheCamelModelPropertyDefinition `json:"properties,omitempty"`
	TrustCerts          bool                                     `json:"trustCerts,omitempty"`
	Username            string                                   `json:"username,omitempty"`
}

// OrgApacheCamelModelCloudPassThroughServiceCallServiceFilterConfiguration
type OrgApacheCamelModelCloudPassThroughServiceCallServiceFilterConfiguration struct {
	Id         string                                   `json:"id,omitempty"`
	Properties []*OrgApacheCamelModelPropertyDefinition `json:"properties,omitempty"`
}

// OrgApacheCamelModelCloudServiceCallConfigurationDefinition
type OrgApacheCamelModelCloudServiceCallConfigurationDefinition struct {
	BlacklistServiceFilter     *OrgApacheCamelModelCloudBlacklistServiceCallServiceFilterConfiguration     `json:"blacklistServiceFilter,omitempty"`
	CachingServiceDiscovery    *OrgApacheCamelModelCloudCachingServiceCallServiceDiscoveryConfiguration    `json:"cachingServiceDiscovery,omitempty"`
	CombinedServiceDiscovery   *OrgApacheCamelModelCloudCombinedServiceCallServiceDiscoveryConfiguration   `json:"combinedServiceDiscovery,omitempty"`
	CombinedServiceFilter      *OrgApacheCamelModelCloudCombinedServiceCallServiceFilterConfiguration      `json:"combinedServiceFilter,omitempty"`
	Component                  string                                                                      `json:"component,omitempty"`
	ConsulServiceDiscovery     *OrgApacheCamelModelCloudConsulServiceCallServiceDiscoveryConfiguration     `json:"consulServiceDiscovery,omitempty"`
	CustomServiceFilter        *OrgApacheCamelModelCloudCustomServiceCallServiceFilterConfiguration        `json:"customServiceFilter,omitempty"`
	DefaultLoadBalancer        *OrgApacheCamelModelCloudDefaultServiceCallServiceLoadBalancerConfiguration `json:"defaultLoadBalancer,omitempty"`
	DnsServiceDiscovery        *OrgApacheCamelModelCloudDnsServiceCallServiceDiscoveryConfiguration        `json:"dnsServiceDiscovery,omitempty"`
	Expression                 *OrgApacheCamelModelCloudServiceCallExpressionConfiguration                 `json:"expression,omitempty"`
	ExpressionRef              string                                                                      `json:"expressionRef,omitempty"`
	HealthyServiceFilter       *OrgApacheCamelModelCloudHealthyServiceCallServiceFilterConfiguration       `json:"healthyServiceFilter,omitempty"`
	Id                         string                                                                      `json:"id,omitempty"`
	KubernetesServiceDiscovery *OrgApacheCamelModelCloudKubernetesServiceCallServiceDiscoveryConfiguration `json:"kubernetesServiceDiscovery,omitempty"`
	LoadBalancerRef            string                                                                      `json:"loadBalancerRef,omitempty"`
	PassThroughServiceFilter   *OrgApacheCamelModelCloudPassThroughServiceCallServiceFilterConfiguration   `json:"passThroughServiceFilter,omitempty"`
	Pattern                    string                                                                      `json:"pattern,omitempty"`
	ServiceChooserRef          string                                                                      `json:"serviceChooserRef,omitempty"`
	ServiceDiscoveryRef        string                                                                      `json:"serviceDiscoveryRef,omitempty"`
	ServiceFilterRef           string                                                                      `json:"serviceFilterRef,omitempty"`
	StaticServiceDiscovery     *OrgApacheCamelModelCloudStaticServiceCallServiceDiscoveryConfiguration     `json:"staticServiceDiscovery,omitempty"`
	Uri                        string                                                                      `json:"uri,omitempty"`
	ZookeeperServiceDiscovery  *OrgApacheCamelModelCloudZooKeeperServiceCallServiceDiscoveryConfiguration  `json:"zookeeperServiceDiscovery,omitempty"`
}

// OrgApacheCamelModelCloudServiceCallDefinition
type OrgApacheCamelModelCloudServiceCallDefinition struct {
	BlacklistServiceFilter     *OrgApacheCamelModelCloudBlacklistServiceCallServiceFilterConfiguration     `json:"blacklistServiceFilter,omitempty"`
	CachingServiceDiscovery    *OrgApacheCamelModelCloudCachingServiceCallServiceDiscoveryConfiguration    `json:"cachingServiceDiscovery,omitempty"`
	CombinedServiceDiscovery   *OrgApacheCamelModelCloudCombinedServiceCallServiceDiscoveryConfiguration   `json:"combinedServiceDiscovery,omitempty"`
	CombinedServiceFilter      *OrgApacheCamelModelCloudCombinedServiceCallServiceFilterConfiguration      `json:"combinedServiceFilter,omitempty"`
	Component                  string                                                                      `json:"component,omitempty"`
	ConfigurationRef           string                                                                      `json:"configurationRef,omitempty"`
	ConsulServiceDiscovery     *OrgApacheCamelModelCloudConsulServiceCallServiceDiscoveryConfiguration     `json:"consulServiceDiscovery,omitempty"`
	CustomServiceFilter        *OrgApacheCamelModelCloudCustomServiceCallServiceFilterConfiguration        `json:"customServiceFilter,omitempty"`
	DefaultLoadBalancer        *OrgApacheCamelModelCloudDefaultServiceCallServiceLoadBalancerConfiguration `json:"defaultLoadBalancer,omitempty"`
	Description                string                                                                      `json:"description,omitempty"`
	DnsServiceDiscovery        *OrgApacheCamelModelCloudDnsServiceCallServiceDiscoveryConfiguration        `json:"dnsServiceDiscovery,omitempty"`
	Expression                 *OrgApacheCamelModelCloudServiceCallExpressionConfiguration                 `json:"expression,omitempty"`
	ExpressionRef              string                                                                      `json:"expressionRef,omitempty"`
	HealthyServiceFilter       *OrgApacheCamelModelCloudHealthyServiceCallServiceFilterConfiguration       `json:"healthyServiceFilter,omitempty"`
	Id                         string                                                                      `json:"id,omitempty"`
	InheritErrorHandler        bool                                                                        `json:"inheritErrorHandler,omitempty"`
	KubernetesServiceDiscovery *OrgApacheCamelModelCloudKubernetesServiceCallServiceDiscoveryConfiguration `json:"kubernetesServiceDiscovery,omitempty"`
	LoadBalancerRef            string                                                                      `json:"loadBalancerRef,omitempty"`
	Name                       string                                                                      `json:"name"`
	PassThroughServiceFilter   *OrgApacheCamelModelCloudPassThroughServiceCallServiceFilterConfiguration   `json:"passThroughServiceFilter,omitempty"`
	Pattern                    string                                                                      `json:"pattern,omitempty"`
	ServiceChooserRef          string                                                                      `json:"serviceChooserRef,omitempty"`
	ServiceDiscoveryRef        string                                                                      `json:"serviceDiscoveryRef,omitempty"`
	ServiceFilterRef           string                                                                      `json:"serviceFilterRef,omitempty"`
	StaticServiceDiscovery     *OrgApacheCamelModelCloudStaticServiceCallServiceDiscoveryConfiguration     `json:"staticServiceDiscovery,omitempty"`
	Uri                        string                                                                      `json:"uri,omitempty"`
	ZookeeperServiceDiscovery  *OrgApacheCamelModelCloudZooKeeperServiceCallServiceDiscoveryConfiguration  `json:"zookeeperServiceDiscovery,omitempty"`
}

// OrgApacheCamelModelCloudServiceCallExpressionConfiguration
type OrgApacheCamelModelCloudServiceCallExpressionConfiguration struct {
	ExpressionType *OrgApacheCamelModelLanguageExpressionDefinition `json:"expressionType,omitempty"`
	HostHeader     string                                           `json:"hostHeader,omitempty"`
	Id             string                                           `json:"id,omitempty"`
	PortHeader     string                                           `json:"portHeader,omitempty"`
	Properties     []*OrgApacheCamelModelPropertyDefinition         `json:"properties,omitempty"`
}

// OrgApacheCamelModelCloudServiceCallServiceChooserConfiguration
type OrgApacheCamelModelCloudServiceCallServiceChooserConfiguration struct {
	Id         string                                   `json:"id,omitempty"`
	Properties []*OrgApacheCamelModelPropertyDefinition `json:"properties,omitempty"`
}

// OrgApacheCamelModelCloudServiceCallServiceDiscoveryConfiguration
type OrgApacheCamelModelCloudServiceCallServiceDiscoveryConfiguration struct {
	Id         string                                   `json:"id,omitempty"`
	Properties []*OrgApacheCamelModelPropertyDefinition `json:"properties,omitempty"`
}

// OrgApacheCamelModelCloudServiceCallServiceFilterConfiguration
type OrgApacheCamelModelCloudServiceCallServiceFilterConfiguration struct {
	Id         string                                   `json:"id,omitempty"`
	Properties []*OrgApacheCamelModelPropertyDefinition `json:"properties,omitempty"`
}

// OrgApacheCamelModelCloudServiceCallServiceLoadBalancerConfiguration
type OrgApacheCamelModelCloudServiceCallServiceLoadBalancerConfiguration struct {
	Id         string                                   `json:"id,omitempty"`
	Properties []*OrgApacheCamelModelPropertyDefinition `json:"properties,omitempty"`
}

// OrgApacheCamelModelCloudStaticServiceCallServiceDiscoveryConfiguration
type OrgApacheCamelModelCloudStaticServiceCallServiceDiscoveryConfiguration struct {
	Id         string                                   `json:"id,omitempty"`
	Properties []*OrgApacheCamelModelPropertyDefinition `json:"properties,omitempty"`
	Servers    []string                                 `json:"servers,omitempty"`
}

// OrgApacheCamelModelCloudZooKeeperServiceCallServiceDiscoveryConfiguration
type OrgApacheCamelModelCloudZooKeeperServiceCallServiceDiscoveryConfiguration struct {
	BasePath               string                                   `json:"basePath"`
	ConnectionTimeout      string                                   `json:"connectionTimeout,omitempty"`
	Id                     string                                   `json:"id,omitempty"`
	Namespace              string                                   `json:"namespace,omitempty"`
	Nodes                  string                                   `json:"nodes"`
	Properties             []*OrgApacheCamelModelPropertyDefinition `json:"properties,omitempty"`
	ReconnectBaseSleepTime string                                   `json:"reconnectBaseSleepTime,omitempty"`
	ReconnectMaxRetries    string                                   `json:"reconnectMaxRetries,omitempty"`
	ReconnectMaxSleepTime  string                                   `json:"reconnectMaxSleepTime,omitempty"`
	SessionTimeout         string                                   `json:"sessionTimeout,omitempty"`
}

// OrgApacheCamelModelConfigBatchResequencerConfig
type OrgApacheCamelModelConfigBatchResequencerConfig struct {
	AllowDuplicates        bool    `json:"allowDuplicates,omitempty"`
	BatchSize              float64 `json:"batchSize,omitempty"`
	BatchTimeout           string  `json:"batchTimeout,omitempty"`
	IgnoreInvalidExchanges bool    `json:"ignoreInvalidExchanges,omitempty"`
	Reverse                bool    `json:"reverse,omitempty"`
}

// OrgApacheCamelModelConfigStreamResequencerConfig
type OrgApacheCamelModelConfigStreamResequencerConfig struct {
	Capacity                float64 `json:"capacity,omitempty"`
	Comparator              string  `json:"comparator,omitempty"`
	DeliveryAttemptInterval string  `json:"deliveryAttemptInterval,omitempty"`
	IgnoreInvalidExchanges  bool    `json:"ignoreInvalidExchanges,omitempty"`
	RejectOld               bool    `json:"rejectOld,omitempty"`
	Timeout                 string  `json:"timeout,omitempty"`
}

// OrgApacheCamelModelContextScanDefinition
type OrgApacheCamelModelContextScanDefinition struct {
	Excludes             []string `json:"excludes,omitempty"`
	IncludeNonSingletons bool     `json:"includeNonSingletons,omitempty"`
	Includes             []string `json:"includes,omitempty"`
}

// OrgApacheCamelModelConvertBodyDefinition
type OrgApacheCamelModelConvertBodyDefinition struct {
	Charset             string `json:"charset,omitempty"`
	Description         string `json:"description,omitempty"`
	Id                  string `json:"id,omitempty"`
	InheritErrorHandler bool   `json:"inheritErrorHandler,omitempty"`
	Mandatory           bool   `json:"mandatory,omitempty"`
	Type                string `json:"type"`
}

// OrgApacheCamelModelDataFormatDefinition
type OrgApacheCamelModelDataFormatDefinition struct {
	Id string `json:"id,omitempty"`
}

// OrgApacheCamelModelDataformatASN1DataFormat
type OrgApacheCamelModelDataformatASN1DataFormat struct {
	Id            string `json:"id,omitempty"`
	UnmarshalType string `json:"unmarshalType,omitempty"`
	UsingIterator bool   `json:"usingIterator,omitempty"`
}

// OrgApacheCamelModelDataformatAny23DataFormat
type OrgApacheCamelModelDataformatAny23DataFormat struct {
	BaseUri       string                                   `json:"baseUri,omitempty"`
	Configuration []*OrgApacheCamelModelPropertyDefinition `json:"configuration,omitempty"`
	Extractors    []string                                 `json:"extractors,omitempty"`
	Id            string                                   `json:"id,omitempty"`
	OutputFormat  string                                   `json:"outputFormat,omitempty"`
}

// OrgApacheCamelModelDataformatAvroDataFormat
type OrgApacheCamelModelDataformatAvroDataFormat struct {
	AllowJmsType               bool   `json:"allowJmsType,omitempty"`
	AllowUnmarshallType        bool   `json:"allowUnmarshallType,omitempty"`
	AutoDiscoverObjectMapper   bool   `json:"autoDiscoverObjectMapper,omitempty"`
	AutoDiscoverSchemaResolver bool   `json:"autoDiscoverSchemaResolver,omitempty"`
	CollectionType             string `json:"collectionType,omitempty"`
	ContentTypeHeader          bool   `json:"contentTypeHeader,omitempty"`
	DisableFeatures            string `json:"disableFeatures,omitempty"`
	EnableFeatures             string `json:"enableFeatures,omitempty"`
	Id                         string `json:"id,omitempty"`
	Include                    string `json:"include,omitempty"`
	InstanceClassName          string `json:"instanceClassName,omitempty"`
	JsonView                   string `json:"jsonView,omitempty"`
	Library                    string `json:"library,omitempty"`
	ModuleClassNames           string `json:"moduleClassNames,omitempty"`
	ModuleRefs                 string `json:"moduleRefs,omitempty"`
	ObjectMapper               string `json:"objectMapper,omitempty"`
	SchemaResolver             string `json:"schemaResolver,omitempty"`
	Timezone                   string `json:"timezone,omitempty"`
	UnmarshalType              string `json:"unmarshalType,omitempty"`
	UseDefaultObjectMapper     bool   `json:"useDefaultObjectMapper,omitempty"`
	UseList                    bool   `json:"useList,omitempty"`
}

// OrgApacheCamelModelDataformatBarcodeDataFormat
type OrgApacheCamelModelDataformatBarcodeDataFormat struct {
	BarcodeFormat string  `json:"barcodeFormat,omitempty"`
	Height        float64 `json:"height,omitempty"`
	Id            string  `json:"id,omitempty"`
	ImageType     string  `json:"imageType,omitempty"`
	Width         float64 `json:"width,omitempty"`
}

// OrgApacheCamelModelDataformatBase64DataFormat
type OrgApacheCamelModelDataformatBase64DataFormat struct {
	Id            string  `json:"id,omitempty"`
	LineLength    float64 `json:"lineLength,omitempty"`
	LineSeparator string  `json:"lineSeparator,omitempty"`
	UrlSafe       bool    `json:"urlSafe,omitempty"`
}

// OrgApacheCamelModelDataformatBindyDataFormat
type OrgApacheCamelModelDataformatBindyDataFormat struct {
	AllowEmptyStream     bool   `json:"allowEmptyStream,omitempty"`
	ClassType            string `json:"classType,omitempty"`
	Id                   string `json:"id,omitempty"`
	Locale               string `json:"locale,omitempty"`
	Type                 string `json:"type"`
	UnwrapSingleInstance bool   `json:"unwrapSingleInstance,omitempty"`
}

// OrgApacheCamelModelDataformatCBORDataFormat
type OrgApacheCamelModelDataformatCBORDataFormat struct {
	AllowJmsType           bool   `json:"allowJmsType,omitempty"`
	AllowUnmarshallType    bool   `json:"allowUnmarshallType,omitempty"`
	CollectionType         string `json:"collectionType,omitempty"`
	DisableFeatures        string `json:"disableFeatures,omitempty"`
	EnableFeatures         string `json:"enableFeatures,omitempty"`
	Id                     string `json:"id,omitempty"`
	ObjectMapper           string `json:"objectMapper,omitempty"`
	PrettyPrint            bool   `json:"prettyPrint,omitempty"`
	UnmarshalType          string `json:"unmarshalType,omitempty"`
	UseDefaultObjectMapper bool   `json:"useDefaultObjectMapper,omitempty"`
	UseList                bool   `json:"useList,omitempty"`
}

// OrgApacheCamelModelDataformatCryptoDataFormat
type OrgApacheCamelModelDataformatCryptoDataFormat struct {
	Algorithm             string  `json:"algorithm,omitempty"`
	AlgorithmParameterRef string  `json:"algorithmParameterRef,omitempty"`
	BufferSize            float64 `json:"bufferSize,omitempty"`
	CryptoProvider        string  `json:"cryptoProvider,omitempty"`
	Id                    string  `json:"id,omitempty"`
	InitVectorRef         string  `json:"initVectorRef,omitempty"`
	Inline                bool    `json:"inline,omitempty"`
	KeyRef                string  `json:"keyRef,omitempty"`
	MacAlgorithm          string  `json:"macAlgorithm,omitempty"`
	ShouldAppendHmac      bool    `json:"shouldAppendHmac,omitempty"`
}

// OrgApacheCamelModelDataformatCsvDataFormat
type OrgApacheCamelModelDataformatCsvDataFormat struct {
	AllowMissingColumnNames bool     `json:"allowMissingColumnNames,omitempty"`
	CaptureHeaderRecord     bool     `json:"captureHeaderRecord,omitempty"`
	CommentMarker           string   `json:"commentMarker,omitempty"`
	CommentMarkerDisabled   bool     `json:"commentMarkerDisabled,omitempty"`
	Delimiter               string   `json:"delimiter,omitempty"`
	Escape                  string   `json:"escape,omitempty"`
	EscapeDisabled          bool     `json:"escapeDisabled,omitempty"`
	FormatName              string   `json:"formatName,omitempty"`
	FormatRef               string   `json:"formatRef,omitempty"`
	Header                  []string `json:"header,omitempty"`
	HeaderDisabled          bool     `json:"headerDisabled,omitempty"`
	Id                      string   `json:"id,omitempty"`
	IgnoreEmptyLines        bool     `json:"ignoreEmptyLines,omitempty"`
	IgnoreHeaderCase        bool     `json:"ignoreHeaderCase,omitempty"`
	IgnoreSurroundingSpaces bool     `json:"ignoreSurroundingSpaces,omitempty"`
	LazyLoad                bool     `json:"lazyLoad,omitempty"`
	MarshallerFactoryRef    string   `json:"marshallerFactoryRef,omitempty"`
	NullString              string   `json:"nullString,omitempty"`
	NullStringDisabled      bool     `json:"nullStringDisabled,omitempty"`
	Quote                   string   `json:"quote,omitempty"`
	QuoteDisabled           bool     `json:"quoteDisabled,omitempty"`
	QuoteMode               string   `json:"quoteMode,omitempty"`
	RecordConverterRef      string   `json:"recordConverterRef,omitempty"`
	RecordSeparator         string   `json:"recordSeparator,omitempty"`
	RecordSeparatorDisabled string   `json:"recordSeparatorDisabled,omitempty"`
	SkipHeaderRecord        bool     `json:"skipHeaderRecord,omitempty"`
	TrailingDelimiter       bool     `json:"trailingDelimiter,omitempty"`
	Trim                    bool     `json:"trim,omitempty"`
	UseMaps                 bool     `json:"useMaps,omitempty"`
	UseOrderedMaps          bool     `json:"useOrderedMaps,omitempty"`
}

// OrgApacheCamelModelDataformatCustomDataFormat
type OrgApacheCamelModelDataformatCustomDataFormat struct {
	Id  string `json:"id,omitempty"`
	Ref string `json:"ref"`
}

// OrgApacheCamelModelDataformatDataFormatsDefinition
type OrgApacheCamelModelDataformatDataFormatsDefinition struct {
	Any23          *OrgApacheCamelModelDataformatAny23DataFormat          `json:"any23,omitempty"`
	Asn1           *OrgApacheCamelModelDataformatASN1DataFormat           `json:"asn1,omitempty"`
	Avro           *OrgApacheCamelModelDataformatAvroDataFormat           `json:"avro,omitempty"`
	Barcode        *OrgApacheCamelModelDataformatBarcodeDataFormat        `json:"barcode,omitempty"`
	Base64         *OrgApacheCamelModelDataformatBase64DataFormat         `json:"base64,omitempty"`
	Bindy          *OrgApacheCamelModelDataformatBindyDataFormat          `json:"bindy,omitempty"`
	Cbor           *OrgApacheCamelModelDataformatCBORDataFormat           `json:"cbor,omitempty"`
	Crypto         *OrgApacheCamelModelDataformatCryptoDataFormat         `json:"crypto,omitempty"`
	Csv            *OrgApacheCamelModelDataformatCsvDataFormat            `json:"csv,omitempty"`
	Custom         *OrgApacheCamelModelDataformatCustomDataFormat         `json:"custom,omitempty"`
	FhirJson       *OrgApacheCamelModelDataformatFhirJsonDataFormat       `json:"fhirJson,omitempty"`
	FhirXml        *OrgApacheCamelModelDataformatFhirXmlDataFormat        `json:"fhirXml,omitempty"`
	Flatpack       *OrgApacheCamelModelDataformatFlatpackDataFormat       `json:"flatpack,omitempty"`
	Grok           *OrgApacheCamelModelDataformatGrokDataFormat           `json:"grok,omitempty"`
	GzipDeflater   *OrgApacheCamelModelDataformatGzipDeflaterDataFormat   `json:"gzipDeflater,omitempty"`
	Hl7            *OrgApacheCamelModelDataformatHL7DataFormat            `json:"hl7,omitempty"`
	Ical           *OrgApacheCamelModelDataformatIcalDataFormat           `json:"ical,omitempty"`
	JacksonXml     *OrgApacheCamelModelDataformatJacksonXMLDataFormat     `json:"jacksonXml,omitempty"`
	Jaxb           *OrgApacheCamelModelDataformatJaxbDataFormat           `json:"jaxb,omitempty"`
	Json           *OrgApacheCamelModelDataformatJsonDataFormat           `json:"json,omitempty"`
	JsonApi        *OrgApacheCamelModelDataformatJsonApiDataFormat        `json:"jsonApi,omitempty"`
	Lzf            *OrgApacheCamelModelDataformatLZFDataFormat            `json:"lzf,omitempty"`
	MimeMultipart  *OrgApacheCamelModelDataformatMimeMultipartDataFormat  `json:"mimeMultipart,omitempty"`
	Pgp            *OrgApacheCamelModelDataformatPGPDataFormat            `json:"pgp,omitempty"`
	Protobuf       *OrgApacheCamelModelDataformatProtobufDataFormat       `json:"protobuf,omitempty"`
	Rss            *OrgApacheCamelModelDataformatRssDataFormat            `json:"rss,omitempty"`
	Soap           *OrgApacheCamelModelDataformatSoapDataFormat           `json:"soap,omitempty"`
	Syslog         *OrgApacheCamelModelDataformatSyslogDataFormat         `json:"syslog,omitempty"`
	TarFile        *OrgApacheCamelModelDataformatTarFileDataFormat        `json:"tarFile,omitempty"`
	Thrift         *OrgApacheCamelModelDataformatThriftDataFormat         `json:"thrift,omitempty"`
	TidyMarkup     *OrgApacheCamelModelDataformatTidyMarkupDataFormat     `json:"tidyMarkup,omitempty"`
	UnivocityCsv   *OrgApacheCamelModelDataformatUniVocityCsvDataFormat   `json:"univocityCsv,omitempty"`
	UnivocityFixed *OrgApacheCamelModelDataformatUniVocityFixedDataFormat `json:"univocityFixed,omitempty"`
	UnivocityTsv   *OrgApacheCamelModelDataformatUniVocityTsvDataFormat   `json:"univocityTsv,omitempty"`
	XmlSecurity    *OrgApacheCamelModelDataformatXMLSecurityDataFormat    `json:"xmlSecurity,omitempty"`
	Xstream        *OrgApacheCamelModelDataformatXStreamDataFormat        `json:"xstream,omitempty"`
	Yaml           *OrgApacheCamelModelDataformatYAMLDataFormat           `json:"yaml,omitempty"`
	ZipDeflater    *OrgApacheCamelModelDataformatZipDeflaterDataFormat    `json:"zipDeflater,omitempty"`
	ZipFile        *OrgApacheCamelModelDataformatZipFileDataFormat        `json:"zipFile,omitempty"`
}

// OrgApacheCamelModelDataformatFhirJsonDataFormat
type OrgApacheCamelModelDataformatFhirJsonDataFormat struct {
	ContentTypeHeader                         bool     `json:"contentTypeHeader,omitempty"`
	DontEncodeElements                        []string `json:"dontEncodeElements,omitempty"`
	DontStripVersionsFromReferencesAtPaths    []string `json:"dontStripVersionsFromReferencesAtPaths,omitempty"`
	EncodeElements                            []string `json:"encodeElements,omitempty"`
	EncodeElementsAppliesToChildResourcesOnly bool     `json:"encodeElementsAppliesToChildResourcesOnly,omitempty"`
	FhirVersion                               string   `json:"fhirVersion,omitempty"`
	Id                                        string   `json:"id,omitempty"`
	OmitResourceId                            bool     `json:"omitResourceId,omitempty"`
	OverrideResourceIdWithBundleEntryFullUrl  bool     `json:"overrideResourceIdWithBundleEntryFullUrl,omitempty"`
	PrettyPrint                               bool     `json:"prettyPrint,omitempty"`
	ServerBaseUrl                             string   `json:"serverBaseUrl,omitempty"`
	StripVersionsFromReferences               bool     `json:"stripVersionsFromReferences,omitempty"`
	SummaryMode                               bool     `json:"summaryMode,omitempty"`
	SuppressNarratives                        bool     `json:"suppressNarratives,omitempty"`
}

// OrgApacheCamelModelDataformatFhirXmlDataFormat
type OrgApacheCamelModelDataformatFhirXmlDataFormat struct {
	ContentTypeHeader                         bool     `json:"contentTypeHeader,omitempty"`
	DontEncodeElements                        []string `json:"dontEncodeElements,omitempty"`
	DontStripVersionsFromReferencesAtPaths    []string `json:"dontStripVersionsFromReferencesAtPaths,omitempty"`
	EncodeElements                            []string `json:"encodeElements,omitempty"`
	EncodeElementsAppliesToChildResourcesOnly bool     `json:"encodeElementsAppliesToChildResourcesOnly,omitempty"`
	FhirVersion                               string   `json:"fhirVersion,omitempty"`
	Id                                        string   `json:"id,omitempty"`
	OmitResourceId                            bool     `json:"omitResourceId,omitempty"`
	OverrideResourceIdWithBundleEntryFullUrl  bool     `json:"overrideResourceIdWithBundleEntryFullUrl,omitempty"`
	PrettyPrint                               bool     `json:"prettyPrint,omitempty"`
	ServerBaseUrl                             string   `json:"serverBaseUrl,omitempty"`
	StripVersionsFromReferences               bool     `json:"stripVersionsFromReferences,omitempty"`
	SummaryMode                               bool     `json:"summaryMode,omitempty"`
	SuppressNarratives                        bool     `json:"suppressNarratives,omitempty"`
}

// OrgApacheCamelModelDataformatFlatpackDataFormat
type OrgApacheCamelModelDataformatFlatpackDataFormat struct {
	AllowShortLines    bool   `json:"allowShortLines,omitempty"`
	Definition         string `json:"definition,omitempty"`
	Delimiter          string `json:"delimiter,omitempty"`
	Fixed              bool   `json:"fixed,omitempty"`
	Id                 string `json:"id,omitempty"`
	IgnoreExtraColumns bool   `json:"ignoreExtraColumns,omitempty"`
	IgnoreFirstRecord  bool   `json:"ignoreFirstRecord,omitempty"`
	ParserFactoryRef   string `json:"parserFactoryRef,omitempty"`
	TextQualifier      string `json:"textQualifier,omitempty"`
}

// OrgApacheCamelModelDataformatGrokDataFormat
type OrgApacheCamelModelDataformatGrokDataFormat struct {
	AllowMultipleMatchesPerLine bool   `json:"allowMultipleMatchesPerLine,omitempty"`
	Flattened                   bool   `json:"flattened,omitempty"`
	Id                          string `json:"id,omitempty"`
	NamedOnly                   bool   `json:"namedOnly,omitempty"`
	Pattern                     string `json:"pattern"`
}

// OrgApacheCamelModelDataformatGzipDeflaterDataFormat
type OrgApacheCamelModelDataformatGzipDeflaterDataFormat struct {
	Id string `json:"id,omitempty"`
}

// OrgApacheCamelModelDataformatHL7DataFormat
type OrgApacheCamelModelDataformatHL7DataFormat struct {
	Id       string `json:"id,omitempty"`
	Validate bool   `json:"validate,omitempty"`
}

// OrgApacheCamelModelDataformatIcalDataFormat
type OrgApacheCamelModelDataformatIcalDataFormat struct {
	Id         string `json:"id,omitempty"`
	Validating bool   `json:"validating,omitempty"`
}

// OrgApacheCamelModelDataformatJacksonXMLDataFormat
type OrgApacheCamelModelDataformatJacksonXMLDataFormat struct {
	AllowJmsType               bool   `json:"allowJmsType,omitempty"`
	AllowUnmarshallType        bool   `json:"allowUnmarshallType,omitempty"`
	CollectionType             string `json:"collectionType,omitempty"`
	ContentTypeHeader          bool   `json:"contentTypeHeader,omitempty"`
	DisableFeatures            string `json:"disableFeatures,omitempty"`
	EnableFeatures             string `json:"enableFeatures,omitempty"`
	EnableJaxbAnnotationModule bool   `json:"enableJaxbAnnotationModule,omitempty"`
	Id                         string `json:"id,omitempty"`
	Include                    string `json:"include,omitempty"`
	JsonView                   string `json:"jsonView,omitempty"`
	ModuleClassNames           string `json:"moduleClassNames,omitempty"`
	ModuleRefs                 string `json:"moduleRefs,omitempty"`
	PrettyPrint                bool   `json:"prettyPrint,omitempty"`
	Timezone                   string `json:"timezone,omitempty"`
	UnmarshalType              string `json:"unmarshalType,omitempty"`
	UseList                    bool   `json:"useList,omitempty"`
	XmlMapper                  string `json:"xmlMapper,omitempty"`
}

// OrgApacheCamelModelDataformatJaxbDataFormat
type OrgApacheCamelModelDataformatJaxbDataFormat struct {
	ContentTypeHeader         bool   `json:"contentTypeHeader,omitempty"`
	ContextPath               string `json:"contextPath"`
	ContextPathIsClassName    bool   `json:"contextPathIsClassName,omitempty"`
	Encoding                  string `json:"encoding,omitempty"`
	FilterNonXmlChars         bool   `json:"filterNonXmlChars,omitempty"`
	Fragment                  bool   `json:"fragment,omitempty"`
	Id                        string `json:"id,omitempty"`
	IgnoreJaxbElement         bool   `json:"ignoreJaxbElement,omitempty"`
	JaxbProviderProperties    string `json:"jaxbProviderProperties,omitempty"`
	MustBeJaxbElement         bool   `json:"mustBeJaxbElement,omitempty"`
	NamespacePrefixRef        string `json:"namespacePrefixRef,omitempty"`
	NoNamespaceSchemaLocation string `json:"noNamespaceSchemaLocation,omitempty"`
	ObjectFactory             bool   `json:"objectFactory,omitempty"`
	PartClass                 string `json:"partClass,omitempty"`
	PartNamespace             string `json:"partNamespace,omitempty"`
	PrettyPrint               bool   `json:"prettyPrint,omitempty"`
	Schema                    string `json:"schema,omitempty"`
	SchemaLocation            string `json:"schemaLocation,omitempty"`
	SchemaSeverityLevel       string `json:"schemaSeverityLevel,omitempty"`
	XmlStreamWriterWrapper    string `json:"xmlStreamWriterWrapper,omitempty"`
}

// OrgApacheCamelModelDataformatJsonApiDataFormat
type OrgApacheCamelModelDataformatJsonApiDataFormat struct {
	Id             string `json:"id,omitempty"`
	MainFormatType string `json:"mainFormatType,omitempty"`
}

// OrgApacheCamelModelDataformatJsonDataFormat
type OrgApacheCamelModelDataformatJsonDataFormat struct {
	AllowJmsType               bool   `json:"allowJmsType,omitempty"`
	AllowUnmarshallType        bool   `json:"allowUnmarshallType,omitempty"`
	AutoDiscoverObjectMapper   bool   `json:"autoDiscoverObjectMapper,omitempty"`
	AutoDiscoverSchemaResolver bool   `json:"autoDiscoverSchemaResolver,omitempty"`
	CollectionType             string `json:"collectionType,omitempty"`
	ContentTypeHeader          bool   `json:"contentTypeHeader,omitempty"`
	DisableFeatures            string `json:"disableFeatures,omitempty"`
	DropRootNode               bool   `json:"dropRootNode,omitempty"`
	EnableFeatures             string `json:"enableFeatures,omitempty"`
	Id                         string `json:"id,omitempty"`
	Include                    string `json:"include,omitempty"`
	JsonView                   string `json:"jsonView,omitempty"`
	Library                    string `json:"library,omitempty"`
	ModuleClassNames           string `json:"moduleClassNames,omitempty"`
	ModuleRefs                 string `json:"moduleRefs,omitempty"`
	NamingStrategy             string `json:"namingStrategy,omitempty"`
	ObjectMapper               string `json:"objectMapper,omitempty"`
	Permissions                string `json:"permissions,omitempty"`
	PrettyPrint                bool   `json:"prettyPrint,omitempty"`
	SchemaResolver             string `json:"schemaResolver,omitempty"`
	Timezone                   string `json:"timezone,omitempty"`
	UnmarshalType              string `json:"unmarshalType,omitempty"`
	UseDefaultObjectMapper     bool   `json:"useDefaultObjectMapper,omitempty"`
	UseList                    bool   `json:"useList,omitempty"`
}

// OrgApacheCamelModelDataformatLZFDataFormat
type OrgApacheCamelModelDataformatLZFDataFormat struct {
	Id                       string `json:"id,omitempty"`
	UsingParallelCompression bool   `json:"usingParallelCompression,omitempty"`
}

// OrgApacheCamelModelDataformatMimeMultipartDataFormat
type OrgApacheCamelModelDataformatMimeMultipartDataFormat struct {
	BinaryContent              bool   `json:"binaryContent,omitempty"`
	HeadersInline              bool   `json:"headersInline,omitempty"`
	Id                         string `json:"id,omitempty"`
	IncludeHeaders             string `json:"includeHeaders,omitempty"`
	MultipartSubType           string `json:"multipartSubType,omitempty"`
	MultipartWithoutAttachment bool   `json:"multipartWithoutAttachment,omitempty"`
}

// OrgApacheCamelModelDataformatPGPDataFormat
type OrgApacheCamelModelDataformatPGPDataFormat struct {
	Algorithm                   float64 `json:"algorithm,omitempty"`
	Armored                     bool    `json:"armored,omitempty"`
	CompressionAlgorithm        float64 `json:"compressionAlgorithm,omitempty"`
	HashAlgorithm               float64 `json:"hashAlgorithm,omitempty"`
	Id                          string  `json:"id,omitempty"`
	Integrity                   bool    `json:"integrity,omitempty"`
	KeyFileName                 string  `json:"keyFileName,omitempty"`
	KeyUserid                   string  `json:"keyUserid,omitempty"`
	Password                    string  `json:"password,omitempty"`
	Provider                    string  `json:"provider,omitempty"`
	SignatureKeyFileName        string  `json:"signatureKeyFileName,omitempty"`
	SignatureKeyRing            string  `json:"signatureKeyRing,omitempty"`
	SignatureKeyUserid          string  `json:"signatureKeyUserid,omitempty"`
	SignaturePassword           string  `json:"signaturePassword,omitempty"`
	SignatureVerificationOption string  `json:"signatureVerificationOption,omitempty"`
}

// OrgApacheCamelModelDataformatProtobufDataFormat
type OrgApacheCamelModelDataformatProtobufDataFormat struct {
	AllowJmsType               bool   `json:"allowJmsType,omitempty"`
	AllowUnmarshallType        bool   `json:"allowUnmarshallType,omitempty"`
	AutoDiscoverObjectMapper   bool   `json:"autoDiscoverObjectMapper,omitempty"`
	AutoDiscoverSchemaResolver bool   `json:"autoDiscoverSchemaResolver,omitempty"`
	CollectionType             string `json:"collectionType,omitempty"`
	ContentTypeFormat          string `json:"contentTypeFormat,omitempty"`
	ContentTypeHeader          bool   `json:"contentTypeHeader,omitempty"`
	DisableFeatures            string `json:"disableFeatures,omitempty"`
	EnableFeatures             string `json:"enableFeatures,omitempty"`
	Id                         string `json:"id,omitempty"`
	Include                    string `json:"include,omitempty"`
	InstanceClass              string `json:"instanceClass,omitempty"`
	JsonView                   string `json:"jsonView,omitempty"`
	Library                    string `json:"library,omitempty"`
	ModuleClassNames           string `json:"moduleClassNames,omitempty"`
	ModuleRefs                 string `json:"moduleRefs,omitempty"`
	ObjectMapper               string `json:"objectMapper,omitempty"`
	SchemaResolver             string `json:"schemaResolver,omitempty"`
	Timezone                   string `json:"timezone,omitempty"`
	UnmarshalType              string `json:"unmarshalType,omitempty"`
	UseDefaultObjectMapper     bool   `json:"useDefaultObjectMapper,omitempty"`
	UseList                    bool   `json:"useList,omitempty"`
}

// OrgApacheCamelModelDataformatRssDataFormat
type OrgApacheCamelModelDataformatRssDataFormat struct {
	Id string `json:"id,omitempty"`
}

// OrgApacheCamelModelDataformatSoapDataFormat
type OrgApacheCamelModelDataformatSoapDataFormat struct {
	ContextPath            string `json:"contextPath"`
	ElementNameStrategyRef string `json:"elementNameStrategyRef,omitempty"`
	Encoding               string `json:"encoding,omitempty"`
	Id                     string `json:"id,omitempty"`
	NamespacePrefixRef     string `json:"namespacePrefixRef,omitempty"`
	Schema                 string `json:"schema,omitempty"`
	Version                string `json:"version,omitempty"`
}

// OrgApacheCamelModelDataformatSyslogDataFormat
type OrgApacheCamelModelDataformatSyslogDataFormat struct {
	Id string `json:"id,omitempty"`
}

// OrgApacheCamelModelDataformatTarFileDataFormat
type OrgApacheCamelModelDataformatTarFileDataFormat struct {
	AllowEmptyDirectory  bool    `json:"allowEmptyDirectory,omitempty"`
	Id                   string  `json:"id,omitempty"`
	MaxDecompressedSize  float64 `json:"maxDecompressedSize,omitempty"`
	PreservePathElements bool    `json:"preservePathElements,omitempty"`
	UsingIterator        bool    `json:"usingIterator,omitempty"`
}

// OrgApacheCamelModelDataformatThriftDataFormat
type OrgApacheCamelModelDataformatThriftDataFormat struct {
	ContentTypeFormat string `json:"contentTypeFormat,omitempty"`
	ContentTypeHeader bool   `json:"contentTypeHeader,omitempty"`
	Id                string `json:"id,omitempty"`
	InstanceClass     string `json:"instanceClass,omitempty"`
}

// OrgApacheCamelModelDataformatTidyMarkupDataFormat
type OrgApacheCamelModelDataformatTidyMarkupDataFormat struct {
	DataObjectType     string `json:"dataObjectType,omitempty"`
	Id                 string `json:"id,omitempty"`
	OmitXmlDeclaration bool   `json:"omitXmlDeclaration,omitempty"`
}

// OrgApacheCamelModelDataformatUniVocityCsvDataFormat
type OrgApacheCamelModelDataformatUniVocityCsvDataFormat struct {
	AsMap                     bool                                            `json:"asMap,omitempty"`
	Comment                   string                                          `json:"comment,omitempty"`
	Delimiter                 string                                          `json:"delimiter,omitempty"`
	EmptyValue                string                                          `json:"emptyValue,omitempty"`
	HeaderExtractionEnabled   bool                                            `json:"headerExtractionEnabled,omitempty"`
	HeadersDisabled           bool                                            `json:"headersDisabled,omitempty"`
	Id                        string                                          `json:"id,omitempty"`
	IgnoreLeadingWhitespaces  bool                                            `json:"ignoreLeadingWhitespaces,omitempty"`
	IgnoreTrailingWhitespaces bool                                            `json:"ignoreTrailingWhitespaces,omitempty"`
	LazyLoad                  bool                                            `json:"lazyLoad,omitempty"`
	LineSeparator             string                                          `json:"lineSeparator,omitempty"`
	NormalizedLineSeparator   string                                          `json:"normalizedLineSeparator,omitempty"`
	NullValue                 string                                          `json:"nullValue,omitempty"`
	NumberOfRecordsToRead     float64                                         `json:"numberOfRecordsToRead,omitempty"`
	Quote                     string                                          `json:"quote,omitempty"`
	QuoteAllFields            bool                                            `json:"quoteAllFields,omitempty"`
	QuoteEscape               string                                          `json:"quoteEscape,omitempty"`
	SkipEmptyLines            bool                                            `json:"skipEmptyLines,omitempty"`
	UnivocityHeader           []*OrgApacheCamelModelDataformatUniVocityHeader `json:"univocityHeader,omitempty"`
}

// OrgApacheCamelModelDataformatUniVocityFixedDataFormat
type OrgApacheCamelModelDataformatUniVocityFixedDataFormat struct {
	AsMap                         bool                                            `json:"asMap,omitempty"`
	Comment                       string                                          `json:"comment,omitempty"`
	EmptyValue                    string                                          `json:"emptyValue,omitempty"`
	HeaderExtractionEnabled       bool                                            `json:"headerExtractionEnabled,omitempty"`
	HeadersDisabled               bool                                            `json:"headersDisabled,omitempty"`
	Id                            string                                          `json:"id,omitempty"`
	IgnoreLeadingWhitespaces      bool                                            `json:"ignoreLeadingWhitespaces,omitempty"`
	IgnoreTrailingWhitespaces     bool                                            `json:"ignoreTrailingWhitespaces,omitempty"`
	LazyLoad                      bool                                            `json:"lazyLoad,omitempty"`
	LineSeparator                 string                                          `json:"lineSeparator,omitempty"`
	NormalizedLineSeparator       string                                          `json:"normalizedLineSeparator,omitempty"`
	NullValue                     string                                          `json:"nullValue,omitempty"`
	NumberOfRecordsToRead         float64                                         `json:"numberOfRecordsToRead,omitempty"`
	Padding                       string                                          `json:"padding,omitempty"`
	RecordEndsOnNewline           bool                                            `json:"recordEndsOnNewline,omitempty"`
	SkipEmptyLines                bool                                            `json:"skipEmptyLines,omitempty"`
	SkipTrailingCharsUntilNewline bool                                            `json:"skipTrailingCharsUntilNewline,omitempty"`
	UnivocityHeader               []*OrgApacheCamelModelDataformatUniVocityHeader `json:"univocityHeader,omitempty"`
}

// OrgApacheCamelModelDataformatUniVocityHeader
type OrgApacheCamelModelDataformatUniVocityHeader struct {
	Length string `json:"length,omitempty"`
	Name   string `json:"name,omitempty"`
}

// OrgApacheCamelModelDataformatUniVocityTsvDataFormat
type OrgApacheCamelModelDataformatUniVocityTsvDataFormat struct {
	AsMap                     bool                                            `json:"asMap,omitempty"`
	Comment                   string                                          `json:"comment,omitempty"`
	EmptyValue                string                                          `json:"emptyValue,omitempty"`
	EscapeChar                string                                          `json:"escapeChar,omitempty"`
	HeaderExtractionEnabled   bool                                            `json:"headerExtractionEnabled,omitempty"`
	HeadersDisabled           bool                                            `json:"headersDisabled,omitempty"`
	Id                        string                                          `json:"id,omitempty"`
	IgnoreLeadingWhitespaces  bool                                            `json:"ignoreLeadingWhitespaces,omitempty"`
	IgnoreTrailingWhitespaces bool                                            `json:"ignoreTrailingWhitespaces,omitempty"`
	LazyLoad                  bool                                            `json:"lazyLoad,omitempty"`
	LineSeparator             string                                          `json:"lineSeparator,omitempty"`
	NormalizedLineSeparator   string                                          `json:"normalizedLineSeparator,omitempty"`
	NullValue                 string                                          `json:"nullValue,omitempty"`
	NumberOfRecordsToRead     float64                                         `json:"numberOfRecordsToRead,omitempty"`
	SkipEmptyLines            bool                                            `json:"skipEmptyLines,omitempty"`
	UnivocityHeader           []*OrgApacheCamelModelDataformatUniVocityHeader `json:"univocityHeader,omitempty"`
}

// OrgApacheCamelModelDataformatXMLSecurityDataFormat
type OrgApacheCamelModelDataformatXMLSecurityDataFormat struct {
	AddKeyValueForEncryptedKey   bool   `json:"addKeyValueForEncryptedKey,omitempty"`
	DigestAlgorithm              string `json:"digestAlgorithm,omitempty"`
	Id                           string `json:"id,omitempty"`
	KeyCipherAlgorithm           string `json:"keyCipherAlgorithm,omitempty"`
	KeyOrTrustStoreParametersRef string `json:"keyOrTrustStoreParametersRef,omitempty"`
	KeyPassword                  string `json:"keyPassword,omitempty"`
	MgfAlgorithm                 string `json:"mgfAlgorithm,omitempty"`
	PassPhrase                   string `json:"passPhrase,omitempty"`
	PassPhraseByte               string `json:"passPhraseByte,omitempty"`
	RecipientKeyAlias            string `json:"recipientKeyAlias,omitempty"`
	SecureTag                    string `json:"secureTag,omitempty"`
	SecureTagContents            bool   `json:"secureTagContents,omitempty"`
	XmlCipherAlgorithm           string `json:"xmlCipherAlgorithm,omitempty"`
}

// OrgApacheCamelModelDataformatXStreamDataFormat
type OrgApacheCamelModelDataformatXStreamDataFormat struct {
	Aliases             []*OrgApacheCamelModelPropertyDefinition `json:"aliases,omitempty"`
	ContentTypeHeader   bool                                     `json:"contentTypeHeader,omitempty"`
	Converters          []*OrgApacheCamelModelPropertyDefinition `json:"converters,omitempty"`
	Driver              string                                   `json:"driver,omitempty"`
	DriverRef           string                                   `json:"driverRef,omitempty"`
	Encoding            string                                   `json:"encoding,omitempty"`
	Id                  string                                   `json:"id,omitempty"`
	ImplicitCollections []*OrgApacheCamelModelPropertyDefinition `json:"implicitCollections,omitempty"`
	Mode                string                                   `json:"mode,omitempty"`
	OmitFields          []*OrgApacheCamelModelPropertyDefinition `json:"omitFields,omitempty"`
	Permissions         string                                   `json:"permissions,omitempty"`
}

// OrgApacheCamelModelDataformatYAMLDataFormat
type OrgApacheCamelModelDataformatYAMLDataFormat struct {
	AllowAnyType                     bool                                                     `json:"allowAnyType,omitempty"`
	AllowRecursiveKeys               bool                                                     `json:"allowRecursiveKeys,omitempty"`
	Constructor                      string                                                   `json:"constructor,omitempty"`
	DumperOptions                    string                                                   `json:"dumperOptions,omitempty"`
	Id                               string                                                   `json:"id,omitempty"`
	Library                          string                                                   `json:"library,omitempty"`
	MaxAliasesForCollections         float64                                                  `json:"maxAliasesForCollections,omitempty"`
	PrettyFlow                       bool                                                     `json:"prettyFlow,omitempty"`
	Representer                      string                                                   `json:"representer,omitempty"`
	Resolver                         string                                                   `json:"resolver,omitempty"`
	TypeFilter                       []*OrgApacheCamelModelDataformatYAMLTypeFilterDefinition `json:"typeFilter,omitempty"`
	UnmarshalType                    string                                                   `json:"unmarshalType,omitempty"`
	UseApplicationContextClassLoader bool                                                     `json:"useApplicationContextClassLoader,omitempty"`
}

// OrgApacheCamelModelDataformatYAMLTypeFilterDefinition
type OrgApacheCamelModelDataformatYAMLTypeFilterDefinition struct {
	Type  string `json:"type,omitempty"`
	Value string `json:"value,omitempty"`
}

// OrgApacheCamelModelDataformatZipDeflaterDataFormat
type OrgApacheCamelModelDataformatZipDeflaterDataFormat struct {
	CompressionLevel string `json:"compressionLevel,omitempty"`
	Id               string `json:"id,omitempty"`
}

// OrgApacheCamelModelDataformatZipFileDataFormat
type OrgApacheCamelModelDataformatZipFileDataFormat struct {
	AllowEmptyDirectory  bool    `json:"allowEmptyDirectory,omitempty"`
	Id                   string  `json:"id,omitempty"`
	MaxDecompressedSize  float64 `json:"maxDecompressedSize,omitempty"`
	PreservePathElements bool    `json:"preservePathElements,omitempty"`
	UsingIterator        bool    `json:"usingIterator,omitempty"`
}

// OrgApacheCamelModelDelayDefinition
type OrgApacheCamelModelDelayDefinition struct {
	AsyncDelayed           bool                                             `json:"asyncDelayed,omitempty"`
	CallerRunsWhenRejected bool                                             `json:"callerRunsWhenRejected,omitempty"`
	Description            string                                           `json:"description,omitempty"`
	ExecutorService        string                                           `json:"executorService,omitempty"`
	Expression             *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	Id                     string                                           `json:"id,omitempty"`
	InheritErrorHandler    bool                                             `json:"inheritErrorHandler,omitempty"`
}

// OrgApacheCamelModelDescriptionDefinition
type OrgApacheCamelModelDescriptionDefinition struct {
	Lang string `json:"lang,omitempty"`
	Text string `json:"text,omitempty"`
}

// OrgApacheCamelModelDynamicRouterDefinition
type OrgApacheCamelModelDynamicRouterDefinition struct {
	CacheSize              float64                                          `json:"cacheSize,omitempty"`
	Description            string                                           `json:"description,omitempty"`
	Expression             *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	Id                     string                                           `json:"id,omitempty"`
	IgnoreInvalidEndpoints bool                                             `json:"ignoreInvalidEndpoints,omitempty"`
	InheritErrorHandler    bool                                             `json:"inheritErrorHandler,omitempty"`
	UriDelimiter           string                                           `json:"uriDelimiter,omitempty"`
}

// OrgApacheCamelModelEnrichDefinition
type OrgApacheCamelModelEnrichDefinition struct {
	AggregateOnException               bool                                             `json:"aggregateOnException,omitempty"`
	AggregationStrategy                string                                           `json:"aggregationStrategy,omitempty"`
	AggregationStrategyMethodAllowNull string                                           `json:"aggregationStrategyMethodAllowNull,omitempty"`
	AggregationStrategyMethodName      string                                           `json:"aggregationStrategyMethodName,omitempty"`
	AllowOptimisedComponents           bool                                             `json:"allowOptimisedComponents,omitempty"`
	CacheSize                          float64                                          `json:"cacheSize,omitempty"`
	Description                        string                                           `json:"description,omitempty"`
	Expression                         *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	Id                                 string                                           `json:"id,omitempty"`
	IgnoreInvalidEndpoint              bool                                             `json:"ignoreInvalidEndpoint,omitempty"`
	InheritErrorHandler                bool                                             `json:"inheritErrorHandler,omitempty"`
	ShareUnitOfWork                    bool                                             `json:"shareUnitOfWork,omitempty"`
}

// OrgApacheCamelModelErrorHandlerDefinition
type OrgApacheCamelModelErrorHandlerDefinition struct {
	DeadLetterChannel             *OrgApacheCamelModelErrorhandlerDeadLetterChannelDefinition             `json:"deadLetterChannel,omitempty"`
	DefaultErrorHandler           *OrgApacheCamelModelErrorhandlerDefaultErrorHandlerDefinition           `json:"defaultErrorHandler,omitempty"`
	Id                            string                                                                  `json:"id,omitempty"`
	JtaTransactionErrorHandler    *OrgApacheCamelModelErrorhandlerJtaTransactionErrorHandlerDefinition    `json:"jtaTransactionErrorHandler,omitempty"`
	NoErrorHandler                *OrgApacheCamelModelErrorhandlerNoErrorHandlerDefinition                `json:"noErrorHandler,omitempty"`
	SpringTransactionErrorHandler *OrgApacheCamelModelErrorhandlerSpringTransactionErrorHandlerDefinition `json:"springTransactionErrorHandler,omitempty"`
}

// OrgApacheCamelModelErrorhandlerDeadLetterChannelDefinition
type OrgApacheCamelModelErrorhandlerDeadLetterChannelDefinition struct {
	DeadLetterHandleNewException bool                                           `json:"deadLetterHandleNewException,omitempty"`
	DeadLetterUri                string                                         `json:"deadLetterUri"`
	ExecutorServiceRef           string                                         `json:"executorServiceRef,omitempty"`
	Id                           string                                         `json:"id,omitempty"`
	Level                        string                                         `json:"level,omitempty"`
	LogName                      string                                         `json:"logName,omitempty"`
	LoggerRef                    string                                         `json:"loggerRef,omitempty"`
	OnExceptionOccurredRef       string                                         `json:"onExceptionOccurredRef,omitempty"`
	OnPrepareFailureRef          string                                         `json:"onPrepareFailureRef,omitempty"`
	OnRedeliveryRef              string                                         `json:"onRedeliveryRef,omitempty"`
	RedeliveryPolicy             *OrgApacheCamelModelRedeliveryPolicyDefinition `json:"redeliveryPolicy,omitempty"`
	RedeliveryPolicyRef          string                                         `json:"redeliveryPolicyRef,omitempty"`
	RetryWhileRef                string                                         `json:"retryWhileRef,omitempty"`
	UseOriginalBody              bool                                           `json:"useOriginalBody,omitempty"`
	UseOriginalMessage           bool                                           `json:"useOriginalMessage,omitempty"`
}

// OrgApacheCamelModelErrorhandlerDefaultErrorHandlerDefinition
type OrgApacheCamelModelErrorhandlerDefaultErrorHandlerDefinition struct {
	ExecutorServiceRef     string                                         `json:"executorServiceRef,omitempty"`
	Id                     string                                         `json:"id,omitempty"`
	Level                  string                                         `json:"level,omitempty"`
	LogName                string                                         `json:"logName,omitempty"`
	LoggerRef              string                                         `json:"loggerRef,omitempty"`
	OnExceptionOccurredRef string                                         `json:"onExceptionOccurredRef,omitempty"`
	OnPrepareFailureRef    string                                         `json:"onPrepareFailureRef,omitempty"`
	OnRedeliveryRef        string                                         `json:"onRedeliveryRef,omitempty"`
	RedeliveryPolicy       *OrgApacheCamelModelRedeliveryPolicyDefinition `json:"redeliveryPolicy,omitempty"`
	RedeliveryPolicyRef    string                                         `json:"redeliveryPolicyRef,omitempty"`
	RetryWhileRef          string                                         `json:"retryWhileRef,omitempty"`
	UseOriginalBody        bool                                           `json:"useOriginalBody,omitempty"`
	UseOriginalMessage     bool                                           `json:"useOriginalMessage,omitempty"`
}

// OrgApacheCamelModelErrorhandlerErrorHandlerRefDefinition
type OrgApacheCamelModelErrorhandlerErrorHandlerRefDefinition struct {
	Id  string `json:"id,omitempty"`
	Ref string `json:"ref"`
}

// OrgApacheCamelModelErrorhandlerJtaTransactionErrorHandlerDefinition
type OrgApacheCamelModelErrorhandlerJtaTransactionErrorHandlerDefinition struct {
	ExecutorServiceRef     string                                         `json:"executorServiceRef,omitempty"`
	Id                     string                                         `json:"id,omitempty"`
	Level                  string                                         `json:"level,omitempty"`
	LogName                string                                         `json:"logName,omitempty"`
	LoggerRef              string                                         `json:"loggerRef,omitempty"`
	OnExceptionOccurredRef string                                         `json:"onExceptionOccurredRef,omitempty"`
	OnPrepareFailureRef    string                                         `json:"onPrepareFailureRef,omitempty"`
	OnRedeliveryRef        string                                         `json:"onRedeliveryRef,omitempty"`
	RedeliveryPolicy       *OrgApacheCamelModelRedeliveryPolicyDefinition `json:"redeliveryPolicy,omitempty"`
	RedeliveryPolicyRef    string                                         `json:"redeliveryPolicyRef,omitempty"`
	RetryWhileRef          string                                         `json:"retryWhileRef,omitempty"`
	RollbackLoggingLevel   string                                         `json:"rollbackLoggingLevel,omitempty"`
	TransactedPolicyRef    string                                         `json:"transactedPolicyRef,omitempty"`
	UseOriginalBody        bool                                           `json:"useOriginalBody,omitempty"`
	UseOriginalMessage     bool                                           `json:"useOriginalMessage,omitempty"`
}

// OrgApacheCamelModelErrorhandlerNoErrorHandlerDefinition
type OrgApacheCamelModelErrorhandlerNoErrorHandlerDefinition struct {
	Id string `json:"id,omitempty"`
}

// OrgApacheCamelModelErrorhandlerSpringTransactionErrorHandlerDefinition
type OrgApacheCamelModelErrorhandlerSpringTransactionErrorHandlerDefinition struct {
	ExecutorServiceRef     string                                         `json:"executorServiceRef,omitempty"`
	Id                     string                                         `json:"id,omitempty"`
	Level                  string                                         `json:"level,omitempty"`
	LogName                string                                         `json:"logName,omitempty"`
	LoggerRef              string                                         `json:"loggerRef,omitempty"`
	OnExceptionOccurredRef string                                         `json:"onExceptionOccurredRef,omitempty"`
	OnPrepareFailureRef    string                                         `json:"onPrepareFailureRef,omitempty"`
	OnRedeliveryRef        string                                         `json:"onRedeliveryRef,omitempty"`
	RedeliveryPolicy       *OrgApacheCamelModelRedeliveryPolicyDefinition `json:"redeliveryPolicy,omitempty"`
	RedeliveryPolicyRef    string                                         `json:"redeliveryPolicyRef,omitempty"`
	RetryWhileRef          string                                         `json:"retryWhileRef,omitempty"`
	RollbackLoggingLevel   string                                         `json:"rollbackLoggingLevel,omitempty"`
	TransactedPolicyRef    string                                         `json:"transactedPolicyRef,omitempty"`
	UseOriginalBody        bool                                           `json:"useOriginalBody,omitempty"`
	UseOriginalMessage     bool                                           `json:"useOriginalMessage,omitempty"`
}

// OrgApacheCamelModelExpressionSubElementDefinition
type OrgApacheCamelModelExpressionSubElementDefinition struct {
	Constant         *OrgApacheCamelModelLanguageConstantExpression         `json:"constant,omitempty"`
	Csimple          *OrgApacheCamelModelLanguageCSimpleExpression          `json:"csimple,omitempty"`
	Datasonnet       *OrgApacheCamelModelLanguageDatasonnetExpression       `json:"datasonnet,omitempty"`
	ExchangeProperty *OrgApacheCamelModelLanguageExchangePropertyExpression `json:"exchangeProperty,omitempty"`
	Groovy           *OrgApacheCamelModelLanguageGroovyExpression           `json:"groovy,omitempty"`
	Header           *OrgApacheCamelModelLanguageHeaderExpression           `json:"header,omitempty"`
	Hl7terser        *OrgApacheCamelModelLanguageHl7TerserExpression        `json:"hl7terser,omitempty"`
	Joor             *OrgApacheCamelModelLanguageJoorExpression             `json:"joor,omitempty"`
	Jq               *OrgApacheCamelModelLanguageJqExpression               `json:"jq,omitempty"`
	Jsonpath         *OrgApacheCamelModelLanguageJsonPathExpression         `json:"jsonpath,omitempty"`
	Language         *OrgApacheCamelModelLanguageLanguageExpression         `json:"language,omitempty"`
	Method           *OrgApacheCamelModelLanguageMethodCallExpression       `json:"method,omitempty"`
	Mvel             *OrgApacheCamelModelLanguageMvelExpression             `json:"mvel,omitempty"`
	Ognl             *OrgApacheCamelModelLanguageOgnlExpression             `json:"ognl,omitempty"`
	Ref              *OrgApacheCamelModelLanguageRefExpression              `json:"ref,omitempty"`
	Simple           *OrgApacheCamelModelLanguageSimpleExpression           `json:"simple,omitempty"`
	Spel             *OrgApacheCamelModelLanguageSpELExpression             `json:"spel,omitempty"`
	Tokenize         *OrgApacheCamelModelLanguageTokenizerExpression        `json:"tokenize,omitempty"`
	Xpath            *OrgApacheCamelModelLanguageXPathExpression            `json:"xpath,omitempty"`
	Xquery           *OrgApacheCamelModelLanguageXQueryExpression           `json:"xquery,omitempty"`
	Xtokenize        *OrgApacheCamelModelLanguageXMLTokenizerExpression     `json:"xtokenize,omitempty"`
}

// OrgApacheCamelModelFaultToleranceConfigurationDefinition
type OrgApacheCamelModelFaultToleranceConfigurationDefinition struct {
	BulkheadEnabled                 bool    `json:"bulkheadEnabled,omitempty"`
	BulkheadExecutorService         string  `json:"bulkheadExecutorService,omitempty"`
	BulkheadMaxConcurrentCalls      float64 `json:"bulkheadMaxConcurrentCalls,omitempty"`
	BulkheadWaitingTaskQueue        float64 `json:"bulkheadWaitingTaskQueue,omitempty"`
	CircuitBreaker                  string  `json:"circuitBreaker,omitempty"`
	Delay                           string  `json:"delay,omitempty"`
	FailureRatio                    float64 `json:"failureRatio,omitempty"`
	Id                              string  `json:"id,omitempty"`
	RequestVolumeThreshold          float64 `json:"requestVolumeThreshold,omitempty"`
	SuccessThreshold                float64 `json:"successThreshold,omitempty"`
	TimeoutDuration                 string  `json:"timeoutDuration,omitempty"`
	TimeoutEnabled                  bool    `json:"timeoutEnabled,omitempty"`
	TimeoutPoolSize                 float64 `json:"timeoutPoolSize,omitempty"`
	TimeoutScheduledExecutorService string  `json:"timeoutScheduledExecutorService,omitempty"`
}

// OrgApacheCamelModelFilterDefinition
type OrgApacheCamelModelFilterDefinition struct {
	Description         string                                           `json:"description,omitempty"`
	Expression          *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	Id                  string                                           `json:"id,omitempty"`
	InheritErrorHandler bool                                             `json:"inheritErrorHandler,omitempty"`
	StatusPropertyName  string                                           `json:"statusPropertyName,omitempty"`
	Steps               []*RawStep                                       `json:"steps,omitempty"`
}

// OrgApacheCamelModelFinallyDefinition
type OrgApacheCamelModelFinallyDefinition struct {
	Description         string     `json:"description,omitempty"`
	Id                  string     `json:"id,omitempty"`
	InheritErrorHandler bool       `json:"inheritErrorHandler,omitempty"`
	Steps               []*RawStep `json:"steps,omitempty"`
}

// OrgApacheCamelModelFromDefinition
type OrgApacheCamelModelFromDefinition struct {
	Parameters *Parameters                               `json:"parameters,omitempty"`
	Steps      []*OrgApacheCamelModelProcessorDefinition `json:"steps"`
	Uri        string                                    `json:"uri"`
}

// OrgApacheCamelModelGlobalOptionDefinition
type OrgApacheCamelModelGlobalOptionDefinition struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// OrgApacheCamelModelGlobalOptionsDefinition
type OrgApacheCamelModelGlobalOptionsDefinition struct {
	GlobalOption []*OrgApacheCamelModelGlobalOptionDefinition `json:"globalOption,omitempty"`
}

// OrgApacheCamelModelIdempotentConsumerDefinition
type OrgApacheCamelModelIdempotentConsumerDefinition struct {
	CompletionEager      bool                                             `json:"completionEager,omitempty"`
	Description          string                                           `json:"description,omitempty"`
	Eager                bool                                             `json:"eager,omitempty"`
	Expression           *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	Id                   string                                           `json:"id,omitempty"`
	IdempotentRepository string                                           `json:"idempotentRepository"`
	InheritErrorHandler  bool                                             `json:"inheritErrorHandler,omitempty"`
	RemoveOnFailure      bool                                             `json:"removeOnFailure,omitempty"`
	SkipDuplicate        bool                                             `json:"skipDuplicate,omitempty"`
	Steps                []*RawStep                                       `json:"steps,omitempty"`
}

// OrgApacheCamelModelInOnlyDefinition
type OrgApacheCamelModelInOnlyDefinition struct {
	Description         string      `json:"description,omitempty"`
	Id                  string      `json:"id,omitempty"`
	InheritErrorHandler bool        `json:"inheritErrorHandler,omitempty"`
	Parameters          *Parameters `json:"parameters,omitempty"`
	Uri                 string      `json:"uri"`
}

// OrgApacheCamelModelInOutDefinition
type OrgApacheCamelModelInOutDefinition struct {
	Description         string      `json:"description,omitempty"`
	Id                  string      `json:"id,omitempty"`
	InheritErrorHandler bool        `json:"inheritErrorHandler,omitempty"`
	Parameters          *Parameters `json:"parameters,omitempty"`
	Uri                 string      `json:"uri"`
}

// OrgApacheCamelModelInputTypeDefinition
type OrgApacheCamelModelInputTypeDefinition struct {
	Description string `json:"description,omitempty"`
	Id          string `json:"id,omitempty"`
	Urn         string `json:"urn"`
	Validate    bool   `json:"validate,omitempty"`
}

// OrgApacheCamelModelInterceptDefinition
type OrgApacheCamelModelInterceptDefinition struct {
	Description         string     `json:"description,omitempty"`
	Id                  string     `json:"id,omitempty"`
	InheritErrorHandler bool       `json:"inheritErrorHandler,omitempty"`
	Steps               []*RawStep `json:"steps,omitempty"`
}

// OrgApacheCamelModelInterceptFromDefinition
type OrgApacheCamelModelInterceptFromDefinition struct {
	Description         string     `json:"description,omitempty"`
	Id                  string     `json:"id,omitempty"`
	InheritErrorHandler bool       `json:"inheritErrorHandler,omitempty"`
	Steps               []*RawStep `json:"steps,omitempty"`
	Uri                 string     `json:"uri,omitempty"`
}

// OrgApacheCamelModelInterceptSendToEndpointDefinition
type OrgApacheCamelModelInterceptSendToEndpointDefinition struct {
	AfterUri                   string     `json:"afterUri,omitempty"`
	Description                string     `json:"description,omitempty"`
	Id                         string     `json:"id,omitempty"`
	InheritErrorHandler        bool       `json:"inheritErrorHandler,omitempty"`
	SkipSendToOriginalEndpoint string     `json:"skipSendToOriginalEndpoint,omitempty"`
	Steps                      []*RawStep `json:"steps,omitempty"`
	Uri                        string     `json:"uri"`
}

// OrgApacheCamelModelKameletDefinition
type OrgApacheCamelModelKameletDefinition struct {
	InheritErrorHandler bool        `json:"inheritErrorHandler,omitempty"`
	Name                string      `json:"name"`
	Parameters          *Parameters `json:"parameters,omitempty"`
	Steps               []*RawStep  `json:"steps,omitempty"`
}

// OrgApacheCamelModelLanguageCSimpleExpression
type OrgApacheCamelModelLanguageCSimpleExpression struct {
	Expression string `json:"expression"`
	Id         string `json:"id,omitempty"`
	ResultType string `json:"resultType,omitempty"`
	Trim       bool   `json:"trim,omitempty"`
}

// OrgApacheCamelModelLanguageConstantExpression
type OrgApacheCamelModelLanguageConstantExpression struct {
	Expression string `json:"expression"`
	Id         string `json:"id,omitempty"`
	ResultType string `json:"resultType,omitempty"`
	Trim       bool   `json:"trim,omitempty"`
}

// OrgApacheCamelModelLanguageDatasonnetExpression
type OrgApacheCamelModelLanguageDatasonnetExpression struct {
	BodyMediaType   string `json:"bodyMediaType,omitempty"`
	Expression      string `json:"expression"`
	Id              string `json:"id,omitempty"`
	OutputMediaType string `json:"outputMediaType,omitempty"`
	ResultType      string `json:"resultType,omitempty"`
	Trim            bool   `json:"trim,omitempty"`
}

// OrgApacheCamelModelLanguageExchangePropertyExpression
type OrgApacheCamelModelLanguageExchangePropertyExpression struct {
	Expression string `json:"expression"`
	Id         string `json:"id,omitempty"`
	Trim       bool   `json:"trim,omitempty"`
}

// OrgApacheCamelModelLanguageExpressionDefinition
type OrgApacheCamelModelLanguageExpressionDefinition struct {
	Constant         *OrgApacheCamelModelLanguageConstantExpression         `json:"constant,omitempty"`
	Csimple          *OrgApacheCamelModelLanguageCSimpleExpression          `json:"csimple,omitempty"`
	Datasonnet       *OrgApacheCamelModelLanguageDatasonnetExpression       `json:"datasonnet,omitempty"`
	ExchangeProperty *OrgApacheCamelModelLanguageExchangePropertyExpression `json:"exchangeProperty,omitempty"`
	Groovy           *OrgApacheCamelModelLanguageGroovyExpression           `json:"groovy,omitempty"`
	Header           *OrgApacheCamelModelLanguageHeaderExpression           `json:"header,omitempty"`
	Hl7terser        *OrgApacheCamelModelLanguageHl7TerserExpression        `json:"hl7terser,omitempty"`
	Joor             *OrgApacheCamelModelLanguageJoorExpression             `json:"joor,omitempty"`
	Jq               *OrgApacheCamelModelLanguageJqExpression               `json:"jq,omitempty"`
	Jsonpath         *OrgApacheCamelModelLanguageJsonPathExpression         `json:"jsonpath,omitempty"`
	Language         *OrgApacheCamelModelLanguageLanguageExpression         `json:"language,omitempty"`
	Method           *OrgApacheCamelModelLanguageMethodCallExpression       `json:"method,omitempty"`
	Mvel             *OrgApacheCamelModelLanguageMvelExpression             `json:"mvel,omitempty"`
	Ognl             *OrgApacheCamelModelLanguageOgnlExpression             `json:"ognl,omitempty"`
	Ref              *OrgApacheCamelModelLanguageRefExpression              `json:"ref,omitempty"`
	Simple           *OrgApacheCamelModelLanguageSimpleExpression           `json:"simple,omitempty"`
	Spel             *OrgApacheCamelModelLanguageSpELExpression             `json:"spel,omitempty"`
	Tokenize         *OrgApacheCamelModelLanguageTokenizerExpression        `json:"tokenize,omitempty"`
	Xpath            *OrgApacheCamelModelLanguageXPathExpression            `json:"xpath,omitempty"`
	Xquery           *OrgApacheCamelModelLanguageXQueryExpression           `json:"xquery,omitempty"`
	Xtokenize        *OrgApacheCamelModelLanguageXMLTokenizerExpression     `json:"xtokenize,omitempty"`
}

// OrgApacheCamelModelLanguageGroovyExpression
type OrgApacheCamelModelLanguageGroovyExpression struct {
	Expression string `json:"expression"`
	Id         string `json:"id,omitempty"`
	Trim       bool   `json:"trim,omitempty"`
}

// OrgApacheCamelModelLanguageHeaderExpression
type OrgApacheCamelModelLanguageHeaderExpression struct {
	Expression string `json:"expression"`
	Id         string `json:"id,omitempty"`
	Trim       bool   `json:"trim,omitempty"`
}

// OrgApacheCamelModelLanguageHl7TerserExpression
type OrgApacheCamelModelLanguageHl7TerserExpression struct {
	Expression string `json:"expression"`
	Id         string `json:"id,omitempty"`
	Trim       bool   `json:"trim,omitempty"`
}

// OrgApacheCamelModelLanguageJoorExpression
type OrgApacheCamelModelLanguageJoorExpression struct {
	Expression   string `json:"expression"`
	Id           string `json:"id,omitempty"`
	PreCompile   bool   `json:"preCompile,omitempty"`
	ResultType   string `json:"resultType,omitempty"`
	SingleQuotes bool   `json:"singleQuotes,omitempty"`
	Trim         bool   `json:"trim,omitempty"`
}

// OrgApacheCamelModelLanguageJqExpression
type OrgApacheCamelModelLanguageJqExpression struct {
	Expression string `json:"expression"`
	HeaderName string `json:"headerName,omitempty"`
	Id         string `json:"id,omitempty"`
	ResultType string `json:"resultType,omitempty"`
	Trim       bool   `json:"trim,omitempty"`
}

// OrgApacheCamelModelLanguageJsonPathExpression
type OrgApacheCamelModelLanguageJsonPathExpression struct {
	AllowEasyPredicate bool   `json:"allowEasyPredicate,omitempty"`
	AllowSimple        bool   `json:"allowSimple,omitempty"`
	Expression         string `json:"expression"`
	HeaderName         string `json:"headerName,omitempty"`
	Id                 string `json:"id,omitempty"`
	Option             string `json:"option,omitempty"`
	ResultType         string `json:"resultType,omitempty"`
	SuppressExceptions bool   `json:"suppressExceptions,omitempty"`
	Trim               bool   `json:"trim,omitempty"`
	WriteAsString      bool   `json:"writeAsString,omitempty"`
}

// OrgApacheCamelModelLanguageLanguageExpression
type OrgApacheCamelModelLanguageLanguageExpression struct {
	Expression string `json:"expression"`
	Id         string `json:"id,omitempty"`
	Language   string `json:"language"`
	Trim       bool   `json:"trim,omitempty"`
}

// OrgApacheCamelModelLanguageMethodCallExpression
type OrgApacheCamelModelLanguageMethodCallExpression struct {
	BeanType string `json:"beanType,omitempty"`
	Id       string `json:"id,omitempty"`
	Method   string `json:"method,omitempty"`
	Ref      string `json:"ref,omitempty"`
	Scope    string `json:"scope,omitempty"`
	Trim     bool   `json:"trim,omitempty"`
}

// OrgApacheCamelModelLanguageMvelExpression
type OrgApacheCamelModelLanguageMvelExpression struct {
	Expression string `json:"expression"`
	Id         string `json:"id,omitempty"`
	Trim       bool   `json:"trim,omitempty"`
}

// OrgApacheCamelModelLanguageOgnlExpression
type OrgApacheCamelModelLanguageOgnlExpression struct {
	Expression string `json:"expression"`
	Id         string `json:"id,omitempty"`
	Trim       bool   `json:"trim,omitempty"`
}

// OrgApacheCamelModelLanguageRefExpression
type OrgApacheCamelModelLanguageRefExpression struct {
	Expression string `json:"expression"`
	Id         string `json:"id,omitempty"`
	Trim       bool   `json:"trim,omitempty"`
}

// OrgApacheCamelModelLanguageSimpleExpression
type OrgApacheCamelModelLanguageSimpleExpression struct {
	Expression string `json:"expression"`
	Id         string `json:"id,omitempty"`
	ResultType string `json:"resultType,omitempty"`
	Trim       bool   `json:"trim,omitempty"`
}

// OrgApacheCamelModelLanguageSpELExpression
type OrgApacheCamelModelLanguageSpELExpression struct {
	Expression string `json:"expression"`
	Id         string `json:"id,omitempty"`
	Trim       bool   `json:"trim,omitempty"`
}

// OrgApacheCamelModelLanguageTokenizerExpression
type OrgApacheCamelModelLanguageTokenizerExpression struct {
	EndToken                string `json:"endToken,omitempty"`
	Group                   string `json:"group,omitempty"`
	GroupDelimiter          string `json:"groupDelimiter,omitempty"`
	HeaderName              string `json:"headerName,omitempty"`
	Id                      string `json:"id,omitempty"`
	IncludeTokens           bool   `json:"includeTokens,omitempty"`
	InheritNamespaceTagName string `json:"inheritNamespaceTagName,omitempty"`
	Regex                   bool   `json:"regex,omitempty"`
	SkipFirst               bool   `json:"skipFirst,omitempty"`
	Token                   string `json:"token"`
	Trim                    bool   `json:"trim,omitempty"`
	Xml                     bool   `json:"xml,omitempty"`
}

// OrgApacheCamelModelLanguageXMLTokenizerExpression
type OrgApacheCamelModelLanguageXMLTokenizerExpression struct {
	Group      float64 `json:"group,omitempty"`
	HeaderName string  `json:"headerName,omitempty"`
	Id         string  `json:"id,omitempty"`
	Mode       string  `json:"mode,omitempty"`
	Trim       bool    `json:"trim,omitempty"`
}

// OrgApacheCamelModelLanguageXPathExpression
type OrgApacheCamelModelLanguageXPathExpression struct {
	DocumentType  string `json:"documentType,omitempty"`
	Expression    string `json:"expression"`
	FactoryRef    string `json:"factoryRef,omitempty"`
	HeaderName    string `json:"headerName,omitempty"`
	Id            string `json:"id,omitempty"`
	LogNamespaces bool   `json:"logNamespaces,omitempty"`
	ObjectModel   string `json:"objectModel,omitempty"`
	PreCompile    bool   `json:"preCompile,omitempty"`
	ResultType    string `json:"resultType,omitempty"`
	Saxon         bool   `json:"saxon,omitempty"`
	ThreadSafety  bool   `json:"threadSafety,omitempty"`
	Trim          bool   `json:"trim,omitempty"`
}

// OrgApacheCamelModelLanguageXQueryExpression
type OrgApacheCamelModelLanguageXQueryExpression struct {
	ConfigurationRef string `json:"configurationRef,omitempty"`
	Expression       string `json:"expression"`
	HeaderName       string `json:"headerName,omitempty"`
	Id               string `json:"id,omitempty"`
	Trim             bool   `json:"trim,omitempty"`
	Type             string `json:"type,omitempty"`
}

// OrgApacheCamelModelLoadBalanceDefinition
type OrgApacheCamelModelLoadBalanceDefinition struct {
	CustomLoadBalancer  *OrgApacheCamelModelLoadbalancerCustomLoadBalancerDefinition     `json:"customLoadBalancer,omitempty"`
	Description         string                                                           `json:"description,omitempty"`
	Failover            *OrgApacheCamelModelLoadbalancerFailoverLoadBalancerDefinition   `json:"failover,omitempty"`
	Id                  string                                                           `json:"id,omitempty"`
	InheritErrorHandler bool                                                             `json:"inheritErrorHandler,omitempty"`
	Random              *OrgApacheCamelModelLoadbalancerRandomLoadBalancerDefinition     `json:"random,omitempty"`
	RoundRobin          *OrgApacheCamelModelLoadbalancerRoundRobinLoadBalancerDefinition `json:"roundRobin,omitempty"`
	Steps               []*RawStep                                                       `json:"steps,omitempty"`
	Sticky              *OrgApacheCamelModelLoadbalancerStickyLoadBalancerDefinition     `json:"sticky,omitempty"`
	Topic               *OrgApacheCamelModelLoadbalancerTopicLoadBalancerDefinition      `json:"topic,omitempty"`
	Weighted            *OrgApacheCamelModelLoadbalancerWeightedLoadBalancerDefinition   `json:"weighted,omitempty"`
}

// OrgApacheCamelModelLoadbalancerCustomLoadBalancerDefinition
type OrgApacheCamelModelLoadbalancerCustomLoadBalancerDefinition struct {
	Id  string `json:"id,omitempty"`
	Ref string `json:"ref"`
}

// OrgApacheCamelModelLoadbalancerFailoverLoadBalancerDefinition
type OrgApacheCamelModelLoadbalancerFailoverLoadBalancerDefinition struct {
	Exception               []string `json:"exception,omitempty"`
	Id                      string   `json:"id,omitempty"`
	MaximumFailoverAttempts string   `json:"maximumFailoverAttempts,omitempty"`
	RoundRobin              string   `json:"roundRobin,omitempty"`
	Sticky                  string   `json:"sticky,omitempty"`
}

// OrgApacheCamelModelLoadbalancerRandomLoadBalancerDefinition
type OrgApacheCamelModelLoadbalancerRandomLoadBalancerDefinition struct {
	Id string `json:"id,omitempty"`
}

// OrgApacheCamelModelLoadbalancerRoundRobinLoadBalancerDefinition
type OrgApacheCamelModelLoadbalancerRoundRobinLoadBalancerDefinition struct {
	Id string `json:"id,omitempty"`
}

// OrgApacheCamelModelLoadbalancerStickyLoadBalancerDefinition
type OrgApacheCamelModelLoadbalancerStickyLoadBalancerDefinition struct {
	CorrelationExpression *OrgApacheCamelModelExpressionSubElementDefinition `json:"correlationExpression,omitempty"`
	Id                    string                                             `json:"id,omitempty"`
}

// OrgApacheCamelModelLoadbalancerTopicLoadBalancerDefinition
type OrgApacheCamelModelLoadbalancerTopicLoadBalancerDefinition struct {
	Id string `json:"id,omitempty"`
}

// OrgApacheCamelModelLoadbalancerWeightedLoadBalancerDefinition
type OrgApacheCamelModelLoadbalancerWeightedLoadBalancerDefinition struct {
	DistributionRatio          string `json:"distributionRatio"`
	DistributionRatioDelimiter string `json:"distributionRatioDelimiter,omitempty"`
	Id                         string `json:"id,omitempty"`
	RoundRobin                 bool   `json:"roundRobin,omitempty"`
}

// OrgApacheCamelModelLogDefinition
type OrgApacheCamelModelLogDefinition struct {
	Description         string `json:"description,omitempty"`
	Id                  string `json:"id,omitempty"`
	InheritErrorHandler bool   `json:"inheritErrorHandler,omitempty"`
	LogName             string `json:"logName,omitempty"`
	Logger              string `json:"logger,omitempty"`
	LoggingLevel        string `json:"loggingLevel,omitempty"`
	Marker              string `json:"marker,omitempty"`
	Message             string `json:"message"`
}

// OrgApacheCamelModelLoopDefinition
type OrgApacheCamelModelLoopDefinition struct {
	BreakOnShutdown     bool                                             `json:"breakOnShutdown,omitempty"`
	Copy                bool                                             `json:"copy,omitempty"`
	Description         string                                           `json:"description,omitempty"`
	DoWhile             bool                                             `json:"doWhile,omitempty"`
	Expression          *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	Id                  string                                           `json:"id,omitempty"`
	InheritErrorHandler bool                                             `json:"inheritErrorHandler,omitempty"`
	Steps               []*RawStep                                       `json:"steps,omitempty"`
}

// OrgApacheCamelModelMarshalDefinition
type OrgApacheCamelModelMarshalDefinition struct {
	Any23               *OrgApacheCamelModelDataformatAny23DataFormat          `json:"any23,omitempty"`
	Asn1                *OrgApacheCamelModelDataformatASN1DataFormat           `json:"asn1,omitempty"`
	Avro                *OrgApacheCamelModelDataformatAvroDataFormat           `json:"avro,omitempty"`
	Barcode             *OrgApacheCamelModelDataformatBarcodeDataFormat        `json:"barcode,omitempty"`
	Base64              *OrgApacheCamelModelDataformatBase64DataFormat         `json:"base64,omitempty"`
	Bindy               *OrgApacheCamelModelDataformatBindyDataFormat          `json:"bindy,omitempty"`
	Cbor                *OrgApacheCamelModelDataformatCBORDataFormat           `json:"cbor,omitempty"`
	Crypto              *OrgApacheCamelModelDataformatCryptoDataFormat         `json:"crypto,omitempty"`
	Csv                 *OrgApacheCamelModelDataformatCsvDataFormat            `json:"csv,omitempty"`
	Custom              *OrgApacheCamelModelDataformatCustomDataFormat         `json:"custom,omitempty"`
	Description         string                                                 `json:"description,omitempty"`
	FhirJson            *OrgApacheCamelModelDataformatFhirJsonDataFormat       `json:"fhirJson,omitempty"`
	FhirXml             *OrgApacheCamelModelDataformatFhirXmlDataFormat        `json:"fhirXml,omitempty"`
	Flatpack            *OrgApacheCamelModelDataformatFlatpackDataFormat       `json:"flatpack,omitempty"`
	Grok                *OrgApacheCamelModelDataformatGrokDataFormat           `json:"grok,omitempty"`
	GzipDeflater        *OrgApacheCamelModelDataformatGzipDeflaterDataFormat   `json:"gzipDeflater,omitempty"`
	Hl7                 *OrgApacheCamelModelDataformatHL7DataFormat            `json:"hl7,omitempty"`
	Ical                *OrgApacheCamelModelDataformatIcalDataFormat           `json:"ical,omitempty"`
	Id                  string                                                 `json:"id,omitempty"`
	InheritErrorHandler bool                                                   `json:"inheritErrorHandler,omitempty"`
	JacksonXml          *OrgApacheCamelModelDataformatJacksonXMLDataFormat     `json:"jacksonXml,omitempty"`
	Jaxb                *OrgApacheCamelModelDataformatJaxbDataFormat           `json:"jaxb,omitempty"`
	Json                *OrgApacheCamelModelDataformatJsonDataFormat           `json:"json,omitempty"`
	JsonApi             *OrgApacheCamelModelDataformatJsonApiDataFormat        `json:"jsonApi,omitempty"`
	Lzf                 *OrgApacheCamelModelDataformatLZFDataFormat            `json:"lzf,omitempty"`
	MimeMultipart       *OrgApacheCamelModelDataformatMimeMultipartDataFormat  `json:"mimeMultipart,omitempty"`
	Pgp                 *OrgApacheCamelModelDataformatPGPDataFormat            `json:"pgp,omitempty"`
	Protobuf            *OrgApacheCamelModelDataformatProtobufDataFormat       `json:"protobuf,omitempty"`
	Rss                 *OrgApacheCamelModelDataformatRssDataFormat            `json:"rss,omitempty"`
	Soap                *OrgApacheCamelModelDataformatSoapDataFormat           `json:"soap,omitempty"`
	Syslog              *OrgApacheCamelModelDataformatSyslogDataFormat         `json:"syslog,omitempty"`
	TarFile             *OrgApacheCamelModelDataformatTarFileDataFormat        `json:"tarFile,omitempty"`
	Thrift              *OrgApacheCamelModelDataformatThriftDataFormat         `json:"thrift,omitempty"`
	TidyMarkup          *OrgApacheCamelModelDataformatTidyMarkupDataFormat     `json:"tidyMarkup,omitempty"`
	UnivocityCsv        *OrgApacheCamelModelDataformatUniVocityCsvDataFormat   `json:"univocityCsv,omitempty"`
	UnivocityFixed      *OrgApacheCamelModelDataformatUniVocityFixedDataFormat `json:"univocityFixed,omitempty"`
	UnivocityTsv        *OrgApacheCamelModelDataformatUniVocityTsvDataFormat   `json:"univocityTsv,omitempty"`
	XmlSecurity         *OrgApacheCamelModelDataformatXMLSecurityDataFormat    `json:"xmlSecurity,omitempty"`
	Xstream             *OrgApacheCamelModelDataformatXStreamDataFormat        `json:"xstream,omitempty"`
	Yaml                *OrgApacheCamelModelDataformatYAMLDataFormat           `json:"yaml,omitempty"`
	ZipDeflater         *OrgApacheCamelModelDataformatZipDeflaterDataFormat    `json:"zipDeflater,omitempty"`
	ZipFile             *OrgApacheCamelModelDataformatZipFileDataFormat        `json:"zipFile,omitempty"`
}

// OrgApacheCamelModelMulticastDefinition
type OrgApacheCamelModelMulticastDefinition struct {
	AggregationStrategy                string     `json:"aggregationStrategy,omitempty"`
	AggregationStrategyMethodAllowNull bool       `json:"aggregationStrategyMethodAllowNull,omitempty"`
	AggregationStrategyMethodName      string     `json:"aggregationStrategyMethodName,omitempty"`
	Description                        string     `json:"description,omitempty"`
	ExecutorService                    string     `json:"executorService,omitempty"`
	Id                                 string     `json:"id,omitempty"`
	InheritErrorHandler                bool       `json:"inheritErrorHandler,omitempty"`
	OnPrepare                          string     `json:"onPrepare,omitempty"`
	ParallelAggregate                  bool       `json:"parallelAggregate,omitempty"`
	ParallelProcessing                 bool       `json:"parallelProcessing,omitempty"`
	ShareUnitOfWork                    bool       `json:"shareUnitOfWork,omitempty"`
	Steps                              []*RawStep `json:"steps,omitempty"`
	StopOnException                    bool       `json:"stopOnException,omitempty"`
	Streaming                          bool       `json:"streaming,omitempty"`
	Timeout                            string     `json:"timeout,omitempty"`
}

// OrgApacheCamelModelOnCompletionDefinition
type OrgApacheCamelModelOnCompletionDefinition struct {
	Description         string                             `json:"description,omitempty"`
	ExecutorService     string                             `json:"executorService,omitempty"`
	Id                  string                             `json:"id,omitempty"`
	InheritErrorHandler bool                               `json:"inheritErrorHandler,omitempty"`
	Mode                string                             `json:"mode,omitempty"`
	OnCompleteOnly      bool                               `json:"onCompleteOnly,omitempty"`
	OnFailureOnly       bool                               `json:"onFailureOnly,omitempty"`
	OnWhen              *OrgApacheCamelModelWhenDefinition `json:"onWhen,omitempty"`
	ParallelProcessing  bool                               `json:"parallelProcessing,omitempty"`
	Steps               []*RawStep                         `json:"steps,omitempty"`
	UseOriginalMessage  bool                               `json:"useOriginalMessage,omitempty"`
}

// OrgApacheCamelModelOnExceptionDefinition
type OrgApacheCamelModelOnExceptionDefinition struct {
	Continued              *OrgApacheCamelModelExpressionSubElementDefinition `json:"continued,omitempty"`
	Description            string                                             `json:"description,omitempty"`
	Exception              []string                                           `json:"exception,omitempty"`
	Handled                *OrgApacheCamelModelExpressionSubElementDefinition `json:"handled,omitempty"`
	Id                     string                                             `json:"id,omitempty"`
	InheritErrorHandler    bool                                               `json:"inheritErrorHandler,omitempty"`
	OnExceptionOccurredRef string                                             `json:"onExceptionOccurredRef,omitempty"`
	OnRedeliveryRef        string                                             `json:"onRedeliveryRef,omitempty"`
	OnWhen                 *OrgApacheCamelModelWhenDefinition                 `json:"onWhen,omitempty"`
	RedeliveryPolicy       *OrgApacheCamelModelRedeliveryPolicyDefinition     `json:"redeliveryPolicy,omitempty"`
	RedeliveryPolicyRef    string                                             `json:"redeliveryPolicyRef,omitempty"`
	RetryWhile             *OrgApacheCamelModelExpressionSubElementDefinition `json:"retryWhile,omitempty"`
	Steps                  []*RawStep                                         `json:"steps,omitempty"`
	UseOriginalBody        bool                                               `json:"useOriginalBody,omitempty"`
	UseOriginalMessage     bool                                               `json:"useOriginalMessage,omitempty"`
}

// OrgApacheCamelModelOnFallbackDefinition
type OrgApacheCamelModelOnFallbackDefinition struct {
	Description         string     `json:"description,omitempty"`
	FallbackViaNetwork  bool       `json:"fallbackViaNetwork,omitempty"`
	Id                  string     `json:"id,omitempty"`
	InheritErrorHandler bool       `json:"inheritErrorHandler,omitempty"`
	Steps               []*RawStep `json:"steps,omitempty"`
}

// OrgApacheCamelModelOptimisticLockRetryPolicyDefinition
type OrgApacheCamelModelOptimisticLockRetryPolicyDefinition struct {
	ExponentialBackOff bool    `json:"exponentialBackOff,omitempty"`
	MaximumRetries     float64 `json:"maximumRetries,omitempty"`
	MaximumRetryDelay  string  `json:"maximumRetryDelay,omitempty"`
	RandomBackOff      bool    `json:"randomBackOff,omitempty"`
	RetryDelay         string  `json:"retryDelay,omitempty"`
}

// OrgApacheCamelModelOtherwiseDefinition
type OrgApacheCamelModelOtherwiseDefinition struct {
	Description         string     `json:"description,omitempty"`
	Id                  string     `json:"id,omitempty"`
	InheritErrorHandler bool       `json:"inheritErrorHandler,omitempty"`
	Steps               []*RawStep `json:"steps,omitempty"`
}

// OrgApacheCamelModelOutputDefinition
type OrgApacheCamelModelOutputDefinition struct {
	Description         string     `json:"description,omitempty"`
	Id                  string     `json:"id,omitempty"`
	InheritErrorHandler bool       `json:"inheritErrorHandler,omitempty"`
	Steps               []*RawStep `json:"steps,omitempty"`
}

// OrgApacheCamelModelOutputTypeDefinition
type OrgApacheCamelModelOutputTypeDefinition struct {
	Description string `json:"description,omitempty"`
	Id          string `json:"id,omitempty"`
	Urn         string `json:"urn"`
	Validate    bool   `json:"validate,omitempty"`
}

// OrgApacheCamelModelPackageScanDefinition
type OrgApacheCamelModelPackageScanDefinition struct {
	Excludes []string `json:"excludes,omitempty"`
	Includes []string `json:"includes,omitempty"`
	Package  []string `json:"package,omitempty"`
}

// OrgApacheCamelModelPausableDefinition
type OrgApacheCamelModelPausableDefinition struct {
	ConsumerListener    string `json:"consumerListener"`
	Description         string `json:"description,omitempty"`
	Id                  string `json:"id,omitempty"`
	InheritErrorHandler bool   `json:"inheritErrorHandler,omitempty"`
	UntilCheck          string `json:"untilCheck"`
}

// OrgApacheCamelModelPipelineDefinition
type OrgApacheCamelModelPipelineDefinition struct {
	Description         string     `json:"description,omitempty"`
	Id                  string     `json:"id,omitempty"`
	InheritErrorHandler bool       `json:"inheritErrorHandler,omitempty"`
	Steps               []*RawStep `json:"steps,omitempty"`
}

// OrgApacheCamelModelPolicyDefinition
type OrgApacheCamelModelPolicyDefinition struct {
	Description         string     `json:"description,omitempty"`
	Id                  string     `json:"id,omitempty"`
	InheritErrorHandler bool       `json:"inheritErrorHandler,omitempty"`
	Ref                 string     `json:"ref"`
	Steps               []*RawStep `json:"steps,omitempty"`
}

// OrgApacheCamelModelPollEnrichDefinition
type OrgApacheCamelModelPollEnrichDefinition struct {
	AggregateOnException               bool                                             `json:"aggregateOnException,omitempty"`
	AggregationStrategy                string                                           `json:"aggregationStrategy,omitempty"`
	AggregationStrategyMethodAllowNull string                                           `json:"aggregationStrategyMethodAllowNull,omitempty"`
	AggregationStrategyMethodName      string                                           `json:"aggregationStrategyMethodName,omitempty"`
	CacheSize                          float64                                          `json:"cacheSize,omitempty"`
	Description                        string                                           `json:"description,omitempty"`
	Expression                         *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	Id                                 string                                           `json:"id,omitempty"`
	IgnoreInvalidEndpoint              bool                                             `json:"ignoreInvalidEndpoint,omitempty"`
	InheritErrorHandler                bool                                             `json:"inheritErrorHandler,omitempty"`
	Timeout                            string                                           `json:"timeout,omitempty"`
}

// OrgApacheCamelModelProcessDefinition
type OrgApacheCamelModelProcessDefinition struct {
	Description         string `json:"description,omitempty"`
	Id                  string `json:"id,omitempty"`
	InheritErrorHandler bool   `json:"inheritErrorHandler,omitempty"`
	Ref                 string `json:"ref"`
}

// +kubebuilder:validation:Type=object
// +kubebuilder:validation:Format=""
// +kubebuilder:pruning:PreserveUnknownFields
type RawStep struct {
	json.RawMessage `json:",inline"`
}

// OrgApacheCamelModelProcessorDefinition
type OrgApacheCamelModelProcessorDefinition struct {
	Aggregate               *OrgApacheCamelModelAggregateDefinition               `json:"aggregate,omitempty"`
	Bean                    *OrgApacheCamelModelBeanDefinition                    `json:"bean,omitempty"`
	Choice                  *OrgApacheCamelModelChoiceDefinition                  `json:"choice,omitempty"`
	CircuitBreaker          *OrgApacheCamelModelCircuitBreakerDefinition          `json:"circuitBreaker,omitempty"`
	ClaimCheck              *OrgApacheCamelModelClaimCheckDefinition              `json:"claimCheck,omitempty"`
	ConvertBodyTo           *OrgApacheCamelModelConvertBodyDefinition             `json:"convertBodyTo,omitempty"`
	Delay                   *OrgApacheCamelModelDelayDefinition                   `json:"delay,omitempty"`
	DoCatch                 *OrgApacheCamelModelCatchDefinition                   `json:"doCatch,omitempty"`
	DoFinally               *OrgApacheCamelModelFinallyDefinition                 `json:"doFinally,omitempty"`
	DoTry                   *OrgApacheCamelModelTryDefinition                     `json:"doTry,omitempty"`
	DynamicRouter           *OrgApacheCamelModelDynamicRouterDefinition           `json:"dynamicRouter,omitempty"`
	Enrich                  *OrgApacheCamelModelEnrichDefinition                  `json:"enrich,omitempty"`
	Filter                  *OrgApacheCamelModelFilterDefinition                  `json:"filter,omitempty"`
	IdempotentConsumer      *OrgApacheCamelModelIdempotentConsumerDefinition      `json:"idempotentConsumer,omitempty"`
	InOnly                  *OrgApacheCamelModelInOnlyDefinition                  `json:"inOnly,omitempty"`
	InOut                   *OrgApacheCamelModelInOutDefinition                   `json:"inOut,omitempty"`
	Intercept               *OrgApacheCamelModelInterceptDefinition               `json:"intercept,omitempty"`
	InterceptFrom           *OrgApacheCamelModelInterceptFromDefinition           `json:"interceptFrom,omitempty"`
	InterceptSendToEndpoint *OrgApacheCamelModelInterceptSendToEndpointDefinition `json:"interceptSendToEndpoint,omitempty"`
	Kamelet                 *OrgApacheCamelModelKameletDefinition                 `json:"kamelet,omitempty"`
	LoadBalance             *OrgApacheCamelModelLoadBalanceDefinition             `json:"loadBalance,omitempty"`
	Log                     *OrgApacheCamelModelLogDefinition                     `json:"log,omitempty"`
	Loop                    *OrgApacheCamelModelLoopDefinition                    `json:"loop,omitempty"`
	Marshal                 *OrgApacheCamelModelMarshalDefinition                 `json:"marshal,omitempty"`
	Multicast               *OrgApacheCamelModelMulticastDefinition               `json:"multicast,omitempty"`
	OnCompletion            *OrgApacheCamelModelOnCompletionDefinition            `json:"onCompletion,omitempty"`
	OnFallback              *OrgApacheCamelModelOnFallbackDefinition              `json:"onFallback,omitempty"`
	Otherwise               *OrgApacheCamelModelOtherwiseDefinition               `json:"otherwise,omitempty"`
	Pausable                *OrgApacheCamelModelPausableDefinition                `json:"pausable,omitempty"`
	Pipeline                *OrgApacheCamelModelPipelineDefinition                `json:"pipeline,omitempty"`
	Policy                  *OrgApacheCamelModelPolicyDefinition                  `json:"policy,omitempty"`
	PollEnrich              *OrgApacheCamelModelPollEnrichDefinition              `json:"pollEnrich,omitempty"`
	Process                 *OrgApacheCamelModelProcessDefinition                 `json:"process,omitempty"`
	RecipientList           *OrgApacheCamelModelRecipientListDefinition           `json:"recipientList,omitempty"`
	RemoveHeader            *OrgApacheCamelModelRemoveHeaderDefinition            `json:"removeHeader,omitempty"`
	RemoveHeaders           *OrgApacheCamelModelRemoveHeadersDefinition           `json:"removeHeaders,omitempty"`
	RemoveProperties        *OrgApacheCamelModelRemovePropertiesDefinition        `json:"removeProperties,omitempty"`
	RemoveProperty          *OrgApacheCamelModelRemovePropertyDefinition          `json:"removeProperty,omitempty"`
	Resequence              *OrgApacheCamelModelResequenceDefinition              `json:"resequence,omitempty"`
	Resumable               *OrgApacheCamelModelResumableDefinition               `json:"resumable,omitempty"`
	Rollback                *OrgApacheCamelModelRollbackDefinition                `json:"rollback,omitempty"`
	RoutingSlip             *OrgApacheCamelModelRoutingSlipDefinition             `json:"routingSlip,omitempty"`
	Saga                    *OrgApacheCamelModelSagaDefinition                    `json:"saga,omitempty"`
	Sample                  *OrgApacheCamelModelSamplingDefinition                `json:"sample,omitempty"`
	Script                  *OrgApacheCamelModelScriptDefinition                  `json:"script,omitempty"`
	ServiceCall             *OrgApacheCamelModelCloudServiceCallDefinition        `json:"serviceCall,omitempty"`
	SetBody                 *OrgApacheCamelModelSetBodyDefinition                 `json:"setBody,omitempty"`
	SetExchangePattern      *OrgApacheCamelModelSetExchangePatternDefinition      `json:"setExchangePattern,omitempty"`
	SetHeader               *OrgApacheCamelModelSetHeaderDefinition               `json:"setHeader,omitempty"`
	SetProperty             *OrgApacheCamelModelSetPropertyDefinition             `json:"setProperty,omitempty"`
	Sort                    *OrgApacheCamelModelSortDefinition                    `json:"sort,omitempty"`
	Split                   *OrgApacheCamelModelSplitDefinition                   `json:"split,omitempty"`
	Step                    *OrgApacheCamelModelStepDefinition                    `json:"step,omitempty"`
	Stop                    *OrgApacheCamelModelStopDefinition                    `json:"stop,omitempty"`
	Threads                 *OrgApacheCamelModelThreadsDefinition                 `json:"threads,omitempty"`
	Throttle                *OrgApacheCamelModelThrottleDefinition                `json:"throttle,omitempty"`
	ThrowException          *OrgApacheCamelModelThrowExceptionDefinition          `json:"throwException,omitempty"`
	To                      *OrgApacheCamelModelToDefinition                      `json:"to,omitempty"`
	ToD                     *OrgApacheCamelModelToDynamicDefinition               `json:"toD,omitempty"`
	Transacted              *OrgApacheCamelModelTransactedDefinition              `json:"transacted,omitempty"`
	Transform               *OrgApacheCamelModelTransformDefinition               `json:"transform,omitempty"`
	Unmarshal               *OrgApacheCamelModelUnmarshalDefinition               `json:"unmarshal,omitempty"`
	Validate                *OrgApacheCamelModelValidateDefinition                `json:"validate,omitempty"`
	When                    *OrgApacheCamelModelWhenDefinition                    `json:"when,omitempty"`
	WhenSkipSendToEndpoint  *OrgApacheCamelModelWhenSkipSendToEndpointDefinition  `json:"whenSkipSendToEndpoint,omitempty"`
	WireTap                 *OrgApacheCamelModelWireTapDefinition                 `json:"wireTap,omitempty"`
}

// OrgApacheCamelModelPropertyDefinition
type OrgApacheCamelModelPropertyDefinition struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// OrgApacheCamelModelPropertyExpressionDefinition
type OrgApacheCamelModelPropertyExpressionDefinition struct {
	Expression *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	Key        string                                           `json:"key"`
}

// OrgApacheCamelModelRecipientListDefinition
type OrgApacheCamelModelRecipientListDefinition struct {
	AggregationStrategy                string                                           `json:"aggregationStrategy,omitempty"`
	AggregationStrategyMethodAllowNull bool                                             `json:"aggregationStrategyMethodAllowNull,omitempty"`
	AggregationStrategyMethodName      string                                           `json:"aggregationStrategyMethodName,omitempty"`
	CacheSize                          float64                                          `json:"cacheSize,omitempty"`
	Delimiter                          string                                           `json:"delimiter,omitempty"`
	Description                        string                                           `json:"description,omitempty"`
	ExecutorService                    string                                           `json:"executorService,omitempty"`
	Expression                         *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	Id                                 string                                           `json:"id,omitempty"`
	IgnoreInvalidEndpoints             bool                                             `json:"ignoreInvalidEndpoints,omitempty"`
	InheritErrorHandler                bool                                             `json:"inheritErrorHandler,omitempty"`
	OnPrepare                          string                                           `json:"onPrepare,omitempty"`
	ParallelAggregate                  bool                                             `json:"parallelAggregate,omitempty"`
	ParallelProcessing                 bool                                             `json:"parallelProcessing,omitempty"`
	ShareUnitOfWork                    bool                                             `json:"shareUnitOfWork,omitempty"`
	StopOnException                    bool                                             `json:"stopOnException,omitempty"`
	Streaming                          bool                                             `json:"streaming,omitempty"`
	Timeout                            string                                           `json:"timeout,omitempty"`
}

// OrgApacheCamelModelRedeliveryPolicyDefinition
type OrgApacheCamelModelRedeliveryPolicyDefinition struct {
	AllowRedeliveryWhileStopping bool    `json:"allowRedeliveryWhileStopping,omitempty"`
	AsyncDelayedRedelivery       bool    `json:"asyncDelayedRedelivery,omitempty"`
	BackOffMultiplier            float64 `json:"backOffMultiplier,omitempty"`
	CollisionAvoidanceFactor     float64 `json:"collisionAvoidanceFactor,omitempty"`
	DelayPattern                 string  `json:"delayPattern,omitempty"`
	DisableRedelivery            bool    `json:"disableRedelivery,omitempty"`
	ExchangeFormatterRef         string  `json:"exchangeFormatterRef,omitempty"`
	Id                           string  `json:"id,omitempty"`
	LogContinued                 bool    `json:"logContinued,omitempty"`
	LogExhausted                 bool    `json:"logExhausted,omitempty"`
	LogExhaustedMessageBody      bool    `json:"logExhaustedMessageBody,omitempty"`
	LogExhaustedMessageHistory   bool    `json:"logExhaustedMessageHistory,omitempty"`
	LogHandled                   bool    `json:"logHandled,omitempty"`
	LogNewException              bool    `json:"logNewException,omitempty"`
	LogRetryAttempted            bool    `json:"logRetryAttempted,omitempty"`
	LogRetryStackTrace           bool    `json:"logRetryStackTrace,omitempty"`
	LogStackTrace                bool    `json:"logStackTrace,omitempty"`
	MaximumRedeliveries          float64 `json:"maximumRedeliveries,omitempty"`
	MaximumRedeliveryDelay       string  `json:"maximumRedeliveryDelay,omitempty"`
	RedeliveryDelay              string  `json:"redeliveryDelay,omitempty"`
	RetriesExhaustedLogLevel     string  `json:"retriesExhaustedLogLevel,omitempty"`
	RetryAttemptedLogInterval    float64 `json:"retryAttemptedLogInterval,omitempty"`
	RetryAttemptedLogLevel       string  `json:"retryAttemptedLogLevel,omitempty"`
	UseCollisionAvoidance        bool    `json:"useCollisionAvoidance,omitempty"`
	UseExponentialBackOff        bool    `json:"useExponentialBackOff,omitempty"`
}

// OrgApacheCamelModelRemoveHeaderDefinition
type OrgApacheCamelModelRemoveHeaderDefinition struct {
	Description         string `json:"description,omitempty"`
	Id                  string `json:"id,omitempty"`
	InheritErrorHandler bool   `json:"inheritErrorHandler,omitempty"`
	Name                string `json:"name"`
}

// OrgApacheCamelModelRemoveHeadersDefinition
type OrgApacheCamelModelRemoveHeadersDefinition struct {
	Description         string `json:"description,omitempty"`
	ExcludePattern      string `json:"excludePattern,omitempty"`
	Id                  string `json:"id,omitempty"`
	InheritErrorHandler bool   `json:"inheritErrorHandler,omitempty"`
	Pattern             string `json:"pattern"`
}

// OrgApacheCamelModelRemovePropertiesDefinition
type OrgApacheCamelModelRemovePropertiesDefinition struct {
	Description         string `json:"description,omitempty"`
	ExcludePattern      string `json:"excludePattern,omitempty"`
	Id                  string `json:"id,omitempty"`
	InheritErrorHandler bool   `json:"inheritErrorHandler,omitempty"`
	Pattern             string `json:"pattern"`
}

// OrgApacheCamelModelRemovePropertyDefinition
type OrgApacheCamelModelRemovePropertyDefinition struct {
	Description         string `json:"description,omitempty"`
	Id                  string `json:"id,omitempty"`
	InheritErrorHandler bool   `json:"inheritErrorHandler,omitempty"`
	Name                string `json:"name"`
}

// OrgApacheCamelModelResequenceDefinition
type OrgApacheCamelModelResequenceDefinition struct {
	BatchConfig         *OrgApacheCamelModelConfigBatchResequencerConfig  `json:"batchConfig,omitempty"`
	Description         string                                            `json:"description,omitempty"`
	Expression          *OrgApacheCamelModelLanguageExpressionDefinition  `json:"expression"`
	Id                  string                                            `json:"id,omitempty"`
	InheritErrorHandler bool                                              `json:"inheritErrorHandler,omitempty"`
	Steps               []*RawStep                                        `json:"steps,omitempty"`
	StreamConfig        *OrgApacheCamelModelConfigStreamResequencerConfig `json:"streamConfig,omitempty"`
}

// OrgApacheCamelModelResilience4jConfigurationDefinition
type OrgApacheCamelModelResilience4jConfigurationDefinition struct {
	AutomaticTransitionFromOpenToHalfOpenEnabled bool    `json:"automaticTransitionFromOpenToHalfOpenEnabled,omitempty"`
	CircuitBreaker                               string  `json:"circuitBreaker,omitempty"`
	Config                                       string  `json:"config,omitempty"`
	FailureRateThreshold                         float64 `json:"failureRateThreshold,omitempty"`
	Id                                           string  `json:"id,omitempty"`
	MinimumNumberOfCalls                         float64 `json:"minimumNumberOfCalls,omitempty"`
	PermittedNumberOfCallsInHalfOpenState        float64 `json:"permittedNumberOfCallsInHalfOpenState,omitempty"`
	SlidingWindowSize                            float64 `json:"slidingWindowSize,omitempty"`
	SlidingWindowType                            string  `json:"slidingWindowType,omitempty"`
	SlowCallDurationThreshold                    float64 `json:"slowCallDurationThreshold,omitempty"`
	SlowCallRateThreshold                        float64 `json:"slowCallRateThreshold,omitempty"`
	WaitDurationInOpenState                      float64 `json:"waitDurationInOpenState,omitempty"`
	WritableStackTraceEnabled                    bool    `json:"writableStackTraceEnabled,omitempty"`
}

// OrgApacheCamelModelRestApiKeyDefinition
type OrgApacheCamelModelRestApiKeyDefinition struct {
	Description string `json:"description,omitempty"`
	InCookie    bool   `json:"inCookie,omitempty"`
	InHeader    bool   `json:"inHeader,omitempty"`
	InQuery     bool   `json:"inQuery,omitempty"`
	Key         string `json:"key"`
	Name        string `json:"name"`
}

// OrgApacheCamelModelRestBasicAuthDefinition
type OrgApacheCamelModelRestBasicAuthDefinition struct {
	Description string `json:"description,omitempty"`
	Key         string `json:"key"`
}

// OrgApacheCamelModelRestBearerTokenDefinition
type OrgApacheCamelModelRestBearerTokenDefinition struct {
	Description string `json:"description,omitempty"`
	Format      string `json:"format,omitempty"`
	Key         string `json:"key"`
}

// OrgApacheCamelModelRestContextRefDefinition
type OrgApacheCamelModelRestContextRefDefinition struct {
	Ref string `json:"ref"`
}

// OrgApacheCamelModelRestDeleteDefinition
type OrgApacheCamelModelRestDeleteDefinition struct {
	ApiDocs                 bool                                                `json:"apiDocs,omitempty"`
	BindingMode             string                                              `json:"bindingMode,omitempty"`
	ClientRequestValidation bool                                                `json:"clientRequestValidation,omitempty"`
	Consumes                string                                              `json:"consumes,omitempty"`
	Deprecated              bool                                                `json:"deprecated,omitempty"`
	Description             string                                              `json:"description,omitempty"`
	EnableCors              bool                                                `json:"enableCors,omitempty"`
	Id                      string                                              `json:"id,omitempty"`
	OutType                 string                                              `json:"outType,omitempty"`
	Param                   []*OrgApacheCamelModelRestParamDefinition           `json:"param,omitempty"`
	Path                    string                                              `json:"path,omitempty"`
	Produces                string                                              `json:"produces,omitempty"`
	ResponseMessage         []*OrgApacheCamelModelRestResponseMessageDefinition `json:"responseMessage,omitempty"`
	Security                []*OrgApacheCamelModelRestSecurityDefinition        `json:"security,omitempty"`
	SkipBindingOnErrorCode  bool                                                `json:"skipBindingOnErrorCode,omitempty"`
	To                      *OrgApacheCamelModelToDefinition                    `json:"to,omitempty"`
	Type                    string                                              `json:"type,omitempty"`
}

// OrgApacheCamelModelRestGetDefinition
type OrgApacheCamelModelRestGetDefinition struct {
	ApiDocs                 bool                                                `json:"apiDocs,omitempty"`
	BindingMode             string                                              `json:"bindingMode,omitempty"`
	ClientRequestValidation bool                                                `json:"clientRequestValidation,omitempty"`
	Consumes                string                                              `json:"consumes,omitempty"`
	Deprecated              bool                                                `json:"deprecated,omitempty"`
	Description             string                                              `json:"description,omitempty"`
	EnableCors              bool                                                `json:"enableCors,omitempty"`
	Id                      string                                              `json:"id,omitempty"`
	OutType                 string                                              `json:"outType,omitempty"`
	Param                   []*OrgApacheCamelModelRestParamDefinition           `json:"param,omitempty"`
	Path                    string                                              `json:"path,omitempty"`
	Produces                string                                              `json:"produces,omitempty"`
	ResponseMessage         []*OrgApacheCamelModelRestResponseMessageDefinition `json:"responseMessage,omitempty"`
	Security                []*OrgApacheCamelModelRestSecurityDefinition        `json:"security,omitempty"`
	SkipBindingOnErrorCode  bool                                                `json:"skipBindingOnErrorCode,omitempty"`
	To                      *OrgApacheCamelModelToDefinition                    `json:"to,omitempty"`
	Type                    string                                              `json:"type,omitempty"`
}

// OrgApacheCamelModelRestHeadDefinition
type OrgApacheCamelModelRestHeadDefinition struct {
	ApiDocs                 bool                                                `json:"apiDocs,omitempty"`
	BindingMode             string                                              `json:"bindingMode,omitempty"`
	ClientRequestValidation bool                                                `json:"clientRequestValidation,omitempty"`
	Consumes                string                                              `json:"consumes,omitempty"`
	Deprecated              bool                                                `json:"deprecated,omitempty"`
	Description             string                                              `json:"description,omitempty"`
	EnableCors              bool                                                `json:"enableCors,omitempty"`
	Id                      string                                              `json:"id,omitempty"`
	OutType                 string                                              `json:"outType,omitempty"`
	Param                   []*OrgApacheCamelModelRestParamDefinition           `json:"param,omitempty"`
	Path                    string                                              `json:"path,omitempty"`
	Produces                string                                              `json:"produces,omitempty"`
	ResponseMessage         []*OrgApacheCamelModelRestResponseMessageDefinition `json:"responseMessage,omitempty"`
	Security                []*OrgApacheCamelModelRestSecurityDefinition        `json:"security,omitempty"`
	SkipBindingOnErrorCode  bool                                                `json:"skipBindingOnErrorCode,omitempty"`
	To                      *OrgApacheCamelModelToDefinition                    `json:"to,omitempty"`
	Type                    string                                              `json:"type,omitempty"`
}

// OrgApacheCamelModelRestMutualTLSDefinition
type OrgApacheCamelModelRestMutualTLSDefinition struct {
	Description string `json:"description,omitempty"`
	Key         string `json:"key"`
}

// OrgApacheCamelModelRestOAuth2Definition
type OrgApacheCamelModelRestOAuth2Definition struct {
	AuthorizationUrl string                                           `json:"authorizationUrl,omitempty"`
	Description      string                                           `json:"description,omitempty"`
	Flow             string                                           `json:"flow,omitempty"`
	Key              string                                           `json:"key"`
	RefreshUrl       string                                           `json:"refreshUrl,omitempty"`
	Scopes           []*OrgApacheCamelModelRestRestPropertyDefinition `json:"scopes,omitempty"`
	TokenUrl         string                                           `json:"tokenUrl,omitempty"`
}

// OrgApacheCamelModelRestOpenIdConnectDefinition
type OrgApacheCamelModelRestOpenIdConnectDefinition struct {
	Description string `json:"description,omitempty"`
	Key         string `json:"key"`
	Url         string `json:"url"`
}

// OrgApacheCamelModelRestParamDefinition
type OrgApacheCamelModelRestParamDefinition struct {
	ArrayType        string                                           `json:"arrayType,omitempty"`
	CollectionFormat string                                           `json:"collectionFormat,omitempty"`
	DataFormat       string                                           `json:"dataFormat,omitempty"`
	DataType         string                                           `json:"dataType,omitempty"`
	DefaultValue     string                                           `json:"defaultValue,omitempty"`
	Description      string                                           `json:"description,omitempty"`
	Examples         []*OrgApacheCamelModelRestRestPropertyDefinition `json:"examples,omitempty"`
	Name             string                                           `json:"name"`
	Required         bool                                             `json:"required,omitempty"`
	Type             string                                           `json:"type"`
	Value            []string                                         `json:"value,omitempty"`
}

// OrgApacheCamelModelRestPatchDefinition
type OrgApacheCamelModelRestPatchDefinition struct {
	ApiDocs                 bool                                                `json:"apiDocs,omitempty"`
	BindingMode             string                                              `json:"bindingMode,omitempty"`
	ClientRequestValidation bool                                                `json:"clientRequestValidation,omitempty"`
	Consumes                string                                              `json:"consumes,omitempty"`
	Deprecated              bool                                                `json:"deprecated,omitempty"`
	Description             string                                              `json:"description,omitempty"`
	EnableCors              bool                                                `json:"enableCors,omitempty"`
	Id                      string                                              `json:"id,omitempty"`
	OutType                 string                                              `json:"outType,omitempty"`
	Param                   []*OrgApacheCamelModelRestParamDefinition           `json:"param,omitempty"`
	Path                    string                                              `json:"path,omitempty"`
	Produces                string                                              `json:"produces,omitempty"`
	ResponseMessage         []*OrgApacheCamelModelRestResponseMessageDefinition `json:"responseMessage,omitempty"`
	Security                []*OrgApacheCamelModelRestSecurityDefinition        `json:"security,omitempty"`
	SkipBindingOnErrorCode  bool                                                `json:"skipBindingOnErrorCode,omitempty"`
	To                      *OrgApacheCamelModelToDefinition                    `json:"to,omitempty"`
	Type                    string                                              `json:"type,omitempty"`
}

// OrgApacheCamelModelRestPostDefinition
type OrgApacheCamelModelRestPostDefinition struct {
	ApiDocs                 bool                                                `json:"apiDocs,omitempty"`
	BindingMode             string                                              `json:"bindingMode,omitempty"`
	ClientRequestValidation bool                                                `json:"clientRequestValidation,omitempty"`
	Consumes                string                                              `json:"consumes,omitempty"`
	Deprecated              bool                                                `json:"deprecated,omitempty"`
	Description             string                                              `json:"description,omitempty"`
	EnableCors              bool                                                `json:"enableCors,omitempty"`
	Id                      string                                              `json:"id,omitempty"`
	OutType                 string                                              `json:"outType,omitempty"`
	Param                   []*OrgApacheCamelModelRestParamDefinition           `json:"param,omitempty"`
	Path                    string                                              `json:"path,omitempty"`
	Produces                string                                              `json:"produces,omitempty"`
	ResponseMessage         []*OrgApacheCamelModelRestResponseMessageDefinition `json:"responseMessage,omitempty"`
	Security                []*OrgApacheCamelModelRestSecurityDefinition        `json:"security,omitempty"`
	SkipBindingOnErrorCode  bool                                                `json:"skipBindingOnErrorCode,omitempty"`
	To                      *OrgApacheCamelModelToDefinition                    `json:"to,omitempty"`
	Type                    string                                              `json:"type,omitempty"`
}

// OrgApacheCamelModelRestPutDefinition
type OrgApacheCamelModelRestPutDefinition struct {
	ApiDocs                 bool                                                `json:"apiDocs,omitempty"`
	BindingMode             string                                              `json:"bindingMode,omitempty"`
	ClientRequestValidation bool                                                `json:"clientRequestValidation,omitempty"`
	Consumes                string                                              `json:"consumes,omitempty"`
	Deprecated              bool                                                `json:"deprecated,omitempty"`
	Description             string                                              `json:"description,omitempty"`
	EnableCors              bool                                                `json:"enableCors,omitempty"`
	Id                      string                                              `json:"id,omitempty"`
	OutType                 string                                              `json:"outType,omitempty"`
	Param                   []*OrgApacheCamelModelRestParamDefinition           `json:"param,omitempty"`
	Path                    string                                              `json:"path,omitempty"`
	Produces                string                                              `json:"produces,omitempty"`
	ResponseMessage         []*OrgApacheCamelModelRestResponseMessageDefinition `json:"responseMessage,omitempty"`
	Security                []*OrgApacheCamelModelRestSecurityDefinition        `json:"security,omitempty"`
	SkipBindingOnErrorCode  bool                                                `json:"skipBindingOnErrorCode,omitempty"`
	To                      *OrgApacheCamelModelToDefinition                    `json:"to,omitempty"`
	Type                    string                                              `json:"type,omitempty"`
}

// OrgApacheCamelModelRestResponseHeaderDefinition
type OrgApacheCamelModelRestResponseHeaderDefinition struct {
	ArrayType        string   `json:"arrayType,omitempty"`
	CollectionFormat string   `json:"collectionFormat,omitempty"`
	DataFormat       string   `json:"dataFormat,omitempty"`
	DataType         string   `json:"dataType,omitempty"`
	Description      string   `json:"description,omitempty"`
	Example          string   `json:"example,omitempty"`
	Name             string   `json:"name"`
	Value            []string `json:"value,omitempty"`
}

// OrgApacheCamelModelRestResponseMessageDefinition
type OrgApacheCamelModelRestResponseMessageDefinition struct {
	Code          string                                             `json:"code,omitempty"`
	Examples      []*OrgApacheCamelModelRestRestPropertyDefinition   `json:"examples,omitempty"`
	Header        []*OrgApacheCamelModelRestResponseHeaderDefinition `json:"header,omitempty"`
	Message       string                                             `json:"message"`
	ResponseModel string                                             `json:"responseModel,omitempty"`
}

// OrgApacheCamelModelRestRestBindingDefinition
type OrgApacheCamelModelRestRestBindingDefinition struct {
	BindingMode             string `json:"bindingMode,omitempty"`
	ClientRequestValidation bool   `json:"clientRequestValidation,omitempty"`
	Component               string `json:"component,omitempty"`
	Consumes                string `json:"consumes,omitempty"`
	Description             string `json:"description,omitempty"`
	EnableCors              bool   `json:"enableCors,omitempty"`
	Id                      string `json:"id,omitempty"`
	OutType                 string `json:"outType,omitempty"`
	Produces                string `json:"produces,omitempty"`
	SkipBindingOnErrorCode  bool   `json:"skipBindingOnErrorCode,omitempty"`
	Type                    string `json:"type,omitempty"`
}

// OrgApacheCamelModelRestRestConfigurationDefinition
type OrgApacheCamelModelRestRestConfigurationDefinition struct {
	ApiComponent            string                                           `json:"apiComponent,omitempty"`
	ApiContextPath          string                                           `json:"apiContextPath,omitempty"`
	ApiHost                 string                                           `json:"apiHost,omitempty"`
	ApiProperty             []*OrgApacheCamelModelRestRestPropertyDefinition `json:"apiProperty,omitempty"`
	ApiVendorExtension      bool                                             `json:"apiVendorExtension,omitempty"`
	BindingMode             string                                           `json:"bindingMode,omitempty"`
	ClientRequestValidation bool                                             `json:"clientRequestValidation,omitempty"`
	Component               string                                           `json:"component,omitempty"`
	ComponentProperty       []*OrgApacheCamelModelRestRestPropertyDefinition `json:"componentProperty,omitempty"`
	ConsumerProperty        []*OrgApacheCamelModelRestRestPropertyDefinition `json:"consumerProperty,omitempty"`
	ContextPath             string                                           `json:"contextPath,omitempty"`
	CorsHeaders             []*OrgApacheCamelModelRestRestPropertyDefinition `json:"corsHeaders,omitempty"`
	DataFormatProperty      []*OrgApacheCamelModelRestRestPropertyDefinition `json:"dataFormatProperty,omitempty"`
	EnableCors              bool                                             `json:"enableCors,omitempty"`
	EndpointProperty        []*OrgApacheCamelModelRestRestPropertyDefinition `json:"endpointProperty,omitempty"`
	Host                    string                                           `json:"host,omitempty"`
	HostNameResolver        string                                           `json:"hostNameResolver,omitempty"`
	JsonDataFormat          string                                           `json:"jsonDataFormat,omitempty"`
	Port                    string                                           `json:"port,omitempty"`
	ProducerApiDoc          string                                           `json:"producerApiDoc,omitempty"`
	ProducerComponent       string                                           `json:"producerComponent,omitempty"`
	Scheme                  string                                           `json:"scheme,omitempty"`
	SkipBindingOnErrorCode  bool                                             `json:"skipBindingOnErrorCode,omitempty"`
	UseXForwardHeaders      bool                                             `json:"useXForwardHeaders,omitempty"`
	XmlDataFormat           string                                           `json:"xmlDataFormat,omitempty"`
}

// OrgApacheCamelModelRestRestDefinition
type OrgApacheCamelModelRestRestDefinition struct {
	ApiDocs                 bool                                             `json:"apiDocs,omitempty"`
	BindingMode             string                                           `json:"bindingMode,omitempty"`
	ClientRequestValidation bool                                             `json:"clientRequestValidation,omitempty"`
	Consumes                string                                           `json:"consumes,omitempty"`
	Delete                  []*OrgApacheCamelModelRestDeleteDefinition       `json:"delete,omitempty"`
	Description             string                                           `json:"description,omitempty"`
	EnableCors              bool                                             `json:"enableCors,omitempty"`
	Get                     []*OrgApacheCamelModelRestGetDefinition          `json:"get,omitempty"`
	Head                    []*OrgApacheCamelModelRestHeadDefinition         `json:"head,omitempty"`
	Id                      string                                           `json:"id,omitempty"`
	Patch                   []*OrgApacheCamelModelRestPatchDefinition        `json:"patch,omitempty"`
	Path                    string                                           `json:"path,omitempty"`
	Post                    []*OrgApacheCamelModelRestPostDefinition         `json:"post,omitempty"`
	Produces                string                                           `json:"produces,omitempty"`
	Put                     []*OrgApacheCamelModelRestPutDefinition          `json:"put,omitempty"`
	SecurityDefinitions     *OrgApacheCamelModelRestRestSecuritiesDefinition `json:"securityDefinitions,omitempty"`
	SecurityRequirements    []*OrgApacheCamelModelRestSecurityDefinition     `json:"securityRequirements,omitempty"`
	SkipBindingOnErrorCode  bool                                             `json:"skipBindingOnErrorCode,omitempty"`
	Tag                     string                                           `json:"tag,omitempty"`
}

// OrgApacheCamelModelRestRestPropertyDefinition
type OrgApacheCamelModelRestRestPropertyDefinition struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// OrgApacheCamelModelRestRestSecuritiesDefinition
type OrgApacheCamelModelRestRestSecuritiesDefinition struct {
	ApiKey        *OrgApacheCamelModelRestApiKeyDefinition        `json:"apiKey,omitempty"`
	BasicAuth     *OrgApacheCamelModelRestBasicAuthDefinition     `json:"basicAuth,omitempty"`
	Bearer        *OrgApacheCamelModelRestBearerTokenDefinition   `json:"bearer,omitempty"`
	MutualTls     *OrgApacheCamelModelRestMutualTLSDefinition     `json:"mutualTls,omitempty"`
	Oauth2        *OrgApacheCamelModelRestOAuth2Definition        `json:"oauth2,omitempty"`
	OpenIdConnect *OrgApacheCamelModelRestOpenIdConnectDefinition `json:"openIdConnect,omitempty"`
}

// OrgApacheCamelModelRestRestsDefinition
type OrgApacheCamelModelRestRestsDefinition struct {
	Description string                                   `json:"description,omitempty"`
	Id          string                                   `json:"id,omitempty"`
	Rest        []*OrgApacheCamelModelRestRestDefinition `json:"rest,omitempty"`
}

// OrgApacheCamelModelRestSecurityDefinition
type OrgApacheCamelModelRestSecurityDefinition struct {
	Key    string `json:"key"`
	Scopes string `json:"scopes,omitempty"`
}

// OrgApacheCamelModelResumableDefinition
type OrgApacheCamelModelResumableDefinition struct {
	Description         string `json:"description,omitempty"`
	Id                  string `json:"id,omitempty"`
	InheritErrorHandler bool   `json:"inheritErrorHandler,omitempty"`
	Intermittent        bool   `json:"intermittent,omitempty"`
	ResumeStrategy      string `json:"resumeStrategy"`
}

// OrgApacheCamelModelRollbackDefinition
type OrgApacheCamelModelRollbackDefinition struct {
	Description          string `json:"description,omitempty"`
	Id                   string `json:"id,omitempty"`
	InheritErrorHandler  bool   `json:"inheritErrorHandler,omitempty"`
	MarkRollbackOnly     bool   `json:"markRollbackOnly,omitempty"`
	MarkRollbackOnlyLast bool   `json:"markRollbackOnlyLast,omitempty"`
	Message              string `json:"message,omitempty"`
}

// OrgApacheCamelModelRouteBuilderDefinition
type OrgApacheCamelModelRouteBuilderDefinition struct {
	Id  string `json:"id,omitempty"`
	Ref string `json:"ref"`
}

// OrgApacheCamelModelRouteConfigurationContextRefDefinition
type OrgApacheCamelModelRouteConfigurationContextRefDefinition struct {
	Ref string `json:"ref"`
}

// OrgApacheCamelModelRouteConfigurationDefinition
type OrgApacheCamelModelRouteConfigurationDefinition struct {
	ErrorHandler            *OrgApacheCamelModelErrorHandlerDefinition              `json:"errorHandler,omitempty"`
	Id                      string                                                  `json:"id,omitempty"`
	Intercept               []*OrgApacheCamelModelInterceptDefinition               `json:"intercept,omitempty"`
	InterceptFrom           []*OrgApacheCamelModelInterceptFromDefinition           `json:"interceptFrom,omitempty"`
	InterceptSendToEndpoint []*OrgApacheCamelModelInterceptSendToEndpointDefinition `json:"interceptSendToEndpoint,omitempty"`
	OnCompletion            []*OrgApacheCamelModelOnCompletionDefinition            `json:"onCompletion,omitempty"`
	OnException             []*OrgApacheCamelModelOnExceptionDefinition             `json:"onException,omitempty"`
	Precondition            string                                                  `json:"precondition,omitempty"`
}

// OrgApacheCamelModelRouteContextRefDefinition
type OrgApacheCamelModelRouteContextRefDefinition struct {
	Ref string `json:"ref"`
}

// OrgApacheCamelModelRouteDefinition
type OrgApacheCamelModelRouteDefinition struct {
	AutoStartup          bool                               `json:"autoStartup,omitempty"`
	Description          string                             `json:"description,omitempty"`
	From                 *OrgApacheCamelModelFromDefinition `json:"from"`
	Group                string                             `json:"group,omitempty"`
	Id                   string                             `json:"id,omitempty"`
	Precondition         string                             `json:"precondition,omitempty"`
	RouteConfigurationId string                             `json:"routeConfigurationId,omitempty"`
	StreamCaching        bool                               `json:"streamCaching,omitempty"`
}

// OrgApacheCamelModelRouteTemplateBeanDefinition
type OrgApacheCamelModelRouteTemplateBeanDefinition struct {
	BeanType   string                                   `json:"beanType,omitempty"`
	Name       string                                   `json:"name"`
	Properties *Properties                              `json:"properties,omitempty"`
	Property   []*OrgApacheCamelModelPropertyDefinition `json:"property,omitempty"`
	Script     string                                   `json:"script,omitempty"`
	Type       string                                   `json:"type"`
}

// OrgApacheCamelModelRouteTemplateDefinition
type OrgApacheCamelModelRouteTemplateDefinition struct {
	Beans      []*OrgApacheCamelDslYamlDeserializersNamedBeanDefinition `json:"beans,omitempty"`
	From       *OrgApacheCamelModelFromDefinition                       `json:"from"`
	Id         string                                                   `json:"id"`
	Parameters []*OrgApacheCamelModelRouteTemplateParameterDefinition   `json:"parameters,omitempty"`
}

// OrgApacheCamelModelRouteTemplateParameterDefinition
type OrgApacheCamelModelRouteTemplateParameterDefinition struct {
	DefaultValue string `json:"defaultValue,omitempty"`
	Description  string `json:"description,omitempty"`
	Name         string `json:"name"`
	Required     bool   `json:"required,omitempty"`
}

// OrgApacheCamelModelRoutingSlipDefinition
type OrgApacheCamelModelRoutingSlipDefinition struct {
	CacheSize              float64                                          `json:"cacheSize,omitempty"`
	Description            string                                           `json:"description,omitempty"`
	Expression             *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	Id                     string                                           `json:"id,omitempty"`
	IgnoreInvalidEndpoints bool                                             `json:"ignoreInvalidEndpoints,omitempty"`
	InheritErrorHandler    bool                                             `json:"inheritErrorHandler,omitempty"`
	UriDelimiter           string                                           `json:"uriDelimiter,omitempty"`
}

// OrgApacheCamelModelSagaActionUriDefinition
type OrgApacheCamelModelSagaActionUriDefinition struct {
	Description         string      `json:"description,omitempty"`
	Id                  string      `json:"id,omitempty"`
	InheritErrorHandler bool        `json:"inheritErrorHandler,omitempty"`
	Parameters          *Parameters `json:"parameters,omitempty"`
	Uri                 string      `json:"uri"`
}

// OrgApacheCamelModelSagaDefinition
type OrgApacheCamelModelSagaDefinition struct {
	Compensation        *OrgApacheCamelModelSagaActionUriDefinition        `json:"compensation,omitempty"`
	Completion          *OrgApacheCamelModelSagaActionUriDefinition        `json:"completion,omitempty"`
	CompletionMode      string                                             `json:"completionMode,omitempty"`
	Description         string                                             `json:"description,omitempty"`
	Id                  string                                             `json:"id,omitempty"`
	InheritErrorHandler bool                                               `json:"inheritErrorHandler,omitempty"`
	Option              []*OrgApacheCamelModelPropertyExpressionDefinition `json:"option,omitempty"`
	Propagation         string                                             `json:"propagation,omitempty"`
	SagaService         string                                             `json:"sagaService,omitempty"`
	Steps               []*RawStep                                         `json:"steps,omitempty"`
	Timeout             string                                             `json:"timeout,omitempty"`
}

// OrgApacheCamelModelSamplingDefinition
type OrgApacheCamelModelSamplingDefinition struct {
	Description         string  `json:"description,omitempty"`
	Id                  string  `json:"id,omitempty"`
	InheritErrorHandler bool    `json:"inheritErrorHandler,omitempty"`
	MessageFrequency    float64 `json:"messageFrequency,omitempty"`
	SamplePeriod        string  `json:"samplePeriod,omitempty"`
}

// OrgApacheCamelModelScriptDefinition
type OrgApacheCamelModelScriptDefinition struct {
	Description         string                                           `json:"description,omitempty"`
	Expression          *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	Id                  string                                           `json:"id,omitempty"`
	InheritErrorHandler bool                                             `json:"inheritErrorHandler,omitempty"`
}

// OrgApacheCamelModelSetBodyDefinition
type OrgApacheCamelModelSetBodyDefinition struct {
	Description         string                                           `json:"description,omitempty"`
	Expression          *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	Id                  string                                           `json:"id,omitempty"`
	InheritErrorHandler bool                                             `json:"inheritErrorHandler,omitempty"`
}

// OrgApacheCamelModelSetExchangePatternDefinition
type OrgApacheCamelModelSetExchangePatternDefinition struct {
	Description         string `json:"description,omitempty"`
	Id                  string `json:"id,omitempty"`
	InheritErrorHandler bool   `json:"inheritErrorHandler,omitempty"`
	Pattern             string `json:"pattern"`
}

// OrgApacheCamelModelSetHeaderDefinition
type OrgApacheCamelModelSetHeaderDefinition struct {
	Description         string                                           `json:"description,omitempty"`
	Expression          *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	Id                  string                                           `json:"id,omitempty"`
	InheritErrorHandler bool                                             `json:"inheritErrorHandler,omitempty"`
	Name                string                                           `json:"name"`
}

// OrgApacheCamelModelSetPropertyDefinition
type OrgApacheCamelModelSetPropertyDefinition struct {
	Description         string                                           `json:"description,omitempty"`
	Expression          *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	Id                  string                                           `json:"id,omitempty"`
	InheritErrorHandler bool                                             `json:"inheritErrorHandler,omitempty"`
	Name                string                                           `json:"name"`
}

// OrgApacheCamelModelSortDefinition
type OrgApacheCamelModelSortDefinition struct {
	Comparator          string                                           `json:"comparator,omitempty"`
	Description         string                                           `json:"description,omitempty"`
	Expression          *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	Id                  string                                           `json:"id,omitempty"`
	InheritErrorHandler bool                                             `json:"inheritErrorHandler,omitempty"`
}

// OrgApacheCamelModelSplitDefinition
type OrgApacheCamelModelSplitDefinition struct {
	AggregationStrategy                string                                           `json:"aggregationStrategy,omitempty"`
	AggregationStrategyMethodAllowNull bool                                             `json:"aggregationStrategyMethodAllowNull,omitempty"`
	AggregationStrategyMethodName      string                                           `json:"aggregationStrategyMethodName,omitempty"`
	Delimiter                          string                                           `json:"delimiter,omitempty"`
	Description                        string                                           `json:"description,omitempty"`
	ExecutorService                    string                                           `json:"executorService,omitempty"`
	Expression                         *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	Id                                 string                                           `json:"id,omitempty"`
	InheritErrorHandler                bool                                             `json:"inheritErrorHandler,omitempty"`
	OnPrepare                          string                                           `json:"onPrepare,omitempty"`
	ParallelAggregate                  bool                                             `json:"parallelAggregate,omitempty"`
	ParallelProcessing                 bool                                             `json:"parallelProcessing,omitempty"`
	ShareUnitOfWork                    bool                                             `json:"shareUnitOfWork,omitempty"`
	Steps                              []*RawStep                                       `json:"steps,omitempty"`
	StopOnException                    bool                                             `json:"stopOnException,omitempty"`
	Streaming                          bool                                             `json:"streaming,omitempty"`
	Timeout                            string                                           `json:"timeout,omitempty"`
}

// OrgApacheCamelModelStepDefinition
type OrgApacheCamelModelStepDefinition struct {
	Description         string     `json:"description,omitempty"`
	Id                  string     `json:"id,omitempty"`
	InheritErrorHandler bool       `json:"inheritErrorHandler,omitempty"`
	Steps               []*RawStep `json:"steps,omitempty"`
}

// OrgApacheCamelModelStopDefinition
type OrgApacheCamelModelStopDefinition struct {
	Description         string `json:"description,omitempty"`
	Id                  string `json:"id,omitempty"`
	InheritErrorHandler bool   `json:"inheritErrorHandler,omitempty"`
}

// OrgApacheCamelModelTemplatedRouteBeanDefinition
type OrgApacheCamelModelTemplatedRouteBeanDefinition struct {
	BeanType   string                                   `json:"beanType,omitempty"`
	Name       string                                   `json:"name"`
	Properties *Properties                              `json:"properties,omitempty"`
	Property   []*OrgApacheCamelModelPropertyDefinition `json:"property,omitempty"`
	Script     string                                   `json:"script,omitempty"`
	Type       string                                   `json:"type"`
}

// OrgApacheCamelModelTemplatedRouteDefinition
type OrgApacheCamelModelTemplatedRouteDefinition struct {
	Beans            []*OrgApacheCamelDslYamlDeserializersNamedBeanDefinition `json:"beans,omitempty"`
	Parameters       []*OrgApacheCamelModelTemplatedRouteParameterDefinition  `json:"parameters,omitempty"`
	RouteId          string                                                   `json:"routeId,omitempty"`
	RouteTemplateRef string                                                   `json:"routeTemplateRef"`
}

// OrgApacheCamelModelTemplatedRouteParameterDefinition
type OrgApacheCamelModelTemplatedRouteParameterDefinition struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// OrgApacheCamelModelThreadPoolProfileDefinition
type OrgApacheCamelModelThreadPoolProfileDefinition struct {
	AllowCoreThreadTimeOut bool    `json:"allowCoreThreadTimeOut,omitempty"`
	DefaultProfile         bool    `json:"defaultProfile,omitempty"`
	Description            string  `json:"description,omitempty"`
	Id                     string  `json:"id,omitempty"`
	KeepAliveTime          float64 `json:"keepAliveTime,omitempty"`
	MaxPoolSize            float64 `json:"maxPoolSize,omitempty"`
	MaxQueueSize           float64 `json:"maxQueueSize,omitempty"`
	PoolSize               float64 `json:"poolSize,omitempty"`
	RejectedPolicy         string  `json:"rejectedPolicy,omitempty"`
	TimeUnit               string  `json:"timeUnit,omitempty"`
}

// OrgApacheCamelModelThreadsDefinition
type OrgApacheCamelModelThreadsDefinition struct {
	AllowCoreThreadTimeOut bool    `json:"allowCoreThreadTimeOut,omitempty"`
	CallerRunsWhenRejected string  `json:"callerRunsWhenRejected,omitempty"`
	Description            string  `json:"description,omitempty"`
	ExecutorService        string  `json:"executorService,omitempty"`
	Id                     string  `json:"id,omitempty"`
	InheritErrorHandler    bool    `json:"inheritErrorHandler,omitempty"`
	KeepAliveTime          float64 `json:"keepAliveTime,omitempty"`
	MaxPoolSize            float64 `json:"maxPoolSize,omitempty"`
	MaxQueueSize           float64 `json:"maxQueueSize,omitempty"`
	PoolSize               float64 `json:"poolSize,omitempty"`
	RejectedPolicy         string  `json:"rejectedPolicy,omitempty"`
	ThreadName             string  `json:"threadName,omitempty"`
	TimeUnit               string  `json:"timeUnit,omitempty"`
}

// OrgApacheCamelModelThrottleDefinition
type OrgApacheCamelModelThrottleDefinition struct {
	AsyncDelayed           bool                                               `json:"asyncDelayed,omitempty"`
	CallerRunsWhenRejected bool                                               `json:"callerRunsWhenRejected,omitempty"`
	CorrelationExpression  *OrgApacheCamelModelExpressionSubElementDefinition `json:"correlationExpression,omitempty"`
	Description            string                                             `json:"description,omitempty"`
	ExecutorService        string                                             `json:"executorService,omitempty"`
	Expression             *OrgApacheCamelModelLanguageExpressionDefinition   `json:"expression,omitempty"`
	Id                     string                                             `json:"id,omitempty"`
	InheritErrorHandler    bool                                               `json:"inheritErrorHandler,omitempty"`
	RejectExecution        bool                                               `json:"rejectExecution,omitempty"`
	TimePeriodMillis       string                                             `json:"timePeriodMillis,omitempty"`
}

// OrgApacheCamelModelThrowExceptionDefinition
type OrgApacheCamelModelThrowExceptionDefinition struct {
	Description         string `json:"description,omitempty"`
	ExceptionType       string `json:"exceptionType,omitempty"`
	Id                  string `json:"id,omitempty"`
	InheritErrorHandler bool   `json:"inheritErrorHandler,omitempty"`
	Message             string `json:"message,omitempty"`
	Ref                 string `json:"ref,omitempty"`
}

// OrgApacheCamelModelToDefinition
type OrgApacheCamelModelToDefinition struct {
	Description         string      `json:"description,omitempty"`
	Id                  string      `json:"id,omitempty"`
	InheritErrorHandler bool        `json:"inheritErrorHandler,omitempty"`
	Parameters          *Parameters `json:"parameters,omitempty"`
	Pattern             string      `json:"pattern,omitempty"`
	Uri                 string      `json:"uri"`
}

// OrgApacheCamelModelToDynamicDefinition
type OrgApacheCamelModelToDynamicDefinition struct {
	AllowOptimisedComponents bool        `json:"allowOptimisedComponents,omitempty"`
	AutoStartComponents      bool        `json:"autoStartComponents,omitempty"`
	CacheSize                float64     `json:"cacheSize,omitempty"`
	Description              string      `json:"description,omitempty"`
	Id                       string      `json:"id,omitempty"`
	IgnoreInvalidEndpoint    bool        `json:"ignoreInvalidEndpoint,omitempty"`
	InheritErrorHandler      bool        `json:"inheritErrorHandler,omitempty"`
	Parameters               *Parameters `json:"parameters,omitempty"`
	Pattern                  string      `json:"pattern,omitempty"`
	Uri                      string      `json:"uri"`
}

// OrgApacheCamelModelTransactedDefinition
type OrgApacheCamelModelTransactedDefinition struct {
	Description         string     `json:"description,omitempty"`
	Id                  string     `json:"id,omitempty"`
	InheritErrorHandler bool       `json:"inheritErrorHandler,omitempty"`
	Ref                 string     `json:"ref,omitempty"`
	Steps               []*RawStep `json:"steps,omitempty"`
}

// OrgApacheCamelModelTransformDefinition
type OrgApacheCamelModelTransformDefinition struct {
	Description         string                                           `json:"description,omitempty"`
	Expression          *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	Id                  string                                           `json:"id,omitempty"`
	InheritErrorHandler bool                                             `json:"inheritErrorHandler,omitempty"`
}

// OrgApacheCamelModelTransformerCustomTransformerDefinition
type OrgApacheCamelModelTransformerCustomTransformerDefinition struct {
	ClassName string `json:"className,omitempty"`
	FromType  string `json:"fromType,omitempty"`
	Ref       string `json:"ref,omitempty"`
	Scheme    string `json:"scheme,omitempty"`
	ToType    string `json:"toType,omitempty"`
}

// OrgApacheCamelModelTransformerDataFormatTransformerDefinition
type OrgApacheCamelModelTransformerDataFormatTransformerDefinition struct {
	Any23          *OrgApacheCamelModelDataformatAny23DataFormat          `json:"any23,omitempty"`
	Asn1           *OrgApacheCamelModelDataformatASN1DataFormat           `json:"asn1,omitempty"`
	Avro           *OrgApacheCamelModelDataformatAvroDataFormat           `json:"avro,omitempty"`
	Barcode        *OrgApacheCamelModelDataformatBarcodeDataFormat        `json:"barcode,omitempty"`
	Base64         *OrgApacheCamelModelDataformatBase64DataFormat         `json:"base64,omitempty"`
	Bindy          *OrgApacheCamelModelDataformatBindyDataFormat          `json:"bindy,omitempty"`
	Cbor           *OrgApacheCamelModelDataformatCBORDataFormat           `json:"cbor,omitempty"`
	Crypto         *OrgApacheCamelModelDataformatCryptoDataFormat         `json:"crypto,omitempty"`
	Csv            *OrgApacheCamelModelDataformatCsvDataFormat            `json:"csv,omitempty"`
	Custom         *OrgApacheCamelModelDataformatCustomDataFormat         `json:"custom,omitempty"`
	FhirJson       *OrgApacheCamelModelDataformatFhirJsonDataFormat       `json:"fhirJson,omitempty"`
	FhirXml        *OrgApacheCamelModelDataformatFhirXmlDataFormat        `json:"fhirXml,omitempty"`
	Flatpack       *OrgApacheCamelModelDataformatFlatpackDataFormat       `json:"flatpack,omitempty"`
	FromType       string                                                 `json:"fromType,omitempty"`
	Grok           *OrgApacheCamelModelDataformatGrokDataFormat           `json:"grok,omitempty"`
	GzipDeflater   *OrgApacheCamelModelDataformatGzipDeflaterDataFormat   `json:"gzipDeflater,omitempty"`
	Hl7            *OrgApacheCamelModelDataformatHL7DataFormat            `json:"hl7,omitempty"`
	Ical           *OrgApacheCamelModelDataformatIcalDataFormat           `json:"ical,omitempty"`
	JacksonXml     *OrgApacheCamelModelDataformatJacksonXMLDataFormat     `json:"jacksonXml,omitempty"`
	Jaxb           *OrgApacheCamelModelDataformatJaxbDataFormat           `json:"jaxb,omitempty"`
	Json           *OrgApacheCamelModelDataformatJsonDataFormat           `json:"json,omitempty"`
	JsonApi        *OrgApacheCamelModelDataformatJsonApiDataFormat        `json:"jsonApi,omitempty"`
	Lzf            *OrgApacheCamelModelDataformatLZFDataFormat            `json:"lzf,omitempty"`
	MimeMultipart  *OrgApacheCamelModelDataformatMimeMultipartDataFormat  `json:"mimeMultipart,omitempty"`
	Pgp            *OrgApacheCamelModelDataformatPGPDataFormat            `json:"pgp,omitempty"`
	Protobuf       *OrgApacheCamelModelDataformatProtobufDataFormat       `json:"protobuf,omitempty"`
	Rss            *OrgApacheCamelModelDataformatRssDataFormat            `json:"rss,omitempty"`
	Scheme         string                                                 `json:"scheme,omitempty"`
	Soap           *OrgApacheCamelModelDataformatSoapDataFormat           `json:"soap,omitempty"`
	Syslog         *OrgApacheCamelModelDataformatSyslogDataFormat         `json:"syslog,omitempty"`
	TarFile        *OrgApacheCamelModelDataformatTarFileDataFormat        `json:"tarFile,omitempty"`
	Thrift         *OrgApacheCamelModelDataformatThriftDataFormat         `json:"thrift,omitempty"`
	TidyMarkup     *OrgApacheCamelModelDataformatTidyMarkupDataFormat     `json:"tidyMarkup,omitempty"`
	ToType         string                                                 `json:"toType,omitempty"`
	UnivocityCsv   *OrgApacheCamelModelDataformatUniVocityCsvDataFormat   `json:"univocityCsv,omitempty"`
	UnivocityFixed *OrgApacheCamelModelDataformatUniVocityFixedDataFormat `json:"univocityFixed,omitempty"`
	UnivocityTsv   *OrgApacheCamelModelDataformatUniVocityTsvDataFormat   `json:"univocityTsv,omitempty"`
	XmlSecurity    *OrgApacheCamelModelDataformatXMLSecurityDataFormat    `json:"xmlSecurity,omitempty"`
	Xstream        *OrgApacheCamelModelDataformatXStreamDataFormat        `json:"xstream,omitempty"`
	Yaml           *OrgApacheCamelModelDataformatYAMLDataFormat           `json:"yaml,omitempty"`
	ZipDeflater    *OrgApacheCamelModelDataformatZipDeflaterDataFormat    `json:"zipDeflater,omitempty"`
	ZipFile        *OrgApacheCamelModelDataformatZipFileDataFormat        `json:"zipFile,omitempty"`
}

// OrgApacheCamelModelTransformerEndpointTransformerDefinition
type OrgApacheCamelModelTransformerEndpointTransformerDefinition struct {
	FromType string `json:"fromType,omitempty"`
	Ref      string `json:"ref,omitempty"`
	Scheme   string `json:"scheme,omitempty"`
	ToType   string `json:"toType,omitempty"`
	Uri      string `json:"uri,omitempty"`
}

// OrgApacheCamelModelTransformerTransformersDefinition
type OrgApacheCamelModelTransformerTransformersDefinition struct {
	CustomTransformer     *OrgApacheCamelModelTransformerCustomTransformerDefinition     `json:"customTransformer,omitempty"`
	DataFormatTransformer *OrgApacheCamelModelTransformerDataFormatTransformerDefinition `json:"dataFormatTransformer,omitempty"`
	EndpointTransformer   *OrgApacheCamelModelTransformerEndpointTransformerDefinition   `json:"endpointTransformer,omitempty"`
}

// OrgApacheCamelModelTryDefinition
type OrgApacheCamelModelTryDefinition struct {
	Description         string                                `json:"description,omitempty"`
	DoCatch             []*OrgApacheCamelModelCatchDefinition `json:"doCatch,omitempty"`
	DoFinally           *OrgApacheCamelModelFinallyDefinition `json:"doFinally,omitempty"`
	Id                  string                                `json:"id,omitempty"`
	InheritErrorHandler bool                                  `json:"inheritErrorHandler,omitempty"`
	Steps               []*RawStep                            `json:"steps,omitempty"`
}

// OrgApacheCamelModelUnmarshalDefinition
type OrgApacheCamelModelUnmarshalDefinition struct {
	AllowNullBody       bool                                                   `json:"allowNullBody,omitempty"`
	Any23               *OrgApacheCamelModelDataformatAny23DataFormat          `json:"any23,omitempty"`
	Asn1                *OrgApacheCamelModelDataformatASN1DataFormat           `json:"asn1,omitempty"`
	Avro                *OrgApacheCamelModelDataformatAvroDataFormat           `json:"avro,omitempty"`
	Barcode             *OrgApacheCamelModelDataformatBarcodeDataFormat        `json:"barcode,omitempty"`
	Base64              *OrgApacheCamelModelDataformatBase64DataFormat         `json:"base64,omitempty"`
	Bindy               *OrgApacheCamelModelDataformatBindyDataFormat          `json:"bindy,omitempty"`
	Cbor                *OrgApacheCamelModelDataformatCBORDataFormat           `json:"cbor,omitempty"`
	Crypto              *OrgApacheCamelModelDataformatCryptoDataFormat         `json:"crypto,omitempty"`
	Csv                 *OrgApacheCamelModelDataformatCsvDataFormat            `json:"csv,omitempty"`
	Custom              *OrgApacheCamelModelDataformatCustomDataFormat         `json:"custom,omitempty"`
	Description         string                                                 `json:"description,omitempty"`
	FhirJson            *OrgApacheCamelModelDataformatFhirJsonDataFormat       `json:"fhirJson,omitempty"`
	FhirXml             *OrgApacheCamelModelDataformatFhirXmlDataFormat        `json:"fhirXml,omitempty"`
	Flatpack            *OrgApacheCamelModelDataformatFlatpackDataFormat       `json:"flatpack,omitempty"`
	Grok                *OrgApacheCamelModelDataformatGrokDataFormat           `json:"grok,omitempty"`
	GzipDeflater        *OrgApacheCamelModelDataformatGzipDeflaterDataFormat   `json:"gzipDeflater,omitempty"`
	Hl7                 *OrgApacheCamelModelDataformatHL7DataFormat            `json:"hl7,omitempty"`
	Ical                *OrgApacheCamelModelDataformatIcalDataFormat           `json:"ical,omitempty"`
	Id                  string                                                 `json:"id,omitempty"`
	InheritErrorHandler bool                                                   `json:"inheritErrorHandler,omitempty"`
	JacksonXml          *OrgApacheCamelModelDataformatJacksonXMLDataFormat     `json:"jacksonXml,omitempty"`
	Jaxb                *OrgApacheCamelModelDataformatJaxbDataFormat           `json:"jaxb,omitempty"`
	Json                *OrgApacheCamelModelDataformatJsonDataFormat           `json:"json,omitempty"`
	JsonApi             *OrgApacheCamelModelDataformatJsonApiDataFormat        `json:"jsonApi,omitempty"`
	Lzf                 *OrgApacheCamelModelDataformatLZFDataFormat            `json:"lzf,omitempty"`
	MimeMultipart       *OrgApacheCamelModelDataformatMimeMultipartDataFormat  `json:"mimeMultipart,omitempty"`
	Pgp                 *OrgApacheCamelModelDataformatPGPDataFormat            `json:"pgp,omitempty"`
	Protobuf            *OrgApacheCamelModelDataformatProtobufDataFormat       `json:"protobuf,omitempty"`
	Rss                 *OrgApacheCamelModelDataformatRssDataFormat            `json:"rss,omitempty"`
	Soap                *OrgApacheCamelModelDataformatSoapDataFormat           `json:"soap,omitempty"`
	Syslog              *OrgApacheCamelModelDataformatSyslogDataFormat         `json:"syslog,omitempty"`
	TarFile             *OrgApacheCamelModelDataformatTarFileDataFormat        `json:"tarFile,omitempty"`
	Thrift              *OrgApacheCamelModelDataformatThriftDataFormat         `json:"thrift,omitempty"`
	TidyMarkup          *OrgApacheCamelModelDataformatTidyMarkupDataFormat     `json:"tidyMarkup,omitempty"`
	UnivocityCsv        *OrgApacheCamelModelDataformatUniVocityCsvDataFormat   `json:"univocityCsv,omitempty"`
	UnivocityFixed      *OrgApacheCamelModelDataformatUniVocityFixedDataFormat `json:"univocityFixed,omitempty"`
	UnivocityTsv        *OrgApacheCamelModelDataformatUniVocityTsvDataFormat   `json:"univocityTsv,omitempty"`
	XmlSecurity         *OrgApacheCamelModelDataformatXMLSecurityDataFormat    `json:"xmlSecurity,omitempty"`
	Xstream             *OrgApacheCamelModelDataformatXStreamDataFormat        `json:"xstream,omitempty"`
	Yaml                *OrgApacheCamelModelDataformatYAMLDataFormat           `json:"yaml,omitempty"`
	ZipDeflater         *OrgApacheCamelModelDataformatZipDeflaterDataFormat    `json:"zipDeflater,omitempty"`
	ZipFile             *OrgApacheCamelModelDataformatZipFileDataFormat        `json:"zipFile,omitempty"`
}

// OrgApacheCamelModelValidateDefinition
type OrgApacheCamelModelValidateDefinition struct {
	Description               string                                           `json:"description,omitempty"`
	Expression                *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	Id                        string                                           `json:"id,omitempty"`
	InheritErrorHandler       bool                                             `json:"inheritErrorHandler,omitempty"`
	PredicateExceptionFactory string                                           `json:"predicateExceptionFactory,omitempty"`
}

// OrgApacheCamelModelValidatorCustomValidatorDefinition
type OrgApacheCamelModelValidatorCustomValidatorDefinition struct {
	ClassName string `json:"className,omitempty"`
	Ref       string `json:"ref,omitempty"`
	Type      string `json:"type,omitempty"`
}

// OrgApacheCamelModelValidatorEndpointValidatorDefinition
type OrgApacheCamelModelValidatorEndpointValidatorDefinition struct {
	Ref  string `json:"ref,omitempty"`
	Type string `json:"type,omitempty"`
	Uri  string `json:"uri,omitempty"`
}

// OrgApacheCamelModelValidatorPredicateValidatorDefinition
type OrgApacheCamelModelValidatorPredicateValidatorDefinition struct {
	Expression *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	Type       string                                           `json:"type,omitempty"`
}

// OrgApacheCamelModelValidatorValidatorsDefinition
type OrgApacheCamelModelValidatorValidatorsDefinition struct {
	CustomValidator    *OrgApacheCamelModelValidatorCustomValidatorDefinition    `json:"customValidator,omitempty"`
	EndpointValidator  *OrgApacheCamelModelValidatorEndpointValidatorDefinition  `json:"endpointValidator,omitempty"`
	PredicateValidator *OrgApacheCamelModelValidatorPredicateValidatorDefinition `json:"predicateValidator,omitempty"`
}

// OrgApacheCamelModelWhenDefinition
type OrgApacheCamelModelWhenDefinition struct {
	Description         string                                           `json:"description,omitempty"`
	Expression          *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	Id                  string                                           `json:"id,omitempty"`
	InheritErrorHandler bool                                             `json:"inheritErrorHandler,omitempty"`
	Steps               []*RawStep                                       `json:"steps,omitempty"`
}

// OrgApacheCamelModelWhenSkipSendToEndpointDefinition
type OrgApacheCamelModelWhenSkipSendToEndpointDefinition struct {
	Description         string                                           `json:"description,omitempty"`
	Expression          *OrgApacheCamelModelLanguageExpressionDefinition `json:"expression,omitempty"`
	Id                  string                                           `json:"id,omitempty"`
	InheritErrorHandler bool                                             `json:"inheritErrorHandler,omitempty"`
	Steps               []*RawStep                                       `json:"steps,omitempty"`
}

// OrgApacheCamelModelWireTapDefinition
type OrgApacheCamelModelWireTapDefinition struct {
	AllowOptimisedComponents bool        `json:"allowOptimisedComponents,omitempty"`
	AutoStartComponents      bool        `json:"autoStartComponents,omitempty"`
	CacheSize                float64     `json:"cacheSize,omitempty"`
	Copy                     bool        `json:"copy,omitempty"`
	Description              string      `json:"description,omitempty"`
	DynamicUri               bool        `json:"dynamicUri,omitempty"`
	ExecutorService          string      `json:"executorService,omitempty"`
	Id                       string      `json:"id,omitempty"`
	IgnoreInvalidEndpoint    bool        `json:"ignoreInvalidEndpoint,omitempty"`
	InheritErrorHandler      bool        `json:"inheritErrorHandler,omitempty"`
	OnPrepare                string      `json:"onPrepare,omitempty"`
	Parameters               *Parameters `json:"parameters,omitempty"`
	Pattern                  string      `json:"pattern,omitempty"`
	Uri                      string      `json:"uri"`
}

// Parameters
type Parameters struct {
}

// Properties
type Properties struct {
}

// Dsl
type Dsl struct {
	Beans          []*OrgApacheCamelDslYamlDeserializersNamedBeanDefinition           `json:"beans,omitempty"`
	ErrorHandler   *OrgApacheCamelDslYamlDeserializersErrorHandlerBuilderDeserializer `json:"errorHandler,omitempty"`
	From           *OrgApacheCamelDslYamlDeserializersRouteFromDefinitionDeserializer `json:"from,omitempty"`
	OnException    *OrgApacheCamelModelOnExceptionDefinition                          `json:"onException,omitempty"`
	Rest           *OrgApacheCamelModelRestRestDefinition                             `json:"rest,omitempty"`
	Route          *OrgApacheCamelModelRouteDefinition                                `json:"route,omitempty"`
	RouteTemplate  *OrgApacheCamelModelRouteTemplateDefinition                        `json:"routeTemplate,omitempty"`
	TemplatedRoute *OrgApacheCamelModelTemplatedRouteDefinition                       `json:"templatedRoute,omitempty"`
}

func (strct *OrgApacheCamelDslYamlDeserializersNamedBeanDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "Name" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "name" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "properties" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"properties\": ")
	if tmp, err := json.Marshal(strct.Properties); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Type" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "type" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelDslYamlDeserializersNamedBeanDefinition) UnmarshalJSON(b []byte) error {
	nameReceived := false
	typeReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "name":
			if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
				return err
			}
			nameReceived = true
		case "properties":
			if err := json.Unmarshal([]byte(v), &strct.Properties); err != nil {
				return err
			}
		case "type":
			if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
				return err
			}
			typeReceived = true
		}
	}
	// check if name (a required property) was received
	if !nameReceived {
		return errors.New("\"name\" is required but was not present")
	}
	// check if type (a required property) was received
	if !typeReceived {
		return errors.New("\"type\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelDslYamlDeserializersOutputAwareFromDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "parameters" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"parameters\": ")
	if tmp, err := json.Marshal(strct.Parameters); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Steps" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "steps" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"steps\": ")
	if tmp, err := json.Marshal(strct.Steps); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Uri" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "uri" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"uri\": ")
	if tmp, err := json.Marshal(strct.Uri); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelDslYamlDeserializersOutputAwareFromDefinition) UnmarshalJSON(b []byte) error {
	stepsReceived := false
	uriReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "parameters":
			if err := json.Unmarshal([]byte(v), &strct.Parameters); err != nil {
				return err
			}
		case "steps":
			if err := json.Unmarshal([]byte(v), &strct.Steps); err != nil {
				return err
			}
			stepsReceived = true
		case "uri":
			if err := json.Unmarshal([]byte(v), &strct.Uri); err != nil {
				return err
			}
			uriReceived = true
		}
	}
	// check if steps (a required property) was received
	if !stepsReceived {
		return errors.New("\"steps\" is required but was not present")
	}
	// check if uri (a required property) was received
	if !uriReceived {
		return errors.New("\"uri\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelDslYamlDeserializersRouteFromDefinitionDeserializer) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "parameters" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"parameters\": ")
	if tmp, err := json.Marshal(strct.Parameters); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Steps" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "steps" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"steps\": ")
	if tmp, err := json.Marshal(strct.Steps); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Uri" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "uri" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"uri\": ")
	if tmp, err := json.Marshal(strct.Uri); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelDslYamlDeserializersRouteFromDefinitionDeserializer) UnmarshalJSON(b []byte) error {
	stepsReceived := false
	uriReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "parameters":
			if err := json.Unmarshal([]byte(v), &strct.Parameters); err != nil {
				return err
			}
		case "steps":
			if err := json.Unmarshal([]byte(v), &strct.Steps); err != nil {
				return err
			}
			stepsReceived = true
		case "uri":
			if err := json.Unmarshal([]byte(v), &strct.Uri); err != nil {
				return err
			}
			uriReceived = true
		}
	}
	// check if steps (a required property) was received
	if !stepsReceived {
		return errors.New("\"steps\" is required but was not present")
	}
	// check if uri (a required property) was received
	if !uriReceived {
		return errors.New("\"uri\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelAggregateDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "aggregateController" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"aggregateController\": ")
	if tmp, err := json.Marshal(strct.AggregateController); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "aggregationRepository" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"aggregationRepository\": ")
	if tmp, err := json.Marshal(strct.AggregationRepository); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "AggregationStrategy" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "aggregationStrategy" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"aggregationStrategy\": ")
	if tmp, err := json.Marshal(strct.AggregationStrategy); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "aggregationStrategyMethodAllowNull" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"aggregationStrategyMethodAllowNull\": ")
	if tmp, err := json.Marshal(strct.AggregationStrategyMethodAllowNull); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "aggregationStrategyMethodName" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"aggregationStrategyMethodName\": ")
	if tmp, err := json.Marshal(strct.AggregationStrategyMethodName); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "closeCorrelationKeyOnCompletion" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"closeCorrelationKeyOnCompletion\": ")
	if tmp, err := json.Marshal(strct.CloseCorrelationKeyOnCompletion); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "completeAllOnStop" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"completeAllOnStop\": ")
	if tmp, err := json.Marshal(strct.CompleteAllOnStop); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "completionFromBatchConsumer" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"completionFromBatchConsumer\": ")
	if tmp, err := json.Marshal(strct.CompletionFromBatchConsumer); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "completionInterval" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"completionInterval\": ")
	if tmp, err := json.Marshal(strct.CompletionInterval); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "completionOnNewCorrelationGroup" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"completionOnNewCorrelationGroup\": ")
	if tmp, err := json.Marshal(strct.CompletionOnNewCorrelationGroup); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "completionPredicate" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"completionPredicate\": ")
	if tmp, err := json.Marshal(strct.CompletionPredicate); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "completionSize" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"completionSize\": ")
	if tmp, err := json.Marshal(strct.CompletionSize); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "completionSizeExpression" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"completionSizeExpression\": ")
	if tmp, err := json.Marshal(strct.CompletionSizeExpression); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "completionTimeout" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"completionTimeout\": ")
	if tmp, err := json.Marshal(strct.CompletionTimeout); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "completionTimeoutCheckerInterval" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"completionTimeoutCheckerInterval\": ")
	if tmp, err := json.Marshal(strct.CompletionTimeoutCheckerInterval); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "completionTimeoutExpression" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"completionTimeoutExpression\": ")
	if tmp, err := json.Marshal(strct.CompletionTimeoutExpression); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "correlationExpression" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"correlationExpression\": ")
	if tmp, err := json.Marshal(strct.CorrelationExpression); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "discardOnAggregationFailure" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"discardOnAggregationFailure\": ")
	if tmp, err := json.Marshal(strct.DiscardOnAggregationFailure); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "discardOnCompletionTimeout" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"discardOnCompletionTimeout\": ")
	if tmp, err := json.Marshal(strct.DiscardOnCompletionTimeout); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "eagerCheckCompletion" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"eagerCheckCompletion\": ")
	if tmp, err := json.Marshal(strct.EagerCheckCompletion); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "executorService" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"executorService\": ")
	if tmp, err := json.Marshal(strct.ExecutorService); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "forceCompletionOnStop" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"forceCompletionOnStop\": ")
	if tmp, err := json.Marshal(strct.ForceCompletionOnStop); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "ignoreInvalidCorrelationKeys" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"ignoreInvalidCorrelationKeys\": ")
	if tmp, err := json.Marshal(strct.IgnoreInvalidCorrelationKeys); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "inheritErrorHandler" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"inheritErrorHandler\": ")
	if tmp, err := json.Marshal(strct.InheritErrorHandler); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "optimisticLockRetryPolicy" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"optimisticLockRetryPolicy\": ")
	if tmp, err := json.Marshal(strct.OptimisticLockRetryPolicy); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "optimisticLocking" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"optimisticLocking\": ")
	if tmp, err := json.Marshal(strct.OptimisticLocking); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "parallelProcessing" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"parallelProcessing\": ")
	if tmp, err := json.Marshal(strct.ParallelProcessing); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "steps" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"steps\": ")
	if tmp, err := json.Marshal(strct.Steps); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "timeoutCheckerExecutorService" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"timeoutCheckerExecutorService\": ")
	if tmp, err := json.Marshal(strct.TimeoutCheckerExecutorService); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelAggregateDefinition) UnmarshalJSON(b []byte) error {
	aggregationStrategyReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "aggregateController":
			if err := json.Unmarshal([]byte(v), &strct.AggregateController); err != nil {
				return err
			}
		case "aggregationRepository":
			if err := json.Unmarshal([]byte(v), &strct.AggregationRepository); err != nil {
				return err
			}
		case "aggregationStrategy":
			if err := json.Unmarshal([]byte(v), &strct.AggregationStrategy); err != nil {
				return err
			}
			aggregationStrategyReceived = true
		case "aggregationStrategyMethodAllowNull":
			if err := json.Unmarshal([]byte(v), &strct.AggregationStrategyMethodAllowNull); err != nil {
				return err
			}
		case "aggregationStrategyMethodName":
			if err := json.Unmarshal([]byte(v), &strct.AggregationStrategyMethodName); err != nil {
				return err
			}
		case "closeCorrelationKeyOnCompletion":
			if err := json.Unmarshal([]byte(v), &strct.CloseCorrelationKeyOnCompletion); err != nil {
				return err
			}
		case "completeAllOnStop":
			if err := json.Unmarshal([]byte(v), &strct.CompleteAllOnStop); err != nil {
				return err
			}
		case "completionFromBatchConsumer":
			if err := json.Unmarshal([]byte(v), &strct.CompletionFromBatchConsumer); err != nil {
				return err
			}
		case "completionInterval":
			if err := json.Unmarshal([]byte(v), &strct.CompletionInterval); err != nil {
				return err
			}
		case "completionOnNewCorrelationGroup":
			if err := json.Unmarshal([]byte(v), &strct.CompletionOnNewCorrelationGroup); err != nil {
				return err
			}
		case "completionPredicate":
			if err := json.Unmarshal([]byte(v), &strct.CompletionPredicate); err != nil {
				return err
			}
		case "completionSize":
			if err := json.Unmarshal([]byte(v), &strct.CompletionSize); err != nil {
				return err
			}
		case "completionSizeExpression":
			if err := json.Unmarshal([]byte(v), &strct.CompletionSizeExpression); err != nil {
				return err
			}
		case "completionTimeout":
			if err := json.Unmarshal([]byte(v), &strct.CompletionTimeout); err != nil {
				return err
			}
		case "completionTimeoutCheckerInterval":
			if err := json.Unmarshal([]byte(v), &strct.CompletionTimeoutCheckerInterval); err != nil {
				return err
			}
		case "completionTimeoutExpression":
			if err := json.Unmarshal([]byte(v), &strct.CompletionTimeoutExpression); err != nil {
				return err
			}
		case "correlationExpression":
			if err := json.Unmarshal([]byte(v), &strct.CorrelationExpression); err != nil {
				return err
			}
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "discardOnAggregationFailure":
			if err := json.Unmarshal([]byte(v), &strct.DiscardOnAggregationFailure); err != nil {
				return err
			}
		case "discardOnCompletionTimeout":
			if err := json.Unmarshal([]byte(v), &strct.DiscardOnCompletionTimeout); err != nil {
				return err
			}
		case "eagerCheckCompletion":
			if err := json.Unmarshal([]byte(v), &strct.EagerCheckCompletion); err != nil {
				return err
			}
		case "executorService":
			if err := json.Unmarshal([]byte(v), &strct.ExecutorService); err != nil {
				return err
			}
		case "forceCompletionOnStop":
			if err := json.Unmarshal([]byte(v), &strct.ForceCompletionOnStop); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "ignoreInvalidCorrelationKeys":
			if err := json.Unmarshal([]byte(v), &strct.IgnoreInvalidCorrelationKeys); err != nil {
				return err
			}
		case "inheritErrorHandler":
			if err := json.Unmarshal([]byte(v), &strct.InheritErrorHandler); err != nil {
				return err
			}
		case "optimisticLockRetryPolicy":
			if err := json.Unmarshal([]byte(v), &strct.OptimisticLockRetryPolicy); err != nil {
				return err
			}
		case "optimisticLocking":
			if err := json.Unmarshal([]byte(v), &strct.OptimisticLocking); err != nil {
				return err
			}
		case "parallelProcessing":
			if err := json.Unmarshal([]byte(v), &strct.ParallelProcessing); err != nil {
				return err
			}
		case "steps":
			if err := json.Unmarshal([]byte(v), &strct.Steps); err != nil {
				return err
			}
		case "timeoutCheckerExecutorService":
			if err := json.Unmarshal([]byte(v), &strct.TimeoutCheckerExecutorService); err != nil {
				return err
			}
		}
	}
	// check if aggregationStrategy (a required property) was received
	if !aggregationStrategyReceived {
		return errors.New("\"aggregationStrategy\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelClaimCheckDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "aggregationStrategy" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"aggregationStrategy\": ")
	if tmp, err := json.Marshal(strct.AggregationStrategy); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "aggregationStrategyMethodName" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"aggregationStrategyMethodName\": ")
	if tmp, err := json.Marshal(strct.AggregationStrategyMethodName); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "filter" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"filter\": ")
	if tmp, err := json.Marshal(strct.Filter); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "inheritErrorHandler" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"inheritErrorHandler\": ")
	if tmp, err := json.Marshal(strct.InheritErrorHandler); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "key" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Operation" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "operation" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"operation\": ")
	if tmp, err := json.Marshal(strct.Operation); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelClaimCheckDefinition) UnmarshalJSON(b []byte) error {
	operationReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "aggregationStrategy":
			if err := json.Unmarshal([]byte(v), &strct.AggregationStrategy); err != nil {
				return err
			}
		case "aggregationStrategyMethodName":
			if err := json.Unmarshal([]byte(v), &strct.AggregationStrategyMethodName); err != nil {
				return err
			}
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "filter":
			if err := json.Unmarshal([]byte(v), &strct.Filter); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "inheritErrorHandler":
			if err := json.Unmarshal([]byte(v), &strct.InheritErrorHandler); err != nil {
				return err
			}
		case "key":
			if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
				return err
			}
		case "operation":
			if err := json.Unmarshal([]byte(v), &strct.Operation); err != nil {
				return err
			}
			operationReceived = true
		}
	}
	// check if operation (a required property) was received
	if !operationReceived {
		return errors.New("\"operation\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelCloudServiceCallDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "blacklistServiceFilter" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"blacklistServiceFilter\": ")
	if tmp, err := json.Marshal(strct.BlacklistServiceFilter); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "cachingServiceDiscovery" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"cachingServiceDiscovery\": ")
	if tmp, err := json.Marshal(strct.CachingServiceDiscovery); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "combinedServiceDiscovery" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"combinedServiceDiscovery\": ")
	if tmp, err := json.Marshal(strct.CombinedServiceDiscovery); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "combinedServiceFilter" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"combinedServiceFilter\": ")
	if tmp, err := json.Marshal(strct.CombinedServiceFilter); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "component" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"component\": ")
	if tmp, err := json.Marshal(strct.Component); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "configurationRef" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"configurationRef\": ")
	if tmp, err := json.Marshal(strct.ConfigurationRef); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "consulServiceDiscovery" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"consulServiceDiscovery\": ")
	if tmp, err := json.Marshal(strct.ConsulServiceDiscovery); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "customServiceFilter" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"customServiceFilter\": ")
	if tmp, err := json.Marshal(strct.CustomServiceFilter); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "defaultLoadBalancer" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"defaultLoadBalancer\": ")
	if tmp, err := json.Marshal(strct.DefaultLoadBalancer); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "dnsServiceDiscovery" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"dnsServiceDiscovery\": ")
	if tmp, err := json.Marshal(strct.DnsServiceDiscovery); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "expression" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"expression\": ")
	if tmp, err := json.Marshal(strct.Expression); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "expressionRef" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"expressionRef\": ")
	if tmp, err := json.Marshal(strct.ExpressionRef); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "healthyServiceFilter" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"healthyServiceFilter\": ")
	if tmp, err := json.Marshal(strct.HealthyServiceFilter); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "inheritErrorHandler" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"inheritErrorHandler\": ")
	if tmp, err := json.Marshal(strct.InheritErrorHandler); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "kubernetesServiceDiscovery" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"kubernetesServiceDiscovery\": ")
	if tmp, err := json.Marshal(strct.KubernetesServiceDiscovery); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "loadBalancerRef" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"loadBalancerRef\": ")
	if tmp, err := json.Marshal(strct.LoadBalancerRef); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Name" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "name" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "passThroughServiceFilter" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"passThroughServiceFilter\": ")
	if tmp, err := json.Marshal(strct.PassThroughServiceFilter); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "pattern" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"pattern\": ")
	if tmp, err := json.Marshal(strct.Pattern); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "serviceChooserRef" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"serviceChooserRef\": ")
	if tmp, err := json.Marshal(strct.ServiceChooserRef); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "serviceDiscoveryRef" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"serviceDiscoveryRef\": ")
	if tmp, err := json.Marshal(strct.ServiceDiscoveryRef); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "serviceFilterRef" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"serviceFilterRef\": ")
	if tmp, err := json.Marshal(strct.ServiceFilterRef); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "staticServiceDiscovery" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"staticServiceDiscovery\": ")
	if tmp, err := json.Marshal(strct.StaticServiceDiscovery); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "uri" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"uri\": ")
	if tmp, err := json.Marshal(strct.Uri); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "zookeeperServiceDiscovery" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"zookeeperServiceDiscovery\": ")
	if tmp, err := json.Marshal(strct.ZookeeperServiceDiscovery); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelCloudServiceCallDefinition) UnmarshalJSON(b []byte) error {
	nameReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "blacklistServiceFilter":
			if err := json.Unmarshal([]byte(v), &strct.BlacklistServiceFilter); err != nil {
				return err
			}
		case "cachingServiceDiscovery":
			if err := json.Unmarshal([]byte(v), &strct.CachingServiceDiscovery); err != nil {
				return err
			}
		case "combinedServiceDiscovery":
			if err := json.Unmarshal([]byte(v), &strct.CombinedServiceDiscovery); err != nil {
				return err
			}
		case "combinedServiceFilter":
			if err := json.Unmarshal([]byte(v), &strct.CombinedServiceFilter); err != nil {
				return err
			}
		case "component":
			if err := json.Unmarshal([]byte(v), &strct.Component); err != nil {
				return err
			}
		case "configurationRef":
			if err := json.Unmarshal([]byte(v), &strct.ConfigurationRef); err != nil {
				return err
			}
		case "consulServiceDiscovery":
			if err := json.Unmarshal([]byte(v), &strct.ConsulServiceDiscovery); err != nil {
				return err
			}
		case "customServiceFilter":
			if err := json.Unmarshal([]byte(v), &strct.CustomServiceFilter); err != nil {
				return err
			}
		case "defaultLoadBalancer":
			if err := json.Unmarshal([]byte(v), &strct.DefaultLoadBalancer); err != nil {
				return err
			}
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "dnsServiceDiscovery":
			if err := json.Unmarshal([]byte(v), &strct.DnsServiceDiscovery); err != nil {
				return err
			}
		case "expression":
			if err := json.Unmarshal([]byte(v), &strct.Expression); err != nil {
				return err
			}
		case "expressionRef":
			if err := json.Unmarshal([]byte(v), &strct.ExpressionRef); err != nil {
				return err
			}
		case "healthyServiceFilter":
			if err := json.Unmarshal([]byte(v), &strct.HealthyServiceFilter); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "inheritErrorHandler":
			if err := json.Unmarshal([]byte(v), &strct.InheritErrorHandler); err != nil {
				return err
			}
		case "kubernetesServiceDiscovery":
			if err := json.Unmarshal([]byte(v), &strct.KubernetesServiceDiscovery); err != nil {
				return err
			}
		case "loadBalancerRef":
			if err := json.Unmarshal([]byte(v), &strct.LoadBalancerRef); err != nil {
				return err
			}
		case "name":
			if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
				return err
			}
			nameReceived = true
		case "passThroughServiceFilter":
			if err := json.Unmarshal([]byte(v), &strct.PassThroughServiceFilter); err != nil {
				return err
			}
		case "pattern":
			if err := json.Unmarshal([]byte(v), &strct.Pattern); err != nil {
				return err
			}
		case "serviceChooserRef":
			if err := json.Unmarshal([]byte(v), &strct.ServiceChooserRef); err != nil {
				return err
			}
		case "serviceDiscoveryRef":
			if err := json.Unmarshal([]byte(v), &strct.ServiceDiscoveryRef); err != nil {
				return err
			}
		case "serviceFilterRef":
			if err := json.Unmarshal([]byte(v), &strct.ServiceFilterRef); err != nil {
				return err
			}
		case "staticServiceDiscovery":
			if err := json.Unmarshal([]byte(v), &strct.StaticServiceDiscovery); err != nil {
				return err
			}
		case "uri":
			if err := json.Unmarshal([]byte(v), &strct.Uri); err != nil {
				return err
			}
		case "zookeeperServiceDiscovery":
			if err := json.Unmarshal([]byte(v), &strct.ZookeeperServiceDiscovery); err != nil {
				return err
			}
		}
	}
	// check if name (a required property) was received
	if !nameReceived {
		return errors.New("\"name\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelCloudZooKeeperServiceCallServiceDiscoveryConfiguration) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "BasePath" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "basePath" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"basePath\": ")
	if tmp, err := json.Marshal(strct.BasePath); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "connectionTimeout" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"connectionTimeout\": ")
	if tmp, err := json.Marshal(strct.ConnectionTimeout); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "namespace" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"namespace\": ")
	if tmp, err := json.Marshal(strct.Namespace); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Nodes" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "nodes" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"nodes\": ")
	if tmp, err := json.Marshal(strct.Nodes); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "properties" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"properties\": ")
	if tmp, err := json.Marshal(strct.Properties); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "reconnectBaseSleepTime" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"reconnectBaseSleepTime\": ")
	if tmp, err := json.Marshal(strct.ReconnectBaseSleepTime); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "reconnectMaxRetries" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"reconnectMaxRetries\": ")
	if tmp, err := json.Marshal(strct.ReconnectMaxRetries); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "reconnectMaxSleepTime" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"reconnectMaxSleepTime\": ")
	if tmp, err := json.Marshal(strct.ReconnectMaxSleepTime); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "sessionTimeout" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"sessionTimeout\": ")
	if tmp, err := json.Marshal(strct.SessionTimeout); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelCloudZooKeeperServiceCallServiceDiscoveryConfiguration) UnmarshalJSON(b []byte) error {
	basePathReceived := false
	nodesReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "basePath":
			if err := json.Unmarshal([]byte(v), &strct.BasePath); err != nil {
				return err
			}
			basePathReceived = true
		case "connectionTimeout":
			if err := json.Unmarshal([]byte(v), &strct.ConnectionTimeout); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "namespace":
			if err := json.Unmarshal([]byte(v), &strct.Namespace); err != nil {
				return err
			}
		case "nodes":
			if err := json.Unmarshal([]byte(v), &strct.Nodes); err != nil {
				return err
			}
			nodesReceived = true
		case "properties":
			if err := json.Unmarshal([]byte(v), &strct.Properties); err != nil {
				return err
			}
		case "reconnectBaseSleepTime":
			if err := json.Unmarshal([]byte(v), &strct.ReconnectBaseSleepTime); err != nil {
				return err
			}
		case "reconnectMaxRetries":
			if err := json.Unmarshal([]byte(v), &strct.ReconnectMaxRetries); err != nil {
				return err
			}
		case "reconnectMaxSleepTime":
			if err := json.Unmarshal([]byte(v), &strct.ReconnectMaxSleepTime); err != nil {
				return err
			}
		case "sessionTimeout":
			if err := json.Unmarshal([]byte(v), &strct.SessionTimeout); err != nil {
				return err
			}
		}
	}
	// check if basePath (a required property) was received
	if !basePathReceived {
		return errors.New("\"basePath\" is required but was not present")
	}
	// check if nodes (a required property) was received
	if !nodesReceived {
		return errors.New("\"nodes\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelConvertBodyDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "charset" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"charset\": ")
	if tmp, err := json.Marshal(strct.Charset); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "inheritErrorHandler" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"inheritErrorHandler\": ")
	if tmp, err := json.Marshal(strct.InheritErrorHandler); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "mandatory" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"mandatory\": ")
	if tmp, err := json.Marshal(strct.Mandatory); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Type" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "type" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelConvertBodyDefinition) UnmarshalJSON(b []byte) error {
	typeReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "charset":
			if err := json.Unmarshal([]byte(v), &strct.Charset); err != nil {
				return err
			}
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "inheritErrorHandler":
			if err := json.Unmarshal([]byte(v), &strct.InheritErrorHandler); err != nil {
				return err
			}
		case "mandatory":
			if err := json.Unmarshal([]byte(v), &strct.Mandatory); err != nil {
				return err
			}
		case "type":
			if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
				return err
			}
			typeReceived = true
		}
	}
	// check if type (a required property) was received
	if !typeReceived {
		return errors.New("\"type\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelDataformatBindyDataFormat) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "allowEmptyStream" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"allowEmptyStream\": ")
	if tmp, err := json.Marshal(strct.AllowEmptyStream); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "classType" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"classType\": ")
	if tmp, err := json.Marshal(strct.ClassType); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "locale" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"locale\": ")
	if tmp, err := json.Marshal(strct.Locale); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Type" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "type" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "unwrapSingleInstance" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"unwrapSingleInstance\": ")
	if tmp, err := json.Marshal(strct.UnwrapSingleInstance); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelDataformatBindyDataFormat) UnmarshalJSON(b []byte) error {
	typeReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "allowEmptyStream":
			if err := json.Unmarshal([]byte(v), &strct.AllowEmptyStream); err != nil {
				return err
			}
		case "classType":
			if err := json.Unmarshal([]byte(v), &strct.ClassType); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "locale":
			if err := json.Unmarshal([]byte(v), &strct.Locale); err != nil {
				return err
			}
		case "type":
			if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
				return err
			}
			typeReceived = true
		case "unwrapSingleInstance":
			if err := json.Unmarshal([]byte(v), &strct.UnwrapSingleInstance); err != nil {
				return err
			}
		}
	}
	// check if type (a required property) was received
	if !typeReceived {
		return errors.New("\"type\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelDataformatCustomDataFormat) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Ref" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "ref" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"ref\": ")
	if tmp, err := json.Marshal(strct.Ref); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelDataformatCustomDataFormat) UnmarshalJSON(b []byte) error {
	refReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "ref":
			if err := json.Unmarshal([]byte(v), &strct.Ref); err != nil {
				return err
			}
			refReceived = true
		}
	}
	// check if ref (a required property) was received
	if !refReceived {
		return errors.New("\"ref\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelDataformatGrokDataFormat) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "allowMultipleMatchesPerLine" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"allowMultipleMatchesPerLine\": ")
	if tmp, err := json.Marshal(strct.AllowMultipleMatchesPerLine); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "flattened" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"flattened\": ")
	if tmp, err := json.Marshal(strct.Flattened); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "namedOnly" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"namedOnly\": ")
	if tmp, err := json.Marshal(strct.NamedOnly); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Pattern" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "pattern" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"pattern\": ")
	if tmp, err := json.Marshal(strct.Pattern); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelDataformatGrokDataFormat) UnmarshalJSON(b []byte) error {
	patternReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "allowMultipleMatchesPerLine":
			if err := json.Unmarshal([]byte(v), &strct.AllowMultipleMatchesPerLine); err != nil {
				return err
			}
		case "flattened":
			if err := json.Unmarshal([]byte(v), &strct.Flattened); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "namedOnly":
			if err := json.Unmarshal([]byte(v), &strct.NamedOnly); err != nil {
				return err
			}
		case "pattern":
			if err := json.Unmarshal([]byte(v), &strct.Pattern); err != nil {
				return err
			}
			patternReceived = true
		}
	}
	// check if pattern (a required property) was received
	if !patternReceived {
		return errors.New("\"pattern\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelDataformatJaxbDataFormat) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "contentTypeHeader" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"contentTypeHeader\": ")
	if tmp, err := json.Marshal(strct.ContentTypeHeader); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "ContextPath" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "contextPath" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"contextPath\": ")
	if tmp, err := json.Marshal(strct.ContextPath); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "contextPathIsClassName" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"contextPathIsClassName\": ")
	if tmp, err := json.Marshal(strct.ContextPathIsClassName); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "encoding" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"encoding\": ")
	if tmp, err := json.Marshal(strct.Encoding); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "filterNonXmlChars" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"filterNonXmlChars\": ")
	if tmp, err := json.Marshal(strct.FilterNonXmlChars); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "fragment" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"fragment\": ")
	if tmp, err := json.Marshal(strct.Fragment); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "ignoreJaxbElement" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"ignoreJaxbElement\": ")
	if tmp, err := json.Marshal(strct.IgnoreJaxbElement); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "jaxbProviderProperties" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"jaxbProviderProperties\": ")
	if tmp, err := json.Marshal(strct.JaxbProviderProperties); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "mustBeJaxbElement" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"mustBeJaxbElement\": ")
	if tmp, err := json.Marshal(strct.MustBeJaxbElement); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "namespacePrefixRef" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"namespacePrefixRef\": ")
	if tmp, err := json.Marshal(strct.NamespacePrefixRef); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "noNamespaceSchemaLocation" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"noNamespaceSchemaLocation\": ")
	if tmp, err := json.Marshal(strct.NoNamespaceSchemaLocation); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "objectFactory" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"objectFactory\": ")
	if tmp, err := json.Marshal(strct.ObjectFactory); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "partClass" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"partClass\": ")
	if tmp, err := json.Marshal(strct.PartClass); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "partNamespace" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"partNamespace\": ")
	if tmp, err := json.Marshal(strct.PartNamespace); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "prettyPrint" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"prettyPrint\": ")
	if tmp, err := json.Marshal(strct.PrettyPrint); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "schema" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"schema\": ")
	if tmp, err := json.Marshal(strct.Schema); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "schemaLocation" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"schemaLocation\": ")
	if tmp, err := json.Marshal(strct.SchemaLocation); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "schemaSeverityLevel" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"schemaSeverityLevel\": ")
	if tmp, err := json.Marshal(strct.SchemaSeverityLevel); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "xmlStreamWriterWrapper" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"xmlStreamWriterWrapper\": ")
	if tmp, err := json.Marshal(strct.XmlStreamWriterWrapper); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelDataformatJaxbDataFormat) UnmarshalJSON(b []byte) error {
	contextPathReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "contentTypeHeader":
			if err := json.Unmarshal([]byte(v), &strct.ContentTypeHeader); err != nil {
				return err
			}
		case "contextPath":
			if err := json.Unmarshal([]byte(v), &strct.ContextPath); err != nil {
				return err
			}
			contextPathReceived = true
		case "contextPathIsClassName":
			if err := json.Unmarshal([]byte(v), &strct.ContextPathIsClassName); err != nil {
				return err
			}
		case "encoding":
			if err := json.Unmarshal([]byte(v), &strct.Encoding); err != nil {
				return err
			}
		case "filterNonXmlChars":
			if err := json.Unmarshal([]byte(v), &strct.FilterNonXmlChars); err != nil {
				return err
			}
		case "fragment":
			if err := json.Unmarshal([]byte(v), &strct.Fragment); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "ignoreJaxbElement":
			if err := json.Unmarshal([]byte(v), &strct.IgnoreJaxbElement); err != nil {
				return err
			}
		case "jaxbProviderProperties":
			if err := json.Unmarshal([]byte(v), &strct.JaxbProviderProperties); err != nil {
				return err
			}
		case "mustBeJaxbElement":
			if err := json.Unmarshal([]byte(v), &strct.MustBeJaxbElement); err != nil {
				return err
			}
		case "namespacePrefixRef":
			if err := json.Unmarshal([]byte(v), &strct.NamespacePrefixRef); err != nil {
				return err
			}
		case "noNamespaceSchemaLocation":
			if err := json.Unmarshal([]byte(v), &strct.NoNamespaceSchemaLocation); err != nil {
				return err
			}
		case "objectFactory":
			if err := json.Unmarshal([]byte(v), &strct.ObjectFactory); err != nil {
				return err
			}
		case "partClass":
			if err := json.Unmarshal([]byte(v), &strct.PartClass); err != nil {
				return err
			}
		case "partNamespace":
			if err := json.Unmarshal([]byte(v), &strct.PartNamespace); err != nil {
				return err
			}
		case "prettyPrint":
			if err := json.Unmarshal([]byte(v), &strct.PrettyPrint); err != nil {
				return err
			}
		case "schema":
			if err := json.Unmarshal([]byte(v), &strct.Schema); err != nil {
				return err
			}
		case "schemaLocation":
			if err := json.Unmarshal([]byte(v), &strct.SchemaLocation); err != nil {
				return err
			}
		case "schemaSeverityLevel":
			if err := json.Unmarshal([]byte(v), &strct.SchemaSeverityLevel); err != nil {
				return err
			}
		case "xmlStreamWriterWrapper":
			if err := json.Unmarshal([]byte(v), &strct.XmlStreamWriterWrapper); err != nil {
				return err
			}
		}
	}
	// check if contextPath (a required property) was received
	if !contextPathReceived {
		return errors.New("\"contextPath\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelDataformatSoapDataFormat) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "ContextPath" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "contextPath" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"contextPath\": ")
	if tmp, err := json.Marshal(strct.ContextPath); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "elementNameStrategyRef" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"elementNameStrategyRef\": ")
	if tmp, err := json.Marshal(strct.ElementNameStrategyRef); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "encoding" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"encoding\": ")
	if tmp, err := json.Marshal(strct.Encoding); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "namespacePrefixRef" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"namespacePrefixRef\": ")
	if tmp, err := json.Marshal(strct.NamespacePrefixRef); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "schema" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"schema\": ")
	if tmp, err := json.Marshal(strct.Schema); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "version" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"version\": ")
	if tmp, err := json.Marshal(strct.Version); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelDataformatSoapDataFormat) UnmarshalJSON(b []byte) error {
	contextPathReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "contextPath":
			if err := json.Unmarshal([]byte(v), &strct.ContextPath); err != nil {
				return err
			}
			contextPathReceived = true
		case "elementNameStrategyRef":
			if err := json.Unmarshal([]byte(v), &strct.ElementNameStrategyRef); err != nil {
				return err
			}
		case "encoding":
			if err := json.Unmarshal([]byte(v), &strct.Encoding); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "namespacePrefixRef":
			if err := json.Unmarshal([]byte(v), &strct.NamespacePrefixRef); err != nil {
				return err
			}
		case "schema":
			if err := json.Unmarshal([]byte(v), &strct.Schema); err != nil {
				return err
			}
		case "version":
			if err := json.Unmarshal([]byte(v), &strct.Version); err != nil {
				return err
			}
		}
	}
	// check if contextPath (a required property) was received
	if !contextPathReceived {
		return errors.New("\"contextPath\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelErrorhandlerDeadLetterChannelDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "deadLetterHandleNewException" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"deadLetterHandleNewException\": ")
	if tmp, err := json.Marshal(strct.DeadLetterHandleNewException); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "DeadLetterUri" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "deadLetterUri" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"deadLetterUri\": ")
	if tmp, err := json.Marshal(strct.DeadLetterUri); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "executorServiceRef" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"executorServiceRef\": ")
	if tmp, err := json.Marshal(strct.ExecutorServiceRef); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "level" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"level\": ")
	if tmp, err := json.Marshal(strct.Level); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "logName" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"logName\": ")
	if tmp, err := json.Marshal(strct.LogName); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "loggerRef" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"loggerRef\": ")
	if tmp, err := json.Marshal(strct.LoggerRef); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "onExceptionOccurredRef" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"onExceptionOccurredRef\": ")
	if tmp, err := json.Marshal(strct.OnExceptionOccurredRef); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "onPrepareFailureRef" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"onPrepareFailureRef\": ")
	if tmp, err := json.Marshal(strct.OnPrepareFailureRef); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "onRedeliveryRef" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"onRedeliveryRef\": ")
	if tmp, err := json.Marshal(strct.OnRedeliveryRef); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "redeliveryPolicy" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"redeliveryPolicy\": ")
	if tmp, err := json.Marshal(strct.RedeliveryPolicy); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "redeliveryPolicyRef" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"redeliveryPolicyRef\": ")
	if tmp, err := json.Marshal(strct.RedeliveryPolicyRef); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "retryWhileRef" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"retryWhileRef\": ")
	if tmp, err := json.Marshal(strct.RetryWhileRef); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "useOriginalBody" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"useOriginalBody\": ")
	if tmp, err := json.Marshal(strct.UseOriginalBody); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "useOriginalMessage" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"useOriginalMessage\": ")
	if tmp, err := json.Marshal(strct.UseOriginalMessage); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelErrorhandlerDeadLetterChannelDefinition) UnmarshalJSON(b []byte) error {
	deadLetterUriReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "deadLetterHandleNewException":
			if err := json.Unmarshal([]byte(v), &strct.DeadLetterHandleNewException); err != nil {
				return err
			}
		case "deadLetterUri":
			if err := json.Unmarshal([]byte(v), &strct.DeadLetterUri); err != nil {
				return err
			}
			deadLetterUriReceived = true
		case "executorServiceRef":
			if err := json.Unmarshal([]byte(v), &strct.ExecutorServiceRef); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "level":
			if err := json.Unmarshal([]byte(v), &strct.Level); err != nil {
				return err
			}
		case "logName":
			if err := json.Unmarshal([]byte(v), &strct.LogName); err != nil {
				return err
			}
		case "loggerRef":
			if err := json.Unmarshal([]byte(v), &strct.LoggerRef); err != nil {
				return err
			}
		case "onExceptionOccurredRef":
			if err := json.Unmarshal([]byte(v), &strct.OnExceptionOccurredRef); err != nil {
				return err
			}
		case "onPrepareFailureRef":
			if err := json.Unmarshal([]byte(v), &strct.OnPrepareFailureRef); err != nil {
				return err
			}
		case "onRedeliveryRef":
			if err := json.Unmarshal([]byte(v), &strct.OnRedeliveryRef); err != nil {
				return err
			}
		case "redeliveryPolicy":
			if err := json.Unmarshal([]byte(v), &strct.RedeliveryPolicy); err != nil {
				return err
			}
		case "redeliveryPolicyRef":
			if err := json.Unmarshal([]byte(v), &strct.RedeliveryPolicyRef); err != nil {
				return err
			}
		case "retryWhileRef":
			if err := json.Unmarshal([]byte(v), &strct.RetryWhileRef); err != nil {
				return err
			}
		case "useOriginalBody":
			if err := json.Unmarshal([]byte(v), &strct.UseOriginalBody); err != nil {
				return err
			}
		case "useOriginalMessage":
			if err := json.Unmarshal([]byte(v), &strct.UseOriginalMessage); err != nil {
				return err
			}
		}
	}
	// check if deadLetterUri (a required property) was received
	if !deadLetterUriReceived {
		return errors.New("\"deadLetterUri\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelErrorhandlerErrorHandlerRefDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Ref" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "ref" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"ref\": ")
	if tmp, err := json.Marshal(strct.Ref); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelErrorhandlerErrorHandlerRefDefinition) UnmarshalJSON(b []byte) error {
	refReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "ref":
			if err := json.Unmarshal([]byte(v), &strct.Ref); err != nil {
				return err
			}
			refReceived = true
		}
	}
	// check if ref (a required property) was received
	if !refReceived {
		return errors.New("\"ref\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelFromDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "parameters" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"parameters\": ")
	if tmp, err := json.Marshal(strct.Parameters); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Steps" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "steps" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"steps\": ")
	if tmp, err := json.Marshal(strct.Steps); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Uri" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "uri" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"uri\": ")
	if tmp, err := json.Marshal(strct.Uri); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelFromDefinition) UnmarshalJSON(b []byte) error {
	stepsReceived := false
	uriReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "parameters":
			if err := json.Unmarshal([]byte(v), &strct.Parameters); err != nil {
				return err
			}
		case "steps":
			if err := json.Unmarshal([]byte(v), &strct.Steps); err != nil {
				return err
			}
			stepsReceived = true
		case "uri":
			if err := json.Unmarshal([]byte(v), &strct.Uri); err != nil {
				return err
			}
			uriReceived = true
		}
	}
	// check if steps (a required property) was received
	if !stepsReceived {
		return errors.New("\"steps\" is required but was not present")
	}
	// check if uri (a required property) was received
	if !uriReceived {
		return errors.New("\"uri\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelGlobalOptionDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "Key" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "key" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Value" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "value" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelGlobalOptionDefinition) UnmarshalJSON(b []byte) error {
	keyReceived := false
	valueReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "key":
			if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
				return err
			}
			keyReceived = true
		case "value":
			if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
				return err
			}
			valueReceived = true
		}
	}
	// check if key (a required property) was received
	if !keyReceived {
		return errors.New("\"key\" is required but was not present")
	}
	// check if value (a required property) was received
	if !valueReceived {
		return errors.New("\"value\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelIdempotentConsumerDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "completionEager" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"completionEager\": ")
	if tmp, err := json.Marshal(strct.CompletionEager); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "eager" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"eager\": ")
	if tmp, err := json.Marshal(strct.Eager); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "expression" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"expression\": ")
	if tmp, err := json.Marshal(strct.Expression); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "IdempotentRepository" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "idempotentRepository" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"idempotentRepository\": ")
	if tmp, err := json.Marshal(strct.IdempotentRepository); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "inheritErrorHandler" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"inheritErrorHandler\": ")
	if tmp, err := json.Marshal(strct.InheritErrorHandler); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "removeOnFailure" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"removeOnFailure\": ")
	if tmp, err := json.Marshal(strct.RemoveOnFailure); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "skipDuplicate" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"skipDuplicate\": ")
	if tmp, err := json.Marshal(strct.SkipDuplicate); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "steps" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"steps\": ")
	if tmp, err := json.Marshal(strct.Steps); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelIdempotentConsumerDefinition) UnmarshalJSON(b []byte) error {
	idempotentRepositoryReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "completionEager":
			if err := json.Unmarshal([]byte(v), &strct.CompletionEager); err != nil {
				return err
			}
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "eager":
			if err := json.Unmarshal([]byte(v), &strct.Eager); err != nil {
				return err
			}
		case "expression":
			if err := json.Unmarshal([]byte(v), &strct.Expression); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "idempotentRepository":
			if err := json.Unmarshal([]byte(v), &strct.IdempotentRepository); err != nil {
				return err
			}
			idempotentRepositoryReceived = true
		case "inheritErrorHandler":
			if err := json.Unmarshal([]byte(v), &strct.InheritErrorHandler); err != nil {
				return err
			}
		case "removeOnFailure":
			if err := json.Unmarshal([]byte(v), &strct.RemoveOnFailure); err != nil {
				return err
			}
		case "skipDuplicate":
			if err := json.Unmarshal([]byte(v), &strct.SkipDuplicate); err != nil {
				return err
			}
		case "steps":
			if err := json.Unmarshal([]byte(v), &strct.Steps); err != nil {
				return err
			}
		}
	}
	// check if idempotentRepository (a required property) was received
	if !idempotentRepositoryReceived {
		return errors.New("\"idempotentRepository\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelInOnlyDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "inheritErrorHandler" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"inheritErrorHandler\": ")
	if tmp, err := json.Marshal(strct.InheritErrorHandler); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "parameters" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"parameters\": ")
	if tmp, err := json.Marshal(strct.Parameters); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Uri" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "uri" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"uri\": ")
	if tmp, err := json.Marshal(strct.Uri); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelInOnlyDefinition) UnmarshalJSON(b []byte) error {
	uriReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "inheritErrorHandler":
			if err := json.Unmarshal([]byte(v), &strct.InheritErrorHandler); err != nil {
				return err
			}
		case "parameters":
			if err := json.Unmarshal([]byte(v), &strct.Parameters); err != nil {
				return err
			}
		case "uri":
			if err := json.Unmarshal([]byte(v), &strct.Uri); err != nil {
				return err
			}
			uriReceived = true
		}
	}
	// check if uri (a required property) was received
	if !uriReceived {
		return errors.New("\"uri\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelInOutDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "inheritErrorHandler" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"inheritErrorHandler\": ")
	if tmp, err := json.Marshal(strct.InheritErrorHandler); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "parameters" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"parameters\": ")
	if tmp, err := json.Marshal(strct.Parameters); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Uri" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "uri" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"uri\": ")
	if tmp, err := json.Marshal(strct.Uri); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelInOutDefinition) UnmarshalJSON(b []byte) error {
	uriReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "inheritErrorHandler":
			if err := json.Unmarshal([]byte(v), &strct.InheritErrorHandler); err != nil {
				return err
			}
		case "parameters":
			if err := json.Unmarshal([]byte(v), &strct.Parameters); err != nil {
				return err
			}
		case "uri":
			if err := json.Unmarshal([]byte(v), &strct.Uri); err != nil {
				return err
			}
			uriReceived = true
		}
	}
	// check if uri (a required property) was received
	if !uriReceived {
		return errors.New("\"uri\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelInputTypeDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Urn" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "urn" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"urn\": ")
	if tmp, err := json.Marshal(strct.Urn); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "validate" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"validate\": ")
	if tmp, err := json.Marshal(strct.Validate); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelInputTypeDefinition) UnmarshalJSON(b []byte) error {
	urnReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "urn":
			if err := json.Unmarshal([]byte(v), &strct.Urn); err != nil {
				return err
			}
			urnReceived = true
		case "validate":
			if err := json.Unmarshal([]byte(v), &strct.Validate); err != nil {
				return err
			}
		}
	}
	// check if urn (a required property) was received
	if !urnReceived {
		return errors.New("\"urn\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelInterceptSendToEndpointDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "afterUri" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"afterUri\": ")
	if tmp, err := json.Marshal(strct.AfterUri); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "inheritErrorHandler" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"inheritErrorHandler\": ")
	if tmp, err := json.Marshal(strct.InheritErrorHandler); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "skipSendToOriginalEndpoint" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"skipSendToOriginalEndpoint\": ")
	if tmp, err := json.Marshal(strct.SkipSendToOriginalEndpoint); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "steps" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"steps\": ")
	if tmp, err := json.Marshal(strct.Steps); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Uri" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "uri" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"uri\": ")
	if tmp, err := json.Marshal(strct.Uri); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelInterceptSendToEndpointDefinition) UnmarshalJSON(b []byte) error {
	uriReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "afterUri":
			if err := json.Unmarshal([]byte(v), &strct.AfterUri); err != nil {
				return err
			}
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "inheritErrorHandler":
			if err := json.Unmarshal([]byte(v), &strct.InheritErrorHandler); err != nil {
				return err
			}
		case "skipSendToOriginalEndpoint":
			if err := json.Unmarshal([]byte(v), &strct.SkipSendToOriginalEndpoint); err != nil {
				return err
			}
		case "steps":
			if err := json.Unmarshal([]byte(v), &strct.Steps); err != nil {
				return err
			}
		case "uri":
			if err := json.Unmarshal([]byte(v), &strct.Uri); err != nil {
				return err
			}
			uriReceived = true
		}
	}
	// check if uri (a required property) was received
	if !uriReceived {
		return errors.New("\"uri\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelKameletDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "inheritErrorHandler" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"inheritErrorHandler\": ")
	if tmp, err := json.Marshal(strct.InheritErrorHandler); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Name" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "name" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "parameters" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"parameters\": ")
	if tmp, err := json.Marshal(strct.Parameters); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "steps" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"steps\": ")
	if tmp, err := json.Marshal(strct.Steps); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelKameletDefinition) UnmarshalJSON(b []byte) error {
	nameReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "inheritErrorHandler":
			if err := json.Unmarshal([]byte(v), &strct.InheritErrorHandler); err != nil {
				return err
			}
		case "name":
			if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
				return err
			}
			nameReceived = true
		case "parameters":
			if err := json.Unmarshal([]byte(v), &strct.Parameters); err != nil {
				return err
			}
		case "steps":
			if err := json.Unmarshal([]byte(v), &strct.Steps); err != nil {
				return err
			}
		}
	}
	// check if name (a required property) was received
	if !nameReceived {
		return errors.New("\"name\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelLanguageCSimpleExpression) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "Expression" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "expression" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"expression\": ")
	if tmp, err := json.Marshal(strct.Expression); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "resultType" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"resultType\": ")
	if tmp, err := json.Marshal(strct.ResultType); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "trim" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"trim\": ")
	if tmp, err := json.Marshal(strct.Trim); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelLanguageCSimpleExpression) UnmarshalJSON(b []byte) error {
	expressionReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "expression":
			if err := json.Unmarshal([]byte(v), &strct.Expression); err != nil {
				return err
			}
			expressionReceived = true
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "resultType":
			if err := json.Unmarshal([]byte(v), &strct.ResultType); err != nil {
				return err
			}
		case "trim":
			if err := json.Unmarshal([]byte(v), &strct.Trim); err != nil {
				return err
			}
		}
	}
	// check if expression (a required property) was received
	if !expressionReceived {
		return errors.New("\"expression\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelLanguageConstantExpression) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "Expression" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "expression" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"expression\": ")
	if tmp, err := json.Marshal(strct.Expression); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "resultType" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"resultType\": ")
	if tmp, err := json.Marshal(strct.ResultType); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "trim" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"trim\": ")
	if tmp, err := json.Marshal(strct.Trim); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelLanguageConstantExpression) UnmarshalJSON(b []byte) error {
	expressionReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "expression":
			if err := json.Unmarshal([]byte(v), &strct.Expression); err != nil {
				return err
			}
			expressionReceived = true
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "resultType":
			if err := json.Unmarshal([]byte(v), &strct.ResultType); err != nil {
				return err
			}
		case "trim":
			if err := json.Unmarshal([]byte(v), &strct.Trim); err != nil {
				return err
			}
		}
	}
	// check if expression (a required property) was received
	if !expressionReceived {
		return errors.New("\"expression\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelLanguageDatasonnetExpression) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "bodyMediaType" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"bodyMediaType\": ")
	if tmp, err := json.Marshal(strct.BodyMediaType); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Expression" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "expression" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"expression\": ")
	if tmp, err := json.Marshal(strct.Expression); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "outputMediaType" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"outputMediaType\": ")
	if tmp, err := json.Marshal(strct.OutputMediaType); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "resultType" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"resultType\": ")
	if tmp, err := json.Marshal(strct.ResultType); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "trim" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"trim\": ")
	if tmp, err := json.Marshal(strct.Trim); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelLanguageDatasonnetExpression) UnmarshalJSON(b []byte) error {
	expressionReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "bodyMediaType":
			if err := json.Unmarshal([]byte(v), &strct.BodyMediaType); err != nil {
				return err
			}
		case "expression":
			if err := json.Unmarshal([]byte(v), &strct.Expression); err != nil {
				return err
			}
			expressionReceived = true
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "outputMediaType":
			if err := json.Unmarshal([]byte(v), &strct.OutputMediaType); err != nil {
				return err
			}
		case "resultType":
			if err := json.Unmarshal([]byte(v), &strct.ResultType); err != nil {
				return err
			}
		case "trim":
			if err := json.Unmarshal([]byte(v), &strct.Trim); err != nil {
				return err
			}
		}
	}
	// check if expression (a required property) was received
	if !expressionReceived {
		return errors.New("\"expression\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelLanguageExchangePropertyExpression) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "Expression" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "expression" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"expression\": ")
	if tmp, err := json.Marshal(strct.Expression); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "trim" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"trim\": ")
	if tmp, err := json.Marshal(strct.Trim); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelLanguageExchangePropertyExpression) UnmarshalJSON(b []byte) error {
	expressionReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "expression":
			if err := json.Unmarshal([]byte(v), &strct.Expression); err != nil {
				return err
			}
			expressionReceived = true
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "trim":
			if err := json.Unmarshal([]byte(v), &strct.Trim); err != nil {
				return err
			}
		}
	}
	// check if expression (a required property) was received
	if !expressionReceived {
		return errors.New("\"expression\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelLanguageGroovyExpression) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "Expression" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "expression" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"expression\": ")
	if tmp, err := json.Marshal(strct.Expression); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "trim" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"trim\": ")
	if tmp, err := json.Marshal(strct.Trim); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelLanguageGroovyExpression) UnmarshalJSON(b []byte) error {
	expressionReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "expression":
			if err := json.Unmarshal([]byte(v), &strct.Expression); err != nil {
				return err
			}
			expressionReceived = true
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "trim":
			if err := json.Unmarshal([]byte(v), &strct.Trim); err != nil {
				return err
			}
		}
	}
	// check if expression (a required property) was received
	if !expressionReceived {
		return errors.New("\"expression\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelLanguageHeaderExpression) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "Expression" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "expression" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"expression\": ")
	if tmp, err := json.Marshal(strct.Expression); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "trim" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"trim\": ")
	if tmp, err := json.Marshal(strct.Trim); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelLanguageHeaderExpression) UnmarshalJSON(b []byte) error {
	expressionReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "expression":
			if err := json.Unmarshal([]byte(v), &strct.Expression); err != nil {
				return err
			}
			expressionReceived = true
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "trim":
			if err := json.Unmarshal([]byte(v), &strct.Trim); err != nil {
				return err
			}
		}
	}
	// check if expression (a required property) was received
	if !expressionReceived {
		return errors.New("\"expression\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelLanguageHl7TerserExpression) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "Expression" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "expression" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"expression\": ")
	if tmp, err := json.Marshal(strct.Expression); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "trim" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"trim\": ")
	if tmp, err := json.Marshal(strct.Trim); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelLanguageHl7TerserExpression) UnmarshalJSON(b []byte) error {
	expressionReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "expression":
			if err := json.Unmarshal([]byte(v), &strct.Expression); err != nil {
				return err
			}
			expressionReceived = true
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "trim":
			if err := json.Unmarshal([]byte(v), &strct.Trim); err != nil {
				return err
			}
		}
	}
	// check if expression (a required property) was received
	if !expressionReceived {
		return errors.New("\"expression\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelLanguageJoorExpression) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "Expression" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "expression" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"expression\": ")
	if tmp, err := json.Marshal(strct.Expression); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "preCompile" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"preCompile\": ")
	if tmp, err := json.Marshal(strct.PreCompile); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "resultType" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"resultType\": ")
	if tmp, err := json.Marshal(strct.ResultType); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "singleQuotes" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"singleQuotes\": ")
	if tmp, err := json.Marshal(strct.SingleQuotes); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "trim" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"trim\": ")
	if tmp, err := json.Marshal(strct.Trim); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelLanguageJoorExpression) UnmarshalJSON(b []byte) error {
	expressionReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "expression":
			if err := json.Unmarshal([]byte(v), &strct.Expression); err != nil {
				return err
			}
			expressionReceived = true
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "preCompile":
			if err := json.Unmarshal([]byte(v), &strct.PreCompile); err != nil {
				return err
			}
		case "resultType":
			if err := json.Unmarshal([]byte(v), &strct.ResultType); err != nil {
				return err
			}
		case "singleQuotes":
			if err := json.Unmarshal([]byte(v), &strct.SingleQuotes); err != nil {
				return err
			}
		case "trim":
			if err := json.Unmarshal([]byte(v), &strct.Trim); err != nil {
				return err
			}
		}
	}
	// check if expression (a required property) was received
	if !expressionReceived {
		return errors.New("\"expression\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelLanguageJqExpression) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "Expression" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "expression" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"expression\": ")
	if tmp, err := json.Marshal(strct.Expression); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "headerName" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"headerName\": ")
	if tmp, err := json.Marshal(strct.HeaderName); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "resultType" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"resultType\": ")
	if tmp, err := json.Marshal(strct.ResultType); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "trim" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"trim\": ")
	if tmp, err := json.Marshal(strct.Trim); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelLanguageJqExpression) UnmarshalJSON(b []byte) error {
	expressionReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "expression":
			if err := json.Unmarshal([]byte(v), &strct.Expression); err != nil {
				return err
			}
			expressionReceived = true
		case "headerName":
			if err := json.Unmarshal([]byte(v), &strct.HeaderName); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "resultType":
			if err := json.Unmarshal([]byte(v), &strct.ResultType); err != nil {
				return err
			}
		case "trim":
			if err := json.Unmarshal([]byte(v), &strct.Trim); err != nil {
				return err
			}
		}
	}
	// check if expression (a required property) was received
	if !expressionReceived {
		return errors.New("\"expression\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelLanguageJsonPathExpression) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "allowEasyPredicate" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"allowEasyPredicate\": ")
	if tmp, err := json.Marshal(strct.AllowEasyPredicate); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "allowSimple" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"allowSimple\": ")
	if tmp, err := json.Marshal(strct.AllowSimple); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Expression" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "expression" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"expression\": ")
	if tmp, err := json.Marshal(strct.Expression); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "headerName" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"headerName\": ")
	if tmp, err := json.Marshal(strct.HeaderName); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "option" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"option\": ")
	if tmp, err := json.Marshal(strct.Option); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "resultType" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"resultType\": ")
	if tmp, err := json.Marshal(strct.ResultType); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "suppressExceptions" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"suppressExceptions\": ")
	if tmp, err := json.Marshal(strct.SuppressExceptions); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "trim" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"trim\": ")
	if tmp, err := json.Marshal(strct.Trim); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "writeAsString" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"writeAsString\": ")
	if tmp, err := json.Marshal(strct.WriteAsString); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelLanguageJsonPathExpression) UnmarshalJSON(b []byte) error {
	expressionReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "allowEasyPredicate":
			if err := json.Unmarshal([]byte(v), &strct.AllowEasyPredicate); err != nil {
				return err
			}
		case "allowSimple":
			if err := json.Unmarshal([]byte(v), &strct.AllowSimple); err != nil {
				return err
			}
		case "expression":
			if err := json.Unmarshal([]byte(v), &strct.Expression); err != nil {
				return err
			}
			expressionReceived = true
		case "headerName":
			if err := json.Unmarshal([]byte(v), &strct.HeaderName); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "option":
			if err := json.Unmarshal([]byte(v), &strct.Option); err != nil {
				return err
			}
		case "resultType":
			if err := json.Unmarshal([]byte(v), &strct.ResultType); err != nil {
				return err
			}
		case "suppressExceptions":
			if err := json.Unmarshal([]byte(v), &strct.SuppressExceptions); err != nil {
				return err
			}
		case "trim":
			if err := json.Unmarshal([]byte(v), &strct.Trim); err != nil {
				return err
			}
		case "writeAsString":
			if err := json.Unmarshal([]byte(v), &strct.WriteAsString); err != nil {
				return err
			}
		}
	}
	// check if expression (a required property) was received
	if !expressionReceived {
		return errors.New("\"expression\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelLanguageLanguageExpression) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "Expression" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "expression" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"expression\": ")
	if tmp, err := json.Marshal(strct.Expression); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Language" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "language" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"language\": ")
	if tmp, err := json.Marshal(strct.Language); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "trim" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"trim\": ")
	if tmp, err := json.Marshal(strct.Trim); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelLanguageLanguageExpression) UnmarshalJSON(b []byte) error {
	expressionReceived := false
	languageReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "expression":
			if err := json.Unmarshal([]byte(v), &strct.Expression); err != nil {
				return err
			}
			expressionReceived = true
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "language":
			if err := json.Unmarshal([]byte(v), &strct.Language); err != nil {
				return err
			}
			languageReceived = true
		case "trim":
			if err := json.Unmarshal([]byte(v), &strct.Trim); err != nil {
				return err
			}
		}
	}
	// check if expression (a required property) was received
	if !expressionReceived {
		return errors.New("\"expression\" is required but was not present")
	}
	// check if language (a required property) was received
	if !languageReceived {
		return errors.New("\"language\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelLanguageMvelExpression) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "Expression" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "expression" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"expression\": ")
	if tmp, err := json.Marshal(strct.Expression); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "trim" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"trim\": ")
	if tmp, err := json.Marshal(strct.Trim); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelLanguageMvelExpression) UnmarshalJSON(b []byte) error {
	expressionReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "expression":
			if err := json.Unmarshal([]byte(v), &strct.Expression); err != nil {
				return err
			}
			expressionReceived = true
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "trim":
			if err := json.Unmarshal([]byte(v), &strct.Trim); err != nil {
				return err
			}
		}
	}
	// check if expression (a required property) was received
	if !expressionReceived {
		return errors.New("\"expression\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelLanguageOgnlExpression) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "Expression" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "expression" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"expression\": ")
	if tmp, err := json.Marshal(strct.Expression); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "trim" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"trim\": ")
	if tmp, err := json.Marshal(strct.Trim); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelLanguageOgnlExpression) UnmarshalJSON(b []byte) error {
	expressionReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "expression":
			if err := json.Unmarshal([]byte(v), &strct.Expression); err != nil {
				return err
			}
			expressionReceived = true
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "trim":
			if err := json.Unmarshal([]byte(v), &strct.Trim); err != nil {
				return err
			}
		}
	}
	// check if expression (a required property) was received
	if !expressionReceived {
		return errors.New("\"expression\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelLanguageRefExpression) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "Expression" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "expression" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"expression\": ")
	if tmp, err := json.Marshal(strct.Expression); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "trim" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"trim\": ")
	if tmp, err := json.Marshal(strct.Trim); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelLanguageRefExpression) UnmarshalJSON(b []byte) error {
	expressionReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "expression":
			if err := json.Unmarshal([]byte(v), &strct.Expression); err != nil {
				return err
			}
			expressionReceived = true
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "trim":
			if err := json.Unmarshal([]byte(v), &strct.Trim); err != nil {
				return err
			}
		}
	}
	// check if expression (a required property) was received
	if !expressionReceived {
		return errors.New("\"expression\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelLanguageSimpleExpression) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "Expression" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "expression" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"expression\": ")
	if tmp, err := json.Marshal(strct.Expression); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "resultType" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"resultType\": ")
	if tmp, err := json.Marshal(strct.ResultType); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "trim" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"trim\": ")
	if tmp, err := json.Marshal(strct.Trim); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelLanguageSimpleExpression) UnmarshalJSON(b []byte) error {
	expressionReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "expression":
			if err := json.Unmarshal([]byte(v), &strct.Expression); err != nil {
				return err
			}
			expressionReceived = true
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "resultType":
			if err := json.Unmarshal([]byte(v), &strct.ResultType); err != nil {
				return err
			}
		case "trim":
			if err := json.Unmarshal([]byte(v), &strct.Trim); err != nil {
				return err
			}
		}
	}
	// check if expression (a required property) was received
	if !expressionReceived {
		return errors.New("\"expression\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelLanguageSpELExpression) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "Expression" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "expression" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"expression\": ")
	if tmp, err := json.Marshal(strct.Expression); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "trim" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"trim\": ")
	if tmp, err := json.Marshal(strct.Trim); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelLanguageSpELExpression) UnmarshalJSON(b []byte) error {
	expressionReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "expression":
			if err := json.Unmarshal([]byte(v), &strct.Expression); err != nil {
				return err
			}
			expressionReceived = true
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "trim":
			if err := json.Unmarshal([]byte(v), &strct.Trim); err != nil {
				return err
			}
		}
	}
	// check if expression (a required property) was received
	if !expressionReceived {
		return errors.New("\"expression\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelLanguageTokenizerExpression) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "endToken" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"endToken\": ")
	if tmp, err := json.Marshal(strct.EndToken); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "group" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"group\": ")
	if tmp, err := json.Marshal(strct.Group); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "groupDelimiter" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"groupDelimiter\": ")
	if tmp, err := json.Marshal(strct.GroupDelimiter); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "headerName" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"headerName\": ")
	if tmp, err := json.Marshal(strct.HeaderName); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "includeTokens" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"includeTokens\": ")
	if tmp, err := json.Marshal(strct.IncludeTokens); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "inheritNamespaceTagName" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"inheritNamespaceTagName\": ")
	if tmp, err := json.Marshal(strct.InheritNamespaceTagName); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "regex" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"regex\": ")
	if tmp, err := json.Marshal(strct.Regex); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "skipFirst" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"skipFirst\": ")
	if tmp, err := json.Marshal(strct.SkipFirst); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Token" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "token" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"token\": ")
	if tmp, err := json.Marshal(strct.Token); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "trim" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"trim\": ")
	if tmp, err := json.Marshal(strct.Trim); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "xml" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"xml\": ")
	if tmp, err := json.Marshal(strct.Xml); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelLanguageTokenizerExpression) UnmarshalJSON(b []byte) error {
	tokenReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "endToken":
			if err := json.Unmarshal([]byte(v), &strct.EndToken); err != nil {
				return err
			}
		case "group":
			if err := json.Unmarshal([]byte(v), &strct.Group); err != nil {
				return err
			}
		case "groupDelimiter":
			if err := json.Unmarshal([]byte(v), &strct.GroupDelimiter); err != nil {
				return err
			}
		case "headerName":
			if err := json.Unmarshal([]byte(v), &strct.HeaderName); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "includeTokens":
			if err := json.Unmarshal([]byte(v), &strct.IncludeTokens); err != nil {
				return err
			}
		case "inheritNamespaceTagName":
			if err := json.Unmarshal([]byte(v), &strct.InheritNamespaceTagName); err != nil {
				return err
			}
		case "regex":
			if err := json.Unmarshal([]byte(v), &strct.Regex); err != nil {
				return err
			}
		case "skipFirst":
			if err := json.Unmarshal([]byte(v), &strct.SkipFirst); err != nil {
				return err
			}
		case "token":
			if err := json.Unmarshal([]byte(v), &strct.Token); err != nil {
				return err
			}
			tokenReceived = true
		case "trim":
			if err := json.Unmarshal([]byte(v), &strct.Trim); err != nil {
				return err
			}
		case "xml":
			if err := json.Unmarshal([]byte(v), &strct.Xml); err != nil {
				return err
			}
		}
	}
	// check if token (a required property) was received
	if !tokenReceived {
		return errors.New("\"token\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelLanguageXPathExpression) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "documentType" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"documentType\": ")
	if tmp, err := json.Marshal(strct.DocumentType); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Expression" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "expression" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"expression\": ")
	if tmp, err := json.Marshal(strct.Expression); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "factoryRef" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"factoryRef\": ")
	if tmp, err := json.Marshal(strct.FactoryRef); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "headerName" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"headerName\": ")
	if tmp, err := json.Marshal(strct.HeaderName); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "logNamespaces" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"logNamespaces\": ")
	if tmp, err := json.Marshal(strct.LogNamespaces); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "objectModel" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"objectModel\": ")
	if tmp, err := json.Marshal(strct.ObjectModel); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "preCompile" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"preCompile\": ")
	if tmp, err := json.Marshal(strct.PreCompile); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "resultType" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"resultType\": ")
	if tmp, err := json.Marshal(strct.ResultType); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "saxon" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"saxon\": ")
	if tmp, err := json.Marshal(strct.Saxon); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "threadSafety" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"threadSafety\": ")
	if tmp, err := json.Marshal(strct.ThreadSafety); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "trim" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"trim\": ")
	if tmp, err := json.Marshal(strct.Trim); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelLanguageXPathExpression) UnmarshalJSON(b []byte) error {
	expressionReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "documentType":
			if err := json.Unmarshal([]byte(v), &strct.DocumentType); err != nil {
				return err
			}
		case "expression":
			if err := json.Unmarshal([]byte(v), &strct.Expression); err != nil {
				return err
			}
			expressionReceived = true
		case "factoryRef":
			if err := json.Unmarshal([]byte(v), &strct.FactoryRef); err != nil {
				return err
			}
		case "headerName":
			if err := json.Unmarshal([]byte(v), &strct.HeaderName); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "logNamespaces":
			if err := json.Unmarshal([]byte(v), &strct.LogNamespaces); err != nil {
				return err
			}
		case "objectModel":
			if err := json.Unmarshal([]byte(v), &strct.ObjectModel); err != nil {
				return err
			}
		case "preCompile":
			if err := json.Unmarshal([]byte(v), &strct.PreCompile); err != nil {
				return err
			}
		case "resultType":
			if err := json.Unmarshal([]byte(v), &strct.ResultType); err != nil {
				return err
			}
		case "saxon":
			if err := json.Unmarshal([]byte(v), &strct.Saxon); err != nil {
				return err
			}
		case "threadSafety":
			if err := json.Unmarshal([]byte(v), &strct.ThreadSafety); err != nil {
				return err
			}
		case "trim":
			if err := json.Unmarshal([]byte(v), &strct.Trim); err != nil {
				return err
			}
		}
	}
	// check if expression (a required property) was received
	if !expressionReceived {
		return errors.New("\"expression\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelLanguageXQueryExpression) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "configurationRef" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"configurationRef\": ")
	if tmp, err := json.Marshal(strct.ConfigurationRef); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Expression" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "expression" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"expression\": ")
	if tmp, err := json.Marshal(strct.Expression); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "headerName" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"headerName\": ")
	if tmp, err := json.Marshal(strct.HeaderName); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "trim" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"trim\": ")
	if tmp, err := json.Marshal(strct.Trim); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "type" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelLanguageXQueryExpression) UnmarshalJSON(b []byte) error {
	expressionReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "configurationRef":
			if err := json.Unmarshal([]byte(v), &strct.ConfigurationRef); err != nil {
				return err
			}
		case "expression":
			if err := json.Unmarshal([]byte(v), &strct.Expression); err != nil {
				return err
			}
			expressionReceived = true
		case "headerName":
			if err := json.Unmarshal([]byte(v), &strct.HeaderName); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "trim":
			if err := json.Unmarshal([]byte(v), &strct.Trim); err != nil {
				return err
			}
		case "type":
			if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
				return err
			}
		}
	}
	// check if expression (a required property) was received
	if !expressionReceived {
		return errors.New("\"expression\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelLoadbalancerCustomLoadBalancerDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Ref" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "ref" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"ref\": ")
	if tmp, err := json.Marshal(strct.Ref); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelLoadbalancerCustomLoadBalancerDefinition) UnmarshalJSON(b []byte) error {
	refReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "ref":
			if err := json.Unmarshal([]byte(v), &strct.Ref); err != nil {
				return err
			}
			refReceived = true
		}
	}
	// check if ref (a required property) was received
	if !refReceived {
		return errors.New("\"ref\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelLoadbalancerWeightedLoadBalancerDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "DistributionRatio" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "distributionRatio" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"distributionRatio\": ")
	if tmp, err := json.Marshal(strct.DistributionRatio); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "distributionRatioDelimiter" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"distributionRatioDelimiter\": ")
	if tmp, err := json.Marshal(strct.DistributionRatioDelimiter); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "roundRobin" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"roundRobin\": ")
	if tmp, err := json.Marshal(strct.RoundRobin); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelLoadbalancerWeightedLoadBalancerDefinition) UnmarshalJSON(b []byte) error {
	distributionRatioReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "distributionRatio":
			if err := json.Unmarshal([]byte(v), &strct.DistributionRatio); err != nil {
				return err
			}
			distributionRatioReceived = true
		case "distributionRatioDelimiter":
			if err := json.Unmarshal([]byte(v), &strct.DistributionRatioDelimiter); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "roundRobin":
			if err := json.Unmarshal([]byte(v), &strct.RoundRobin); err != nil {
				return err
			}
		}
	}
	// check if distributionRatio (a required property) was received
	if !distributionRatioReceived {
		return errors.New("\"distributionRatio\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelLogDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "inheritErrorHandler" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"inheritErrorHandler\": ")
	if tmp, err := json.Marshal(strct.InheritErrorHandler); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "logName" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"logName\": ")
	if tmp, err := json.Marshal(strct.LogName); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "logger" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"logger\": ")
	if tmp, err := json.Marshal(strct.Logger); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "loggingLevel" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"loggingLevel\": ")
	if tmp, err := json.Marshal(strct.LoggingLevel); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "marker" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"marker\": ")
	if tmp, err := json.Marshal(strct.Marker); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Message" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "message" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"message\": ")
	if tmp, err := json.Marshal(strct.Message); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelLogDefinition) UnmarshalJSON(b []byte) error {
	messageReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "inheritErrorHandler":
			if err := json.Unmarshal([]byte(v), &strct.InheritErrorHandler); err != nil {
				return err
			}
		case "logName":
			if err := json.Unmarshal([]byte(v), &strct.LogName); err != nil {
				return err
			}
		case "logger":
			if err := json.Unmarshal([]byte(v), &strct.Logger); err != nil {
				return err
			}
		case "loggingLevel":
			if err := json.Unmarshal([]byte(v), &strct.LoggingLevel); err != nil {
				return err
			}
		case "marker":
			if err := json.Unmarshal([]byte(v), &strct.Marker); err != nil {
				return err
			}
		case "message":
			if err := json.Unmarshal([]byte(v), &strct.Message); err != nil {
				return err
			}
			messageReceived = true
		}
	}
	// check if message (a required property) was received
	if !messageReceived {
		return errors.New("\"message\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelOutputTypeDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Urn" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "urn" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"urn\": ")
	if tmp, err := json.Marshal(strct.Urn); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "validate" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"validate\": ")
	if tmp, err := json.Marshal(strct.Validate); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelOutputTypeDefinition) UnmarshalJSON(b []byte) error {
	urnReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "urn":
			if err := json.Unmarshal([]byte(v), &strct.Urn); err != nil {
				return err
			}
			urnReceived = true
		case "validate":
			if err := json.Unmarshal([]byte(v), &strct.Validate); err != nil {
				return err
			}
		}
	}
	// check if urn (a required property) was received
	if !urnReceived {
		return errors.New("\"urn\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelPausableDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "ConsumerListener" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "consumerListener" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"consumerListener\": ")
	if tmp, err := json.Marshal(strct.ConsumerListener); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "inheritErrorHandler" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"inheritErrorHandler\": ")
	if tmp, err := json.Marshal(strct.InheritErrorHandler); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "UntilCheck" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "untilCheck" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"untilCheck\": ")
	if tmp, err := json.Marshal(strct.UntilCheck); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelPausableDefinition) UnmarshalJSON(b []byte) error {
	consumerListenerReceived := false
	untilCheckReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "consumerListener":
			if err := json.Unmarshal([]byte(v), &strct.ConsumerListener); err != nil {
				return err
			}
			consumerListenerReceived = true
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "inheritErrorHandler":
			if err := json.Unmarshal([]byte(v), &strct.InheritErrorHandler); err != nil {
				return err
			}
		case "untilCheck":
			if err := json.Unmarshal([]byte(v), &strct.UntilCheck); err != nil {
				return err
			}
			untilCheckReceived = true
		}
	}
	// check if consumerListener (a required property) was received
	if !consumerListenerReceived {
		return errors.New("\"consumerListener\" is required but was not present")
	}
	// check if untilCheck (a required property) was received
	if !untilCheckReceived {
		return errors.New("\"untilCheck\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelPolicyDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "inheritErrorHandler" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"inheritErrorHandler\": ")
	if tmp, err := json.Marshal(strct.InheritErrorHandler); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Ref" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "ref" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"ref\": ")
	if tmp, err := json.Marshal(strct.Ref); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "steps" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"steps\": ")
	if tmp, err := json.Marshal(strct.Steps); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelPolicyDefinition) UnmarshalJSON(b []byte) error {
	refReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "inheritErrorHandler":
			if err := json.Unmarshal([]byte(v), &strct.InheritErrorHandler); err != nil {
				return err
			}
		case "ref":
			if err := json.Unmarshal([]byte(v), &strct.Ref); err != nil {
				return err
			}
			refReceived = true
		case "steps":
			if err := json.Unmarshal([]byte(v), &strct.Steps); err != nil {
				return err
			}
		}
	}
	// check if ref (a required property) was received
	if !refReceived {
		return errors.New("\"ref\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelProcessDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "inheritErrorHandler" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"inheritErrorHandler\": ")
	if tmp, err := json.Marshal(strct.InheritErrorHandler); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Ref" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "ref" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"ref\": ")
	if tmp, err := json.Marshal(strct.Ref); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelProcessDefinition) UnmarshalJSON(b []byte) error {
	refReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "inheritErrorHandler":
			if err := json.Unmarshal([]byte(v), &strct.InheritErrorHandler); err != nil {
				return err
			}
		case "ref":
			if err := json.Unmarshal([]byte(v), &strct.Ref); err != nil {
				return err
			}
			refReceived = true
		}
	}
	// check if ref (a required property) was received
	if !refReceived {
		return errors.New("\"ref\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelPropertyDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "Key" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "key" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Value" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "value" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelPropertyDefinition) UnmarshalJSON(b []byte) error {
	keyReceived := false
	valueReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "key":
			if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
				return err
			}
			keyReceived = true
		case "value":
			if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
				return err
			}
			valueReceived = true
		}
	}
	// check if key (a required property) was received
	if !keyReceived {
		return errors.New("\"key\" is required but was not present")
	}
	// check if value (a required property) was received
	if !valueReceived {
		return errors.New("\"value\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelPropertyExpressionDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "expression" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"expression\": ")
	if tmp, err := json.Marshal(strct.Expression); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Key" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "key" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelPropertyExpressionDefinition) UnmarshalJSON(b []byte) error {
	keyReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "expression":
			if err := json.Unmarshal([]byte(v), &strct.Expression); err != nil {
				return err
			}
		case "key":
			if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
				return err
			}
			keyReceived = true
		}
	}
	// check if key (a required property) was received
	if !keyReceived {
		return errors.New("\"key\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRemoveHeaderDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "inheritErrorHandler" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"inheritErrorHandler\": ")
	if tmp, err := json.Marshal(strct.InheritErrorHandler); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Name" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "name" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRemoveHeaderDefinition) UnmarshalJSON(b []byte) error {
	nameReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "inheritErrorHandler":
			if err := json.Unmarshal([]byte(v), &strct.InheritErrorHandler); err != nil {
				return err
			}
		case "name":
			if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
				return err
			}
			nameReceived = true
		}
	}
	// check if name (a required property) was received
	if !nameReceived {
		return errors.New("\"name\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRemoveHeadersDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "excludePattern" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"excludePattern\": ")
	if tmp, err := json.Marshal(strct.ExcludePattern); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "inheritErrorHandler" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"inheritErrorHandler\": ")
	if tmp, err := json.Marshal(strct.InheritErrorHandler); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Pattern" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "pattern" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"pattern\": ")
	if tmp, err := json.Marshal(strct.Pattern); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRemoveHeadersDefinition) UnmarshalJSON(b []byte) error {
	patternReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "excludePattern":
			if err := json.Unmarshal([]byte(v), &strct.ExcludePattern); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "inheritErrorHandler":
			if err := json.Unmarshal([]byte(v), &strct.InheritErrorHandler); err != nil {
				return err
			}
		case "pattern":
			if err := json.Unmarshal([]byte(v), &strct.Pattern); err != nil {
				return err
			}
			patternReceived = true
		}
	}
	// check if pattern (a required property) was received
	if !patternReceived {
		return errors.New("\"pattern\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRemovePropertiesDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "excludePattern" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"excludePattern\": ")
	if tmp, err := json.Marshal(strct.ExcludePattern); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "inheritErrorHandler" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"inheritErrorHandler\": ")
	if tmp, err := json.Marshal(strct.InheritErrorHandler); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Pattern" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "pattern" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"pattern\": ")
	if tmp, err := json.Marshal(strct.Pattern); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRemovePropertiesDefinition) UnmarshalJSON(b []byte) error {
	patternReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "excludePattern":
			if err := json.Unmarshal([]byte(v), &strct.ExcludePattern); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "inheritErrorHandler":
			if err := json.Unmarshal([]byte(v), &strct.InheritErrorHandler); err != nil {
				return err
			}
		case "pattern":
			if err := json.Unmarshal([]byte(v), &strct.Pattern); err != nil {
				return err
			}
			patternReceived = true
		}
	}
	// check if pattern (a required property) was received
	if !patternReceived {
		return errors.New("\"pattern\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRemovePropertyDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "inheritErrorHandler" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"inheritErrorHandler\": ")
	if tmp, err := json.Marshal(strct.InheritErrorHandler); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Name" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "name" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRemovePropertyDefinition) UnmarshalJSON(b []byte) error {
	nameReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "inheritErrorHandler":
			if err := json.Unmarshal([]byte(v), &strct.InheritErrorHandler); err != nil {
				return err
			}
		case "name":
			if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
				return err
			}
			nameReceived = true
		}
	}
	// check if name (a required property) was received
	if !nameReceived {
		return errors.New("\"name\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelResequenceDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "batchConfig" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"batchConfig\": ")
	if tmp, err := json.Marshal(strct.BatchConfig); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Expression" field is required
	if strct.Expression == nil {
		return nil, errors.New("expression is a required field")
	}
	// Marshal the "expression" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"expression\": ")
	if tmp, err := json.Marshal(strct.Expression); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "inheritErrorHandler" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"inheritErrorHandler\": ")
	if tmp, err := json.Marshal(strct.InheritErrorHandler); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "steps" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"steps\": ")
	if tmp, err := json.Marshal(strct.Steps); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "streamConfig" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"streamConfig\": ")
	if tmp, err := json.Marshal(strct.StreamConfig); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelResequenceDefinition) UnmarshalJSON(b []byte) error {
	expressionReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "batchConfig":
			if err := json.Unmarshal([]byte(v), &strct.BatchConfig); err != nil {
				return err
			}
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "expression":
			if err := json.Unmarshal([]byte(v), &strct.Expression); err != nil {
				return err
			}
			expressionReceived = true
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "inheritErrorHandler":
			if err := json.Unmarshal([]byte(v), &strct.InheritErrorHandler); err != nil {
				return err
			}
		case "steps":
			if err := json.Unmarshal([]byte(v), &strct.Steps); err != nil {
				return err
			}
		case "streamConfig":
			if err := json.Unmarshal([]byte(v), &strct.StreamConfig); err != nil {
				return err
			}
		}
	}
	// check if expression (a required property) was received
	if !expressionReceived {
		return errors.New("\"expression\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRestApiKeyDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "inCookie" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"inCookie\": ")
	if tmp, err := json.Marshal(strct.InCookie); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "inHeader" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"inHeader\": ")
	if tmp, err := json.Marshal(strct.InHeader); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "inQuery" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"inQuery\": ")
	if tmp, err := json.Marshal(strct.InQuery); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Key" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "key" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Name" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "name" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRestApiKeyDefinition) UnmarshalJSON(b []byte) error {
	keyReceived := false
	nameReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "inCookie":
			if err := json.Unmarshal([]byte(v), &strct.InCookie); err != nil {
				return err
			}
		case "inHeader":
			if err := json.Unmarshal([]byte(v), &strct.InHeader); err != nil {
				return err
			}
		case "inQuery":
			if err := json.Unmarshal([]byte(v), &strct.InQuery); err != nil {
				return err
			}
		case "key":
			if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
				return err
			}
			keyReceived = true
		case "name":
			if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
				return err
			}
			nameReceived = true
		}
	}
	// check if key (a required property) was received
	if !keyReceived {
		return errors.New("\"key\" is required but was not present")
	}
	// check if name (a required property) was received
	if !nameReceived {
		return errors.New("\"name\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRestBasicAuthDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Key" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "key" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRestBasicAuthDefinition) UnmarshalJSON(b []byte) error {
	keyReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "key":
			if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
				return err
			}
			keyReceived = true
		}
	}
	// check if key (a required property) was received
	if !keyReceived {
		return errors.New("\"key\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRestBearerTokenDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "format" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"format\": ")
	if tmp, err := json.Marshal(strct.Format); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Key" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "key" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRestBearerTokenDefinition) UnmarshalJSON(b []byte) error {
	keyReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "format":
			if err := json.Unmarshal([]byte(v), &strct.Format); err != nil {
				return err
			}
		case "key":
			if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
				return err
			}
			keyReceived = true
		}
	}
	// check if key (a required property) was received
	if !keyReceived {
		return errors.New("\"key\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRestContextRefDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "Ref" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "ref" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"ref\": ")
	if tmp, err := json.Marshal(strct.Ref); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRestContextRefDefinition) UnmarshalJSON(b []byte) error {
	refReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "ref":
			if err := json.Unmarshal([]byte(v), &strct.Ref); err != nil {
				return err
			}
			refReceived = true
		}
	}
	// check if ref (a required property) was received
	if !refReceived {
		return errors.New("\"ref\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRestMutualTLSDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Key" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "key" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRestMutualTLSDefinition) UnmarshalJSON(b []byte) error {
	keyReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "key":
			if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
				return err
			}
			keyReceived = true
		}
	}
	// check if key (a required property) was received
	if !keyReceived {
		return errors.New("\"key\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRestOAuth2Definition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "authorizationUrl" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"authorizationUrl\": ")
	if tmp, err := json.Marshal(strct.AuthorizationUrl); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "flow" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"flow\": ")
	if tmp, err := json.Marshal(strct.Flow); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Key" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "key" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "refreshUrl" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"refreshUrl\": ")
	if tmp, err := json.Marshal(strct.RefreshUrl); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "scopes" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"scopes\": ")
	if tmp, err := json.Marshal(strct.Scopes); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "tokenUrl" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"tokenUrl\": ")
	if tmp, err := json.Marshal(strct.TokenUrl); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRestOAuth2Definition) UnmarshalJSON(b []byte) error {
	keyReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "authorizationUrl":
			if err := json.Unmarshal([]byte(v), &strct.AuthorizationUrl); err != nil {
				return err
			}
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "flow":
			if err := json.Unmarshal([]byte(v), &strct.Flow); err != nil {
				return err
			}
		case "key":
			if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
				return err
			}
			keyReceived = true
		case "refreshUrl":
			if err := json.Unmarshal([]byte(v), &strct.RefreshUrl); err != nil {
				return err
			}
		case "scopes":
			if err := json.Unmarshal([]byte(v), &strct.Scopes); err != nil {
				return err
			}
		case "tokenUrl":
			if err := json.Unmarshal([]byte(v), &strct.TokenUrl); err != nil {
				return err
			}
		}
	}
	// check if key (a required property) was received
	if !keyReceived {
		return errors.New("\"key\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRestOpenIdConnectDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Key" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "key" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Url" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "url" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"url\": ")
	if tmp, err := json.Marshal(strct.Url); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRestOpenIdConnectDefinition) UnmarshalJSON(b []byte) error {
	keyReceived := false
	urlReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "key":
			if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
				return err
			}
			keyReceived = true
		case "url":
			if err := json.Unmarshal([]byte(v), &strct.Url); err != nil {
				return err
			}
			urlReceived = true
		}
	}
	// check if key (a required property) was received
	if !keyReceived {
		return errors.New("\"key\" is required but was not present")
	}
	// check if url (a required property) was received
	if !urlReceived {
		return errors.New("\"url\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRestParamDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "arrayType" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"arrayType\": ")
	if tmp, err := json.Marshal(strct.ArrayType); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "collectionFormat" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"collectionFormat\": ")
	if tmp, err := json.Marshal(strct.CollectionFormat); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "dataFormat" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"dataFormat\": ")
	if tmp, err := json.Marshal(strct.DataFormat); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "dataType" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"dataType\": ")
	if tmp, err := json.Marshal(strct.DataType); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "defaultValue" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"defaultValue\": ")
	if tmp, err := json.Marshal(strct.DefaultValue); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "examples" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"examples\": ")
	if tmp, err := json.Marshal(strct.Examples); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Name" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "name" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "required" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"required\": ")
	if tmp, err := json.Marshal(strct.Required); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Type" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "type" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "value" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRestParamDefinition) UnmarshalJSON(b []byte) error {
	nameReceived := false
	typeReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "arrayType":
			if err := json.Unmarshal([]byte(v), &strct.ArrayType); err != nil {
				return err
			}
		case "collectionFormat":
			if err := json.Unmarshal([]byte(v), &strct.CollectionFormat); err != nil {
				return err
			}
		case "dataFormat":
			if err := json.Unmarshal([]byte(v), &strct.DataFormat); err != nil {
				return err
			}
		case "dataType":
			if err := json.Unmarshal([]byte(v), &strct.DataType); err != nil {
				return err
			}
		case "defaultValue":
			if err := json.Unmarshal([]byte(v), &strct.DefaultValue); err != nil {
				return err
			}
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "examples":
			if err := json.Unmarshal([]byte(v), &strct.Examples); err != nil {
				return err
			}
		case "name":
			if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
				return err
			}
			nameReceived = true
		case "required":
			if err := json.Unmarshal([]byte(v), &strct.Required); err != nil {
				return err
			}
		case "type":
			if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
				return err
			}
			typeReceived = true
		case "value":
			if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
				return err
			}
		}
	}
	// check if name (a required property) was received
	if !nameReceived {
		return errors.New("\"name\" is required but was not present")
	}
	// check if type (a required property) was received
	if !typeReceived {
		return errors.New("\"type\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRestResponseHeaderDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "arrayType" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"arrayType\": ")
	if tmp, err := json.Marshal(strct.ArrayType); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "collectionFormat" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"collectionFormat\": ")
	if tmp, err := json.Marshal(strct.CollectionFormat); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "dataFormat" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"dataFormat\": ")
	if tmp, err := json.Marshal(strct.DataFormat); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "dataType" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"dataType\": ")
	if tmp, err := json.Marshal(strct.DataType); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "example" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"example\": ")
	if tmp, err := json.Marshal(strct.Example); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Name" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "name" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "value" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRestResponseHeaderDefinition) UnmarshalJSON(b []byte) error {
	nameReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "arrayType":
			if err := json.Unmarshal([]byte(v), &strct.ArrayType); err != nil {
				return err
			}
		case "collectionFormat":
			if err := json.Unmarshal([]byte(v), &strct.CollectionFormat); err != nil {
				return err
			}
		case "dataFormat":
			if err := json.Unmarshal([]byte(v), &strct.DataFormat); err != nil {
				return err
			}
		case "dataType":
			if err := json.Unmarshal([]byte(v), &strct.DataType); err != nil {
				return err
			}
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "example":
			if err := json.Unmarshal([]byte(v), &strct.Example); err != nil {
				return err
			}
		case "name":
			if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
				return err
			}
			nameReceived = true
		case "value":
			if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
				return err
			}
		}
	}
	// check if name (a required property) was received
	if !nameReceived {
		return errors.New("\"name\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRestResponseMessageDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "code" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"code\": ")
	if tmp, err := json.Marshal(strct.Code); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "examples" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"examples\": ")
	if tmp, err := json.Marshal(strct.Examples); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "header" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"header\": ")
	if tmp, err := json.Marshal(strct.Header); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Message" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "message" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"message\": ")
	if tmp, err := json.Marshal(strct.Message); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "responseModel" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"responseModel\": ")
	if tmp, err := json.Marshal(strct.ResponseModel); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRestResponseMessageDefinition) UnmarshalJSON(b []byte) error {
	messageReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "code":
			if err := json.Unmarshal([]byte(v), &strct.Code); err != nil {
				return err
			}
		case "examples":
			if err := json.Unmarshal([]byte(v), &strct.Examples); err != nil {
				return err
			}
		case "header":
			if err := json.Unmarshal([]byte(v), &strct.Header); err != nil {
				return err
			}
		case "message":
			if err := json.Unmarshal([]byte(v), &strct.Message); err != nil {
				return err
			}
			messageReceived = true
		case "responseModel":
			if err := json.Unmarshal([]byte(v), &strct.ResponseModel); err != nil {
				return err
			}
		}
	}
	// check if message (a required property) was received
	if !messageReceived {
		return errors.New("\"message\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRestRestPropertyDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "Key" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "key" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Value" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "value" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRestRestPropertyDefinition) UnmarshalJSON(b []byte) error {
	keyReceived := false
	valueReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "key":
			if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
				return err
			}
			keyReceived = true
		case "value":
			if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
				return err
			}
			valueReceived = true
		}
	}
	// check if key (a required property) was received
	if !keyReceived {
		return errors.New("\"key\" is required but was not present")
	}
	// check if value (a required property) was received
	if !valueReceived {
		return errors.New("\"value\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRestSecurityDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "Key" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "key" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "scopes" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"scopes\": ")
	if tmp, err := json.Marshal(strct.Scopes); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRestSecurityDefinition) UnmarshalJSON(b []byte) error {
	keyReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "key":
			if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
				return err
			}
			keyReceived = true
		case "scopes":
			if err := json.Unmarshal([]byte(v), &strct.Scopes); err != nil {
				return err
			}
		}
	}
	// check if key (a required property) was received
	if !keyReceived {
		return errors.New("\"key\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelResumableDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "inheritErrorHandler" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"inheritErrorHandler\": ")
	if tmp, err := json.Marshal(strct.InheritErrorHandler); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "intermittent" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"intermittent\": ")
	if tmp, err := json.Marshal(strct.Intermittent); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "ResumeStrategy" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "resumeStrategy" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"resumeStrategy\": ")
	if tmp, err := json.Marshal(strct.ResumeStrategy); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelResumableDefinition) UnmarshalJSON(b []byte) error {
	resumeStrategyReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "inheritErrorHandler":
			if err := json.Unmarshal([]byte(v), &strct.InheritErrorHandler); err != nil {
				return err
			}
		case "intermittent":
			if err := json.Unmarshal([]byte(v), &strct.Intermittent); err != nil {
				return err
			}
		case "resumeStrategy":
			if err := json.Unmarshal([]byte(v), &strct.ResumeStrategy); err != nil {
				return err
			}
			resumeStrategyReceived = true
		}
	}
	// check if resumeStrategy (a required property) was received
	if !resumeStrategyReceived {
		return errors.New("\"resumeStrategy\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRouteBuilderDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Ref" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "ref" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"ref\": ")
	if tmp, err := json.Marshal(strct.Ref); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRouteBuilderDefinition) UnmarshalJSON(b []byte) error {
	refReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "ref":
			if err := json.Unmarshal([]byte(v), &strct.Ref); err != nil {
				return err
			}
			refReceived = true
		}
	}
	// check if ref (a required property) was received
	if !refReceived {
		return errors.New("\"ref\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRouteConfigurationContextRefDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "Ref" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "ref" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"ref\": ")
	if tmp, err := json.Marshal(strct.Ref); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRouteConfigurationContextRefDefinition) UnmarshalJSON(b []byte) error {
	refReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "ref":
			if err := json.Unmarshal([]byte(v), &strct.Ref); err != nil {
				return err
			}
			refReceived = true
		}
	}
	// check if ref (a required property) was received
	if !refReceived {
		return errors.New("\"ref\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRouteContextRefDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "Ref" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "ref" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"ref\": ")
	if tmp, err := json.Marshal(strct.Ref); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRouteContextRefDefinition) UnmarshalJSON(b []byte) error {
	refReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "ref":
			if err := json.Unmarshal([]byte(v), &strct.Ref); err != nil {
				return err
			}
			refReceived = true
		}
	}
	// check if ref (a required property) was received
	if !refReceived {
		return errors.New("\"ref\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRouteDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "autoStartup" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"autoStartup\": ")
	if tmp, err := json.Marshal(strct.AutoStartup); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "From" field is required
	if strct.From == nil {
		return nil, errors.New("from is a required field")
	}
	// Marshal the "from" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"from\": ")
	if tmp, err := json.Marshal(strct.From); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "group" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"group\": ")
	if tmp, err := json.Marshal(strct.Group); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "precondition" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"precondition\": ")
	if tmp, err := json.Marshal(strct.Precondition); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "routeConfigurationId" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"routeConfigurationId\": ")
	if tmp, err := json.Marshal(strct.RouteConfigurationId); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "streamCaching" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"streamCaching\": ")
	if tmp, err := json.Marshal(strct.StreamCaching); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRouteDefinition) UnmarshalJSON(b []byte) error {
	fromReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "autoStartup":
			if err := json.Unmarshal([]byte(v), &strct.AutoStartup); err != nil {
				return err
			}
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "from":
			if err := json.Unmarshal([]byte(v), &strct.From); err != nil {
				return err
			}
			fromReceived = true
		case "group":
			if err := json.Unmarshal([]byte(v), &strct.Group); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "precondition":
			if err := json.Unmarshal([]byte(v), &strct.Precondition); err != nil {
				return err
			}
		case "routeConfigurationId":
			if err := json.Unmarshal([]byte(v), &strct.RouteConfigurationId); err != nil {
				return err
			}
		case "streamCaching":
			if err := json.Unmarshal([]byte(v), &strct.StreamCaching); err != nil {
				return err
			}
		}
	}
	// check if from (a required property) was received
	if !fromReceived {
		return errors.New("\"from\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRouteTemplateBeanDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "beanType" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"beanType\": ")
	if tmp, err := json.Marshal(strct.BeanType); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Name" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "name" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "properties" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"properties\": ")
	if tmp, err := json.Marshal(strct.Properties); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "property" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"property\": ")
	if tmp, err := json.Marshal(strct.Property); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "script" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"script\": ")
	if tmp, err := json.Marshal(strct.Script); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Type" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "type" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRouteTemplateBeanDefinition) UnmarshalJSON(b []byte) error {
	nameReceived := false
	typeReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "beanType":
			if err := json.Unmarshal([]byte(v), &strct.BeanType); err != nil {
				return err
			}
		case "name":
			if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
				return err
			}
			nameReceived = true
		case "properties":
			if err := json.Unmarshal([]byte(v), &strct.Properties); err != nil {
				return err
			}
		case "property":
			if err := json.Unmarshal([]byte(v), &strct.Property); err != nil {
				return err
			}
		case "script":
			if err := json.Unmarshal([]byte(v), &strct.Script); err != nil {
				return err
			}
		case "type":
			if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
				return err
			}
			typeReceived = true
		}
	}
	// check if name (a required property) was received
	if !nameReceived {
		return errors.New("\"name\" is required but was not present")
	}
	// check if type (a required property) was received
	if !typeReceived {
		return errors.New("\"type\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRouteTemplateDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "beans" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"beans\": ")
	if tmp, err := json.Marshal(strct.Beans); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "From" field is required
	if strct.From == nil {
		return nil, errors.New("from is a required field")
	}
	// Marshal the "from" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"from\": ")
	if tmp, err := json.Marshal(strct.From); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Id" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "parameters" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"parameters\": ")
	if tmp, err := json.Marshal(strct.Parameters); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRouteTemplateDefinition) UnmarshalJSON(b []byte) error {
	fromReceived := false
	idReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "beans":
			if err := json.Unmarshal([]byte(v), &strct.Beans); err != nil {
				return err
			}
		case "from":
			if err := json.Unmarshal([]byte(v), &strct.From); err != nil {
				return err
			}
			fromReceived = true
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
			idReceived = true
		case "parameters":
			if err := json.Unmarshal([]byte(v), &strct.Parameters); err != nil {
				return err
			}
		}
	}
	// check if from (a required property) was received
	if !fromReceived {
		return errors.New("\"from\" is required but was not present")
	}
	// check if id (a required property) was received
	if !idReceived {
		return errors.New("\"id\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelRouteTemplateParameterDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "defaultValue" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"defaultValue\": ")
	if tmp, err := json.Marshal(strct.DefaultValue); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Name" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "name" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "required" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"required\": ")
	if tmp, err := json.Marshal(strct.Required); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelRouteTemplateParameterDefinition) UnmarshalJSON(b []byte) error {
	nameReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "defaultValue":
			if err := json.Unmarshal([]byte(v), &strct.DefaultValue); err != nil {
				return err
			}
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "name":
			if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
				return err
			}
			nameReceived = true
		case "required":
			if err := json.Unmarshal([]byte(v), &strct.Required); err != nil {
				return err
			}
		}
	}
	// check if name (a required property) was received
	if !nameReceived {
		return errors.New("\"name\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelSagaActionUriDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "inheritErrorHandler" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"inheritErrorHandler\": ")
	if tmp, err := json.Marshal(strct.InheritErrorHandler); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "parameters" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"parameters\": ")
	if tmp, err := json.Marshal(strct.Parameters); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Uri" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "uri" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"uri\": ")
	if tmp, err := json.Marshal(strct.Uri); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelSagaActionUriDefinition) UnmarshalJSON(b []byte) error {
	uriReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "inheritErrorHandler":
			if err := json.Unmarshal([]byte(v), &strct.InheritErrorHandler); err != nil {
				return err
			}
		case "parameters":
			if err := json.Unmarshal([]byte(v), &strct.Parameters); err != nil {
				return err
			}
		case "uri":
			if err := json.Unmarshal([]byte(v), &strct.Uri); err != nil {
				return err
			}
			uriReceived = true
		}
	}
	// check if uri (a required property) was received
	if !uriReceived {
		return errors.New("\"uri\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelSetExchangePatternDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "inheritErrorHandler" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"inheritErrorHandler\": ")
	if tmp, err := json.Marshal(strct.InheritErrorHandler); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Pattern" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "pattern" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"pattern\": ")
	if tmp, err := json.Marshal(strct.Pattern); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelSetExchangePatternDefinition) UnmarshalJSON(b []byte) error {
	patternReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "inheritErrorHandler":
			if err := json.Unmarshal([]byte(v), &strct.InheritErrorHandler); err != nil {
				return err
			}
		case "pattern":
			if err := json.Unmarshal([]byte(v), &strct.Pattern); err != nil {
				return err
			}
			patternReceived = true
		}
	}
	// check if pattern (a required property) was received
	if !patternReceived {
		return errors.New("\"pattern\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelSetHeaderDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "expression" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"expression\": ")
	if tmp, err := json.Marshal(strct.Expression); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "inheritErrorHandler" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"inheritErrorHandler\": ")
	if tmp, err := json.Marshal(strct.InheritErrorHandler); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Name" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "name" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelSetHeaderDefinition) UnmarshalJSON(b []byte) error {
	nameReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "expression":
			if err := json.Unmarshal([]byte(v), &strct.Expression); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "inheritErrorHandler":
			if err := json.Unmarshal([]byte(v), &strct.InheritErrorHandler); err != nil {
				return err
			}
		case "name":
			if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
				return err
			}
			nameReceived = true
		}
	}
	// check if name (a required property) was received
	if !nameReceived {
		return errors.New("\"name\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelSetPropertyDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "expression" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"expression\": ")
	if tmp, err := json.Marshal(strct.Expression); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "inheritErrorHandler" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"inheritErrorHandler\": ")
	if tmp, err := json.Marshal(strct.InheritErrorHandler); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Name" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "name" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelSetPropertyDefinition) UnmarshalJSON(b []byte) error {
	nameReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "expression":
			if err := json.Unmarshal([]byte(v), &strct.Expression); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "inheritErrorHandler":
			if err := json.Unmarshal([]byte(v), &strct.InheritErrorHandler); err != nil {
				return err
			}
		case "name":
			if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
				return err
			}
			nameReceived = true
		}
	}
	// check if name (a required property) was received
	if !nameReceived {
		return errors.New("\"name\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelTemplatedRouteBeanDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "beanType" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"beanType\": ")
	if tmp, err := json.Marshal(strct.BeanType); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Name" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "name" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "properties" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"properties\": ")
	if tmp, err := json.Marshal(strct.Properties); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "property" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"property\": ")
	if tmp, err := json.Marshal(strct.Property); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "script" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"script\": ")
	if tmp, err := json.Marshal(strct.Script); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Type" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "type" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelTemplatedRouteBeanDefinition) UnmarshalJSON(b []byte) error {
	nameReceived := false
	typeReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "beanType":
			if err := json.Unmarshal([]byte(v), &strct.BeanType); err != nil {
				return err
			}
		case "name":
			if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
				return err
			}
			nameReceived = true
		case "properties":
			if err := json.Unmarshal([]byte(v), &strct.Properties); err != nil {
				return err
			}
		case "property":
			if err := json.Unmarshal([]byte(v), &strct.Property); err != nil {
				return err
			}
		case "script":
			if err := json.Unmarshal([]byte(v), &strct.Script); err != nil {
				return err
			}
		case "type":
			if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
				return err
			}
			typeReceived = true
		}
	}
	// check if name (a required property) was received
	if !nameReceived {
		return errors.New("\"name\" is required but was not present")
	}
	// check if type (a required property) was received
	if !typeReceived {
		return errors.New("\"type\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelTemplatedRouteDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "beans" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"beans\": ")
	if tmp, err := json.Marshal(strct.Beans); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "parameters" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"parameters\": ")
	if tmp, err := json.Marshal(strct.Parameters); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "routeId" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"routeId\": ")
	if tmp, err := json.Marshal(strct.RouteId); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "RouteTemplateRef" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "routeTemplateRef" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"routeTemplateRef\": ")
	if tmp, err := json.Marshal(strct.RouteTemplateRef); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelTemplatedRouteDefinition) UnmarshalJSON(b []byte) error {
	routeTemplateRefReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "beans":
			if err := json.Unmarshal([]byte(v), &strct.Beans); err != nil {
				return err
			}
		case "parameters":
			if err := json.Unmarshal([]byte(v), &strct.Parameters); err != nil {
				return err
			}
		case "routeId":
			if err := json.Unmarshal([]byte(v), &strct.RouteId); err != nil {
				return err
			}
		case "routeTemplateRef":
			if err := json.Unmarshal([]byte(v), &strct.RouteTemplateRef); err != nil {
				return err
			}
			routeTemplateRefReceived = true
		}
	}
	// check if routeTemplateRef (a required property) was received
	if !routeTemplateRefReceived {
		return errors.New("\"routeTemplateRef\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelTemplatedRouteParameterDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "Name" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "name" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Value" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "value" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelTemplatedRouteParameterDefinition) UnmarshalJSON(b []byte) error {
	nameReceived := false
	valueReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "name":
			if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
				return err
			}
			nameReceived = true
		case "value":
			if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
				return err
			}
			valueReceived = true
		}
	}
	// check if name (a required property) was received
	if !nameReceived {
		return errors.New("\"name\" is required but was not present")
	}
	// check if value (a required property) was received
	if !valueReceived {
		return errors.New("\"value\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelToDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "inheritErrorHandler" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"inheritErrorHandler\": ")
	if tmp, err := json.Marshal(strct.InheritErrorHandler); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "parameters" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"parameters\": ")
	if tmp, err := json.Marshal(strct.Parameters); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "pattern" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"pattern\": ")
	if tmp, err := json.Marshal(strct.Pattern); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Uri" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "uri" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"uri\": ")
	if tmp, err := json.Marshal(strct.Uri); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelToDefinition) UnmarshalJSON(b []byte) error {
	uriReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "inheritErrorHandler":
			if err := json.Unmarshal([]byte(v), &strct.InheritErrorHandler); err != nil {
				return err
			}
		case "parameters":
			if err := json.Unmarshal([]byte(v), &strct.Parameters); err != nil {
				return err
			}
		case "pattern":
			if err := json.Unmarshal([]byte(v), &strct.Pattern); err != nil {
				return err
			}
		case "uri":
			if err := json.Unmarshal([]byte(v), &strct.Uri); err != nil {
				return err
			}
			uriReceived = true
		}
	}
	// check if uri (a required property) was received
	if !uriReceived {
		return errors.New("\"uri\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelToDynamicDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "allowOptimisedComponents" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"allowOptimisedComponents\": ")
	if tmp, err := json.Marshal(strct.AllowOptimisedComponents); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "autoStartComponents" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"autoStartComponents\": ")
	if tmp, err := json.Marshal(strct.AutoStartComponents); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "cacheSize" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"cacheSize\": ")
	if tmp, err := json.Marshal(strct.CacheSize); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "ignoreInvalidEndpoint" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"ignoreInvalidEndpoint\": ")
	if tmp, err := json.Marshal(strct.IgnoreInvalidEndpoint); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "inheritErrorHandler" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"inheritErrorHandler\": ")
	if tmp, err := json.Marshal(strct.InheritErrorHandler); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "parameters" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"parameters\": ")
	if tmp, err := json.Marshal(strct.Parameters); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "pattern" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"pattern\": ")
	if tmp, err := json.Marshal(strct.Pattern); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Uri" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "uri" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"uri\": ")
	if tmp, err := json.Marshal(strct.Uri); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelToDynamicDefinition) UnmarshalJSON(b []byte) error {
	uriReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "allowOptimisedComponents":
			if err := json.Unmarshal([]byte(v), &strct.AllowOptimisedComponents); err != nil {
				return err
			}
		case "autoStartComponents":
			if err := json.Unmarshal([]byte(v), &strct.AutoStartComponents); err != nil {
				return err
			}
		case "cacheSize":
			if err := json.Unmarshal([]byte(v), &strct.CacheSize); err != nil {
				return err
			}
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "ignoreInvalidEndpoint":
			if err := json.Unmarshal([]byte(v), &strct.IgnoreInvalidEndpoint); err != nil {
				return err
			}
		case "inheritErrorHandler":
			if err := json.Unmarshal([]byte(v), &strct.InheritErrorHandler); err != nil {
				return err
			}
		case "parameters":
			if err := json.Unmarshal([]byte(v), &strct.Parameters); err != nil {
				return err
			}
		case "pattern":
			if err := json.Unmarshal([]byte(v), &strct.Pattern); err != nil {
				return err
			}
		case "uri":
			if err := json.Unmarshal([]byte(v), &strct.Uri); err != nil {
				return err
			}
			uriReceived = true
		}
	}
	// check if uri (a required property) was received
	if !uriReceived {
		return errors.New("\"uri\" is required but was not present")
	}
	return nil
}

func (strct *OrgApacheCamelModelWireTapDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// Marshal the "allowOptimisedComponents" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"allowOptimisedComponents\": ")
	if tmp, err := json.Marshal(strct.AllowOptimisedComponents); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "autoStartComponents" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"autoStartComponents\": ")
	if tmp, err := json.Marshal(strct.AutoStartComponents); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "cacheSize" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"cacheSize\": ")
	if tmp, err := json.Marshal(strct.CacheSize); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "copy" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"copy\": ")
	if tmp, err := json.Marshal(strct.Copy); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "description" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "dynamicUri" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"dynamicUri\": ")
	if tmp, err := json.Marshal(strct.DynamicUri); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "executorService" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"executorService\": ")
	if tmp, err := json.Marshal(strct.ExecutorService); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "id" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "ignoreInvalidEndpoint" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"ignoreInvalidEndpoint\": ")
	if tmp, err := json.Marshal(strct.IgnoreInvalidEndpoint); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "inheritErrorHandler" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"inheritErrorHandler\": ")
	if tmp, err := json.Marshal(strct.InheritErrorHandler); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "onPrepare" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"onPrepare\": ")
	if tmp, err := json.Marshal(strct.OnPrepare); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "parameters" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"parameters\": ")
	if tmp, err := json.Marshal(strct.Parameters); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "pattern" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"pattern\": ")
	if tmp, err := json.Marshal(strct.Pattern); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "Uri" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "uri" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"uri\": ")
	if tmp, err := json.Marshal(strct.Uri); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrgApacheCamelModelWireTapDefinition) UnmarshalJSON(b []byte) error {
	uriReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "allowOptimisedComponents":
			if err := json.Unmarshal([]byte(v), &strct.AllowOptimisedComponents); err != nil {
				return err
			}
		case "autoStartComponents":
			if err := json.Unmarshal([]byte(v), &strct.AutoStartComponents); err != nil {
				return err
			}
		case "cacheSize":
			if err := json.Unmarshal([]byte(v), &strct.CacheSize); err != nil {
				return err
			}
		case "copy":
			if err := json.Unmarshal([]byte(v), &strct.Copy); err != nil {
				return err
			}
		case "description":
			if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
				return err
			}
		case "dynamicUri":
			if err := json.Unmarshal([]byte(v), &strct.DynamicUri); err != nil {
				return err
			}
		case "executorService":
			if err := json.Unmarshal([]byte(v), &strct.ExecutorService); err != nil {
				return err
			}
		case "id":
			if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
				return err
			}
		case "ignoreInvalidEndpoint":
			if err := json.Unmarshal([]byte(v), &strct.IgnoreInvalidEndpoint); err != nil {
				return err
			}
		case "inheritErrorHandler":
			if err := json.Unmarshal([]byte(v), &strct.InheritErrorHandler); err != nil {
				return err
			}
		case "onPrepare":
			if err := json.Unmarshal([]byte(v), &strct.OnPrepare); err != nil {
				return err
			}
		case "parameters":
			if err := json.Unmarshal([]byte(v), &strct.Parameters); err != nil {
				return err
			}
		case "pattern":
			if err := json.Unmarshal([]byte(v), &strct.Pattern); err != nil {
				return err
			}
		case "uri":
			if err := json.Unmarshal([]byte(v), &strct.Uri); err != nil {
				return err
			}
			uriReceived = true
		}
	}
	// check if uri (a required property) was received
	if !uriReceived {
		return errors.New("\"uri\" is required but was not present")
	}
	return nil
}
